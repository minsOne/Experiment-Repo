// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-macosx10.15 -enable-objc-interop -enable-library-evolution -swift-version 5 -Onone -module-name SwiftSyntax
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public struct AbsolutePosition : Swift.Comparable, Swift.Hashable {
  public let utf8Offset: Swift.Int
  public init(utf8Offset: Swift.Int)
  public func advanced(by offset: Swift.Int) -> SwiftSyntax.AbsolutePosition
  public static func < (lhs: SwiftSyntax.AbsolutePosition, rhs: SwiftSyntax.AbsolutePosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftSyntax.AbsolutePosition, b: SwiftSyntax.AbsolutePosition) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
@_transparent public func assert(_ condition: @autoclosure () -> Swift.Bool, _ message: @autoclosure () -> Swift.String = String(), file: Swift.StaticString = #file, line: Swift.UInt = #line) {
  Swift.assert(condition(), message(), file: file, line: line)
}
@_transparent public func assertionFailure(_ message: @autoclosure () -> Swift.String = String(), file: Swift.StaticString = #file, line: Swift.UInt = #line) {
  Swift.assertionFailure(message(), file: file, line: line)
}
@_transparent public func precondition(_ condition: @autoclosure () -> Swift.Bool, _ message: @autoclosure () -> Swift.String = String(), file: Swift.StaticString = #file, line: Swift.UInt = #line) {
  if !_fastPath(condition()) {
    fatalError(message(), file: file, line: line)
  }
}
public func findCommonAncestorOrSelf(_ lhs: SwiftSyntax.Syntax, _ rhs: SwiftSyntax.Syntax) -> SwiftSyntax.Syntax?
public func findCommonAncestorOrSelf(_ nodes: [SwiftSyntax.Syntax]) -> SwiftSyntax.Syntax?
extension SwiftSyntax.MemberAccessExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, base: (some ExprSyntaxProtocol)? = ExprSyntax?.none, period: SwiftSyntax.TokenSyntax = .periodToken(), name: SwiftSyntax.TokenSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.MissingDeclSyntax {
  public init(attributes: SwiftSyntax.AttributeListSyntax, modifiers: SwiftSyntax.DeclModifierListSyntax, arena: __shared SwiftSyntax.SyntaxArena)
}
extension SwiftSyntax.MissingExprSyntax {
  public init()
}
extension SwiftSyntax.MissingPatternSyntax {
  public init()
}
extension SwiftSyntax.MissingStmtSyntax {
  public init()
}
extension SwiftSyntax.MissingTypeSyntax {
  public init()
}
extension SwiftSyntax.MissingSyntax {
  public init()
}
public struct SourceLength : Swift.Comparable {
  public let utf8Length: Swift.Int
  public init(of text: Swift.String)
  public init(utf8Length: Swift.Int)
  public static let zero: SwiftSyntax.SourceLength
  public static func < (lhs: SwiftSyntax.SourceLength, rhs: SwiftSyntax.SourceLength) -> Swift.Bool
  public static func + (lhs: SwiftSyntax.SourceLength, rhs: SwiftSyntax.SourceLength) -> SwiftSyntax.SourceLength
  public static func += (lhs: inout SwiftSyntax.SourceLength, rhs: SwiftSyntax.SourceLength)
  public static func - (lhs: SwiftSyntax.SourceLength, rhs: SwiftSyntax.SourceLength) -> SwiftSyntax.SourceLength
  public static func -= (lhs: inout SwiftSyntax.SourceLength, rhs: SwiftSyntax.SourceLength)
  public static func == (a: SwiftSyntax.SourceLength, b: SwiftSyntax.SourceLength) -> Swift.Bool
}
extension SwiftSyntax.AbsolutePosition {
  public static func + (lhs: SwiftSyntax.AbsolutePosition, rhs: SwiftSyntax.SourceLength) -> SwiftSyntax.AbsolutePosition
  public static func += (lhs: inout SwiftSyntax.AbsolutePosition, rhs: SwiftSyntax.SourceLength)
  public static func - (lhs: SwiftSyntax.AbsolutePosition, rhs: SwiftSyntax.SourceLength) -> SwiftSyntax.AbsolutePosition
  public static func -= (lhs: inout SwiftSyntax.AbsolutePosition, rhs: SwiftSyntax.SourceLength)
}
public struct SourceLocation : Swift.Hashable, Swift.Codable {
  public var line: Swift.Int
  public let column: Swift.Int
  public let offset: Swift.Int
  public let file: Swift.String
  public let presumedLine: Swift.Int
  public let presumedFile: Swift.String
  public init(line: Swift.Int, column: Swift.Int, offset: Swift.Int, file: Swift.String, presumedLine: Swift.Int? = nil, presumedFile: Swift.String? = nil)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftSyntax.SourceLocation, b: SwiftSyntax.SourceLocation) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
public struct SourceRange : Swift.Hashable, Swift.Codable {
  public let start: SwiftSyntax.SourceLocation
  public let end: SwiftSyntax.SourceLocation
  public init(start: SwiftSyntax.SourceLocation, end: SwiftSyntax.SourceLocation)
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftSyntax.SourceRange, b: SwiftSyntax.SourceRange) -> Swift.Bool
  public func encode(to encoder: any Swift.Encoder) throws
  public var hashValue: Swift.Int {
    get
  }
  public init(from decoder: any Swift.Decoder) throws
}
final public class SourceLocationConverter {
  public init(fileName: Swift.String, tree: some SyntaxProtocol)
  @available(*, deprecated, message: "Use init(fileName:tree:) instead")
  convenience public init(file: Swift.String, tree: any SwiftSyntax.SyntaxProtocol)
  @available(*, deprecated, message: "Use init(fileName:tree:) instead")
  public init(file: Swift.String, source: Swift.String)
  final public var sourceLines: [Swift.String] {
    get
  }
  final public func location(for position: SwiftSyntax.AbsolutePosition) -> SwiftSyntax.SourceLocation
  final public func position(ofLine line: Swift.Int, column: Swift.Int) -> SwiftSyntax.AbsolutePosition
  final public func isValid(position pos: SwiftSyntax.AbsolutePosition) -> Swift.Bool
  final public func isValid(line: Swift.Int, column: Swift.Int) -> Swift.Bool
  @objc deinit
}
extension SwiftSyntax.Syntax {
  public func startLocation(converter: SwiftSyntax.SourceLocationConverter, afterLeadingTrivia: Swift.Bool = true) -> SwiftSyntax.SourceLocation
  public func endLocation(converter: SwiftSyntax.SourceLocationConverter, afterTrailingTrivia: Swift.Bool = false) -> SwiftSyntax.SourceLocation
  public func sourceRange(converter: SwiftSyntax.SourceLocationConverter, afterLeadingTrivia: Swift.Bool = true, afterTrailingTrivia: Swift.Bool = false) -> SwiftSyntax.SourceRange
}
extension SwiftSyntax.SyntaxProtocol {
  public func startLocation(converter: SwiftSyntax.SourceLocationConverter, afterLeadingTrivia: Swift.Bool = true) -> SwiftSyntax.SourceLocation
  public func endLocation(converter: SwiftSyntax.SourceLocationConverter, afterTrailingTrivia: Swift.Bool = false) -> SwiftSyntax.SourceLocation
  public func sourceRange(converter: SwiftSyntax.SourceLocationConverter, afterLeadingTrivia: Swift.Bool = true, afterTrailingTrivia: Swift.Bool = false) -> SwiftSyntax.SourceRange
}
public enum SourcePresence {
  case present
  case missing
  public static func == (a: SwiftSyntax.SourcePresence, b: SwiftSyntax.SourcePresence) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.AttributeSyntax {
  @available(*, deprecated, renamed: "Arguments")
  public typealias Argument = SwiftSyntax.AttributeSyntax.Arguments
}
@available(*, deprecated, renamed: "WithAttributesSyntax")
public typealias AttributedSyntax = SwiftSyntax.WithAttributesSyntax
extension SwiftSyntax.AvailabilityArgumentSyntax {
  @available(*, deprecated, renamed: "Argument")
  public typealias Entry = SwiftSyntax.AvailabilityArgumentSyntax.Argument
}
extension SwiftSyntax.ClosureSignatureSyntax {
  @available(*, deprecated, renamed: "ParameterClause")
  public typealias Input = SwiftSyntax.ClosureSignatureSyntax.ParameterClause
}
extension SwiftSyntax.ClosureSignatureSyntax.ParameterClause {
  @available(*, deprecated, renamed: "parameterClause")
  public static func input(_ parameterClause: SwiftSyntax.ClosureParameterClauseSyntax) -> SwiftSyntax.ClosureSignatureSyntax.ParameterClause
}
extension SwiftSyntax.DeclGroupSyntax {
  @available(*, deprecated, renamed: "memberBlock")
  public var members: SwiftSyntax.MemberDeclBlockSyntax {
    get
    set(value)
  }
}
extension SwiftSyntax.FreestandingMacroExpansionSyntax {
  @available(*, deprecated, renamed: "genericArgumentClause")
  public var genericArguments: SwiftSyntax.GenericArgumentClauseSyntax? {
    get
    set
  }
}
extension SwiftSyntax.GenericRequirementSyntax {
  @available(*, deprecated, renamed: "Requirement")
  public typealias Body = SwiftSyntax.GenericRequirementSyntax.Requirement
}
@available(*, deprecated, renamed: "NamedDeclSyntax")
public typealias IdentifiedDeclSyntax = SwiftSyntax.NamedDeclSyntax
extension SwiftSyntax.KeyPathPropertyComponentSyntax {
  @available(*, deprecated, renamed: "declName.baseName")
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "declName.argumentNames")
  public var declNameArguments: SwiftSyntax.DeclNameArgumentsSyntax? {
    get
    set
  }
}
extension SwiftSyntax.NamedDeclSyntax {
  @available(*, deprecated, renamed: "name")
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set
  }
}
extension SwiftSyntax.MemberAccessExprSyntax {
  @available(*, deprecated, renamed: "declName.baseName")
  public var name: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "declName.argumentNames")
  public var declNameArguments: SwiftSyntax.DeclNameArgumentsSyntax? {
    get
    set
  }
  @available(*, deprecated, message: "Use initializer taking `DeclReferenceExprSyntax` instead")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBase: SwiftSyntax.UnexpectedNodesSyntax? = nil, base: (some ExprSyntaxProtocol)? = ExprSyntax?.none, _ unexpectedBetweenBaseAndPeriod: SwiftSyntax.UnexpectedNodesSyntax? = nil, dot: SwiftSyntax.TokenSyntax = .periodToken(), _ unexpectedBetweenPeriodAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndDeclNameArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, declNameArguments: SwiftSyntax.DeclNameArgumentsSyntax? = nil, _ unexpectedAfterDeclNameArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.SyntaxProtocol {
  @available(*, deprecated, message: "Use detached computed property instead.")
  public func detach() -> Self
}
extension SwiftSyntax.TokenKind {
  @available(*, deprecated, renamed: "regexPoundDelimiter")
  public static func extendedRegexDelimiter(_ text: Swift.String) -> SwiftSyntax.TokenKind
  @available(*, deprecated, renamed: "floatLiteral")
  public static func floatingLiteral(_ text: Swift.String) -> SwiftSyntax.TokenKind
  @available(*, deprecated, renamed: "leftSquare")
  public static var leftSquareBracket: SwiftSyntax.TokenKind {
    get
  }
  @available(*, deprecated, renamed: "poundAvailable")
  public static var poundAvailableKeyword: SwiftSyntax.TokenKind {
    get
  }
  @available(*, deprecated, renamed: "poundElse")
  public static var poundElseKeyword: SwiftSyntax.TokenKind {
    get
  }
  @available(*, deprecated, renamed: "poundElseif")
  public static var poundElseifKeyword: SwiftSyntax.TokenKind {
    get
  }
  @available(*, deprecated, renamed: "poundEndif")
  public static var poundEndifKeyword: SwiftSyntax.TokenKind {
    get
  }
  @available(*, deprecated, renamed: "poundIf")
  public static var poundIfKeyword: SwiftSyntax.TokenKind {
    get
  }
  @available(*, deprecated, renamed: "poundSourceLocation")
  public static var poundSourceLocationKeyword: SwiftSyntax.TokenKind {
    get
  }
  @available(*, deprecated, renamed: "poundUnavailable")
  public static var poundUnavailableKeyword: SwiftSyntax.TokenKind {
    get
  }
  @available(*, deprecated, renamed: "rawStringPoundDelimiter")
  public static func rawStringDelimiter(_ text: Swift.String) -> SwiftSyntax.TokenKind
  @available(*, deprecated, renamed: "rightSquare")
  public static var rightSquareBracket: SwiftSyntax.TokenKind {
    get
  }
  @available(*, deprecated, renamed: "endOfFile")
  public static var eof: SwiftSyntax.TokenKind {
    get
  }
}
extension SwiftSyntax.TokenSyntax {
  @available(*, deprecated, renamed: "regexPoundDelimiter")
  public static func extendedRegexDelimiter(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  @available(*, deprecated, renamed: "floatLiteral")
  public static func floatingLiteral(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  @available(*, deprecated, renamed: "leftSquareToken")
  public static func leftSquareBracketToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  @available(*, deprecated, renamed: "poundAvailableToken")
  public static func poundAvailableKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  @available(*, deprecated, renamed: "poundElseToken")
  public static func poundElseKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  @available(*, deprecated, renamed: "poundElseifToken")
  public static func poundElseifKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  @available(*, deprecated, renamed: "poundEndifToken")
  public static func poundEndifKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  @available(*, deprecated, renamed: "poundIfToken")
  public static func poundIfKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  @available(*, deprecated, renamed: "poundSourceLocationToken")
  public static func poundSourceLocationKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  @available(*, deprecated, renamed: "poundUnavailableToken")
  public static func poundUnavailableKeyword(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  @available(*, deprecated, renamed: "rawStringPoundDelimiter")
  public static func rawStringDelimiter(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  @available(*, deprecated, renamed: "rightSquareToken")
  public static func rightSquareBracketToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  @available(*, deprecated, renamed: "endOfFileToken")
  public static func eof(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
}
public enum SyntaxNodeStructure {
  public enum SyntaxChoice {
    case node(any SwiftSyntax.SyntaxProtocol.Type)
    case token(SwiftSyntax.TokenKind)
  }
  case layout([Swift.AnyKeyPath])
  case collection(any SwiftSyntax.SyntaxProtocol.Type)
  case choices([SwiftSyntax.SyntaxNodeStructure.SyntaxChoice])
  public var isLayout: Swift.Bool {
    get
  }
  public var isCollection: Swift.Bool {
    get
  }
  public var isChoices: Swift.Bool {
    get
  }
}
public struct Syntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public var _syntaxNode: SwiftSyntax.Syntax {
    get
  }
  public init(_ syntax: some SyntaxProtocol)
  public init(fromProtocol syntax: any SwiftSyntax.SyntaxProtocol)
  public init?(fromProtocol syntax: (any SwiftSyntax.SyntaxProtocol)?)
  @available(*, deprecated, message: "Expression always evaluates to true")
  public func isProtocol(_: (any SwiftSyntax.SyntaxProtocol).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.SyntaxProtocol).Type) -> any SwiftSyntax.SyntaxProtocol
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: SwiftSyntax.Syntax, rhs: SwiftSyntax.Syntax) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.Syntax : Swift.Identifiable {
  public typealias ID = SwiftSyntax.SyntaxIdentifier
}
extension SwiftSyntax.Syntax {
  public var syntaxTextBytes: [Swift.UInt8] {
    get
  }
}
public protocol SyntaxHashable : Swift.Hashable {
  var _syntaxNode: SwiftSyntax.Syntax { get }
}
extension SwiftSyntax.SyntaxHashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (lhs: Self, rhs: Self) -> Swift.Bool
}
public protocol SyntaxProtocol : Swift.CustomDebugStringConvertible, Swift.CustomReflectable, Swift.CustomStringConvertible, Swift.TextOutputStreamable {
  var _syntaxNode: SwiftSyntax.Syntax { get }
  init?(_ node: some SyntaxProtocol)
  static var structure: SwiftSyntax.SyntaxNodeStructure { get }
}
extension SwiftSyntax.SyntaxProtocol {
  public init?<S>(_ node: S?) where S : SwiftSyntax.SyntaxProtocol
  public func `is`<S>(_ syntaxType: S.Type) -> Swift.Bool where S : SwiftSyntax.SyntaxProtocol
  public func `as`<S>(_ syntaxType: S.Type) -> S? where S : SwiftSyntax.SyntaxProtocol
  public func cast<S>(_ syntaxType: S.Type) -> S where S : SwiftSyntax.SyntaxProtocol
}
extension SwiftSyntax.SyntaxProtocol {
  public func with<T>(_ keyPath: Swift.WritableKeyPath<Self, T>, _ value: T) -> Self
  public var detached: Self {
    get
  }
}
extension SwiftSyntax.SyntaxProtocol {
  public var kind: SwiftSyntax.SyntaxKind {
    get
  }
  public var syntaxNodeType: any SwiftSyntax.SyntaxProtocol.Type {
    get
  }
}
extension SwiftSyntax.SyntaxProtocol {
  public func children(viewMode: SwiftSyntax.SyntaxTreeViewMode) -> SwiftSyntax.SyntaxChildren
  @available(*, deprecated, message: "Use index(of:) on the collection that contains this node")
  public var index: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var parent: SwiftSyntax.Syntax? {
    get
  }
  public var root: SwiftSyntax.Syntax {
    get
  }
  public var hasParent: Swift.Bool {
    get
  }
  public var keyPathInParent: Swift.AnyKeyPath? {
    get
  }
  @available(*, deprecated, message: "Use previousToken(viewMode:) instead")
  public var previousToken: SwiftSyntax.TokenSyntax? {
    get
  }
}
extension SwiftSyntax.SyntaxProtocol {
  public func previousToken(viewMode: SwiftSyntax.SyntaxTreeViewMode) -> SwiftSyntax.TokenSyntax?
  @available(*, deprecated, message: "Use nextToken(viewMode:) instead")
  public var nextToken: SwiftSyntax.TokenSyntax? {
    get
  }
  public func nextToken(viewMode: SwiftSyntax.SyntaxTreeViewMode) -> SwiftSyntax.TokenSyntax?
  @available(*, deprecated, message: "Use firstToken(viewMode: .sourceAccurate) instead")
  public var firstToken: SwiftSyntax.TokenSyntax? {
    get
  }
  public func firstToken(viewMode: SwiftSyntax.SyntaxTreeViewMode) -> SwiftSyntax.TokenSyntax?
  @available(*, deprecated, message: "Use lastToken(viewMode: .sourceAccurate) instead")
  public var lastToken: SwiftSyntax.TokenSyntax? {
    get
  }
  public func lastToken(viewMode: SwiftSyntax.SyntaxTreeViewMode) -> SwiftSyntax.TokenSyntax?
  public func tokens(viewMode: SwiftSyntax.SyntaxTreeViewMode) -> SwiftSyntax.TokenSequence
  public func token(at position: SwiftSyntax.AbsolutePosition) -> SwiftSyntax.TokenSyntax?
}
extension SwiftSyntax.SyntaxProtocol {
  public var hasError: Swift.Bool {
    get
  }
  public var hasWarning: Swift.Bool {
    get
  }
  public var hasSequenceExpr: Swift.Bool {
    get
  }
  public var hasMaximumNestingLevelOverflow: Swift.Bool {
    get
  }
}
extension SwiftSyntax.SyntaxProtocol {
  public var position: SwiftSyntax.AbsolutePosition {
    get
  }
  public var positionAfterSkippingLeadingTrivia: SwiftSyntax.AbsolutePosition {
    get
  }
  public var endPositionBeforeTrailingTrivia: SwiftSyntax.AbsolutePosition {
    get
  }
  public var endPosition: SwiftSyntax.AbsolutePosition {
    get
  }
  public var totalLength: SwiftSyntax.SourceLength {
    get
  }
  public var trimmedLength: SwiftSyntax.SourceLength {
    get
  }
  public var totalByteRange: SwiftSyntax.ByteSourceRange {
    get
  }
  public var trimmedByteRange: SwiftSyntax.ByteSourceRange {
    get
  }
  @available(*, deprecated, renamed: "trimmedLength")
  public var contentLength: SwiftSyntax.SourceLength {
    get
  }
  @available(*, deprecated, renamed: "totalByteRange")
  public var byteRange: SwiftSyntax.ByteSourceRange {
    get
  }
  @available(*, deprecated, message: "Use totalLength.utf8Length")
  public var byteSize: Swift.Int {
    get
  }
  @available(*, deprecated, message: "Use trimmedLength.utf8Length")
  public var byteSizeAfterTrimmingTrivia: Swift.Int {
    get
  }
}
extension SwiftSyntax.SyntaxProtocol {
  public var leadingTrivia: SwiftSyntax.Trivia {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia {
    get
    set
  }
  public var leadingTriviaLength: SwiftSyntax.SourceLength {
    get
  }
  public var trailingTriviaLength: SwiftSyntax.SourceLength {
    get
  }
}
extension SwiftSyntax.SyntaxProtocol {
  public var description: Swift.String {
    get
  }
  public var syntaxTextBytes: [Swift.UInt8] {
    get
  }
  public func write<Target>(to target: inout Target) where Target : Swift.TextOutputStream
  public var trimmed: Self {
    get
  }
  public func trimmed(matching filter: (SwiftSyntax.TriviaPiece) -> Swift.Bool) -> Self
  public var trimmedDescription: Swift.String {
    get
  }
  public func trimmedDescription(matching filter: (SwiftSyntax.TriviaPiece) -> Swift.Bool) -> Swift.String
}
extension SwiftSyntax.SyntaxProtocol {
  @available(*, deprecated, message: "Check children(viewMode: .all).isEmpty instead")
  public var isImplicit: Swift.Bool {
    get
  }
  public var id: SwiftSyntax.SyntaxIdentifier {
    get
  }
}
extension SwiftSyntax.SyntaxProtocol {
  public var debugDescription: Swift.String {
    get
  }
  public var customMirror: Swift.Mirror {
    get
  }
  public func debugDescription(includeTrivia: Swift.Bool = false, converter: SwiftSyntax.SourceLocationConverter? = nil, mark: (any SwiftSyntax.SyntaxProtocol)? = nil, indentString: Swift.String = "") -> Swift.String
}
public protocol SyntaxChildChoices : SwiftSyntax.SyntaxProtocol {
}
public struct TokenSequence : Swift.Sequence {
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.TokenSyntax?
    public typealias Element = SwiftSyntax.TokenSyntax
  }
  public init(_ node: SwiftSyntax.Syntax, viewMode: SwiftSyntax.SyntaxTreeViewMode)
  public func makeIterator() -> SwiftSyntax.TokenSequence.Iterator
  public func reversed() -> SwiftSyntax.ReversedTokenSequence
  public typealias Element = SwiftSyntax.TokenSyntax
}
extension SwiftSyntax.TokenSequence : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public struct ReversedTokenSequence : Swift.Sequence {
  public struct Iterator : Swift.IteratorProtocol {
    public mutating func next() -> SwiftSyntax.TokenSyntax?
    public typealias Element = SwiftSyntax.TokenSyntax
  }
  public init(_ node: SwiftSyntax.Syntax, viewMode: SwiftSyntax.SyntaxTreeViewMode)
  public func makeIterator() -> SwiftSyntax.ReversedTokenSequence.Iterator
  public func reversed() -> SwiftSyntax.TokenSequence
  public typealias Element = SwiftSyntax.TokenSyntax
}
extension SwiftSyntax.ReversedTokenSequence : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
@available(*, unavailable, message: "use 'Syntax' instead")
public struct SyntaxNode {
}
@_hasMissingDesignatedInitializers public class SyntaxArena {
  convenience public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ParsingSyntaxArena : SwiftSyntax.SyntaxArena {
  @objc deinit
}
public struct SyntaxChildrenIndex : Swift.Hashable, Swift.Comparable, Swift.ExpressibleByNilLiteral {
  public init(nilLiteral: ())
  public static func < (lhs: SwiftSyntax.SyntaxChildrenIndex, rhs: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftSyntax.SyntaxChildrenIndex, b: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct SyntaxChildren : Swift.BidirectionalCollection {
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Element = SwiftSyntax.Syntax
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public subscript(index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.Syntax {
    get
  }
  public func index(of node: some SyntaxProtocol) -> SwiftSyntax.SyntaxChildrenIndex?
  public func index(of node: SwiftSyntax.Syntax) -> SwiftSyntax.SyntaxChildrenIndex?
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.SyntaxChildren>
  public typealias Iterator = Swift.IndexingIterator<SwiftSyntax.SyntaxChildren>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.SyntaxChildren>
}
public protocol SyntaxCollection : Swift.BidirectionalCollection, Swift.ExpressibleByArrayLiteral, SwiftSyntax.SyntaxProtocol where Self.Element : SwiftSyntax.SyntaxProtocol, Self.Index == SwiftSyntax.SyntaxChildrenIndex {
  associatedtype Iterator = SwiftSyntax.SyntaxCollectionIterator<Self.Element>
  static var syntaxKind: SwiftSyntax.SyntaxKind { get }
}
extension SwiftSyntax.SyntaxCollection {
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  @available(*, deprecated, message: "Call to initializer is not necessary.")
  public init(_ collection: Self)
  public init<Children>(_ children: Children) where Children : Swift.Sequence, Self.Element == Children.Element
  public init(arrayLiteral elements: Self.Element...)
  public var count: Swift.Int {
    get
  }
  public func index(of node: some SyntaxProtocol) -> SwiftSyntax.SyntaxChildrenIndex?
  public func index(of node: Self.Element) -> SwiftSyntax.SyntaxChildrenIndex?
  @available(*, deprecated, message: "Create a new array of elements and construct a new collection type from those elements")
  public func appending(_ syntax: Self.Element) -> Self
  @available(*, deprecated, message: "Create a new array of elements and construct a new collection type from those elements")
  public func prepending(_ syntax: Self.Element) -> Self
  @available(*, deprecated, message: "Create a new array of elements and construct a new collection type from those elements")
  public func inserting(_ syntax: Self.Element, at index: Swift.Int) -> Self
  @available(*, deprecated, message: "Use .with(\\.[index], newValue) instead")
  public func replacing(childAt index: Swift.Int, with syntax: Self.Element) -> Self
  @available(*, deprecated, message: "Use filter to remove unwanted elements and construct a new collection type from the filtered elements")
  public func removing(childAt index: Swift.Int) -> Self
  @available(*, deprecated, message: "Use CollectionType(node.dropFirst())")
  public func removingFirst() -> Self
  @available(*, deprecated, message: "Use CollectionType(node.dropLast())")
  public func removingLast() -> Self
}
public struct SyntaxCollectionIterator<E> : Swift.IteratorProtocol where E : SwiftSyntax.SyntaxProtocol {
  public typealias Element = E
  public mutating func next() -> SwiftSyntax.SyntaxCollectionIterator<E>.Element?
}
extension SwiftSyntax.SyntaxCollection {
  public mutating func replaceSubrange(_ subrange: Swift.Range<Self.Index>, with newElements: some Collection<Element>)
  public mutating func append(_ newElement: Self.Element)
  public mutating func append(contentsOf newElements: some Sequence<Element>)
  public mutating func insert(_ newElement: Self.Element, at i: Self.Index)
  public mutating func insert(contentsOf newElements: some Collection<Element>, at i: Self.Index)
  @discardableResult
  public mutating func remove(at position: Self.Index) -> Self.Element
  public mutating func removeSubrange(_ bounds: Swift.Range<Self.Index>)
  public static func + (lhs: Self, rhs: some Sequence<Element>) -> Self
  public static func + (lhs: Self, rhs: some RangeReplaceableCollection<Element>) -> Self
  public static func + (lhs: some Sequence<Element>, rhs: Self) -> Self
  public static func + (lhs: some RangeReplaceableCollection<Element>, rhs: Self) -> Self
  public static func += (lhs: inout Self, rhs: some Sequence<Element>)
  public func filter(_ isIncluded: (Self.Element) throws -> Swift.Bool) rethrows -> Self
}
extension SwiftSyntax.SyntaxCollection {
  public func makeIterator() -> SwiftSyntax.SyntaxCollectionIterator<Self.Element>
  public var startIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public var endIndex: SwiftSyntax.SyntaxChildrenIndex {
    get
  }
  public func index(after index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func index(before index: SwiftSyntax.SyntaxChildrenIndex) -> SwiftSyntax.SyntaxChildrenIndex
  public func distance(from start: SwiftSyntax.SyntaxChildrenIndex, to end: SwiftSyntax.SyntaxChildrenIndex) -> Swift.Int
  public subscript(position: SwiftSyntax.SyntaxChildrenIndex) -> Self.Element {
    get
    set
  }
}
public struct SyntaxIdentifier : Swift.Hashable {
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftSyntax.SyntaxIdentifier, b: SwiftSyntax.SyntaxIdentifier) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public enum SyntaxTreeViewMode {
  case sourceAccurate
  case fixedUp
  case all
  public static func == (a: SwiftSyntax.SyntaxTreeViewMode, b: SwiftSyntax.SyntaxTreeViewMode) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct TokenDiagnostic : Swift.Hashable {
  public enum Severity : Swift.Comparable {
    case warning
    case error
    public static func == (a: SwiftSyntax.TokenDiagnostic.Severity, b: SwiftSyntax.TokenDiagnostic.Severity) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public static func < (a: SwiftSyntax.TokenDiagnostic.Severity, b: SwiftSyntax.TokenDiagnostic.Severity) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Kind {
    case editorPlaceholder
    case equalMustHaveConsistentWhitespaceOnBothSides
    case expectedBinaryExponentInHexFloatLiteral
    case expectedClosingBraceInUnicodeEscape
    case expectedDigitInFloatLiteral
    case expectedHexCodeInUnicodeEscape
    case expectedHexDigitInHexLiteral
    case insufficientIndentationInMultilineStringLiteral
    case invalidBinaryDigitInIntegerLiteral
    case invalidCharacter
    case invalidDecimalDigitInIntegerLiteral
    case invalidEscapeSequenceInStringLiteral
    case invalidFloatingPointExponentCharacter
    case invalidFloatingPointExponentDigit
    case invalidHexDigitInIntegerLiteral
    case invalidIdentifierStartCharacter
    case invalidNumberOfHexDigitsInUnicodeEscape
    case invalidOctalDigitInIntegerLiteral
    case invalidUtf8
    case multilineRegexClosingNotOnNewline
    case nonBreakingSpace
    case nulCharacter
    case sourceConflictMarker
    case spaceAtEndOfRegexLiteral
    case spaceAtStartOfRegexLiteral
    case tokenDiagnosticOffsetOverflow
    case unexpectedBlockCommentEnd
    case unicodeCurlyQuote
    case unprintableAsciiCharacter
    case unterminatedBlockComment
    public static func == (a: SwiftSyntax.TokenDiagnostic.Kind, b: SwiftSyntax.TokenDiagnostic.Kind) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public let kind: SwiftSyntax.TokenDiagnostic.Kind
  public let byteOffset: Swift.UInt16
  public init(_ kind: SwiftSyntax.TokenDiagnostic.Kind, byteOffset: Swift.UInt16)
  public init(_ kind: SwiftSyntax.TokenDiagnostic.Kind, byteOffset: Swift.Int)
  public init?(combining lhs: SwiftSyntax.TokenDiagnostic?, _ rhs: SwiftSyntax.TokenDiagnostic?)
  public var severity: SwiftSyntax.TokenDiagnostic.Severity {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public static func == (a: SwiftSyntax.TokenDiagnostic, b: SwiftSyntax.TokenDiagnostic) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
}
public struct TokenSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?<S>(_ node: S) where S : SwiftSyntax.SyntaxProtocol
  public init(_ kind: SwiftSyntax.TokenKind, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence)
  public var presence: SwiftSyntax.SourcePresence {
    get
    set
  }
  public var text: Swift.String {
    get
  }
  public var leadingTrivia: SwiftSyntax.Trivia {
    get
    set
  }
  public var trailingTrivia: SwiftSyntax.Trivia {
    get
    set
  }
  public var tokenKind: SwiftSyntax.TokenKind {
    get
    set
  }
  public var trimmedLength: SwiftSyntax.SourceLength {
    get
  }
  public var leadingTriviaLength: SwiftSyntax.SourceLength {
    get
  }
  public var trailingTriviaLength: SwiftSyntax.SourceLength {
    get
  }
  public var totalLength: SwiftSyntax.SourceLength {
    get
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var tokenDiagnostic: SwiftSyntax.TokenDiagnostic? {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TokenSyntax : Swift.CustomReflectable {
  public var customMirror: Swift.Mirror {
    get
  }
}
public enum TriviaPosition {
  case leading
  case trailing
  public static func == (a: SwiftSyntax.TriviaPosition, b: SwiftSyntax.TriviaPosition) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
public struct Trivia {
  public let pieces: [SwiftSyntax.TriviaPiece]
  public init(pieces: some Sequence<TriviaPiece>)
  public var isEmpty: Swift.Bool {
    get
  }
  public var sourceLength: SwiftSyntax.SourceLength {
    get
  }
  @available(*, deprecated, renamed: "sourceLength.utf8Length")
  public var byteSize: Swift.Int {
    get
  }
  public func appending(_ piece: SwiftSyntax.TriviaPiece) -> SwiftSyntax.Trivia
  public func appending(_ trivia: SwiftSyntax.Trivia) -> SwiftSyntax.Trivia
  public func merging(_ trivia: SwiftSyntax.Trivia?) -> SwiftSyntax.Trivia
  public func merging(triviaOf node: (some SyntaxProtocol)?) -> SwiftSyntax.Trivia
  public static func + (lhs: SwiftSyntax.Trivia, rhs: SwiftSyntax.Trivia) -> SwiftSyntax.Trivia
  public static func += (lhs: inout SwiftSyntax.Trivia, rhs: SwiftSyntax.Trivia)
}
extension SwiftSyntax.Trivia : Swift.Equatable {
  public static func == (a: SwiftSyntax.Trivia, b: SwiftSyntax.Trivia) -> Swift.Bool
}
extension SwiftSyntax.Trivia : Swift.Collection {
  public var startIndex: Swift.Int {
    get
  }
  public var endIndex: Swift.Int {
    get
  }
  public func index(after index: Swift.Int) -> Swift.Int
  public subscript(index: Swift.Int) -> SwiftSyntax.TriviaPiece {
    get
  }
  public typealias Element = SwiftSyntax.TriviaPiece
  public typealias Index = Swift.Int
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.Trivia>
  public typealias Iterator = Swift.IndexingIterator<SwiftSyntax.Trivia>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.Trivia>
}
extension SwiftSyntax.Trivia : Swift.ExpressibleByArrayLiteral {
  public init(arrayLiteral elements: SwiftSyntax.TriviaPiece...)
  public typealias ArrayLiteralElement = SwiftSyntax.TriviaPiece
}
extension SwiftSyntax.Trivia : Swift.TextOutputStreamable {
  public func write(to target: inout some TextOutputStream)
}
extension SwiftSyntax.Trivia : Swift.CustomStringConvertible {
  public var description: Swift.String {
    get
  }
}
extension SwiftSyntax.Trivia : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
public struct ByteSourceRange : Swift.Equatable {
  public var offset: Swift.Int
  public var length: Swift.Int
  public init(offset: Swift.Int, length: Swift.Int)
  public var endOffset: Swift.Int {
    get
  }
  public var isEmpty: Swift.Bool {
    get
  }
  public func intersectsOrTouches(_ other: SwiftSyntax.ByteSourceRange) -> Swift.Bool
  public func intersects(_ other: SwiftSyntax.ByteSourceRange) -> Swift.Bool
  public func intersected(_ other: SwiftSyntax.ByteSourceRange) -> SwiftSyntax.ByteSourceRange
  public static func == (a: SwiftSyntax.ByteSourceRange, b: SwiftSyntax.ByteSourceRange) -> Swift.Bool
}
public struct IncrementalEdit : Swift.Equatable {
  public let range: SwiftSyntax.ByteSourceRange
  public let replacementLength: Swift.Int
  public var offset: Swift.Int {
    get
  }
  public var length: Swift.Int {
    get
  }
  public var endOffset: Swift.Int {
    get
  }
  public var replacementRange: SwiftSyntax.ByteSourceRange {
    get
  }
  public init(range: SwiftSyntax.ByteSourceRange, replacementLength: Swift.Int)
  public init(offset: Swift.Int, length: Swift.Int, replacementLength: Swift.Int)
  public func intersectsOrTouchesRange(_ other: SwiftSyntax.ByteSourceRange) -> Swift.Bool
  public func intersectsRange(_ other: SwiftSyntax.ByteSourceRange) -> Swift.Bool
  public static func == (a: SwiftSyntax.IncrementalEdit, b: SwiftSyntax.IncrementalEdit) -> Swift.Bool
}
public enum Keyword : Swift.UInt8, Swift.Hashable {
  case __consuming
  case __owned
  case __setter_access
  case __shared
  case _alignment
  case _backDeploy
  case _borrow
  case _cdecl
  case _Class
  case _compilerInitialized
  case _const
  case _documentation
  case _dynamicReplacement
  case _effects
  case _expose
  case _forward
  case _implements
  case _linear
  case _local
  case _modify
  case _move
  case _NativeClass
  case _NativeRefCountedObject
  case _noMetadata
  case _nonSendable
  case _objcImplementation
  case _objcRuntimeName
  case _opaqueReturnTypeOf
  case _optimize
  case _originallyDefinedIn
  case _PackageDescription
  case _private
  case _projectedValueProperty
  case _read
  case _RefCountedObject
  case _semantics
  case _specialize
  case _spi
  case _spi_available
  case _swift_native_objc_runtime_base
  case _Trivial
  case _TrivialAtMost
  case _typeEraser
  case _unavailableFromAsync
  case _underlyingVersion
  case _UnknownLayout
  case _version
  case accesses
  case actor
  case addressWithNativeOwner
  case addressWithOwner
  case any
  case `Any`
  case `as`
  case assignment
  case `associatedtype`
  case associativity
  case async
  case attached
  case autoclosure
  case availability
  case available
  case await
  case backDeployed
  case before
  case block
  case borrowing
  case `break`
  case canImport
  case `case`
  case `catch`
  case `class`
  case compiler
  case consume
  case copy
  case consuming
  case `continue`
  case convenience
  case convention
  case cType
  case `default`
  case `defer`
  case `deinit`
  case deprecated
  case derivative
  case didSet
  case differentiable
  case distributed
  case `do`
  case dynamic
  case each
  case `else`
  case `enum`
  case escaping
  case exclusivity
  case exported
  case `extension`
  case `fallthrough`
  case `false`
  case file
  case `fileprivate`
  case final
  case `for`
  case discard
  case forward
  case `func`
  case get
  case `guard`
  case higherThan
  case `if`
  case `import`
  case `in`
  case indirect
  case infix
  case `init`
  case initializes
  case inline
  case `inout`
  case `internal`
  case introduced
  case `is`
  case isolated
  case kind
  case lazy
  case left
  case `let`
  case line
  case linear
  case lowerThan
  case macro
  case message
  case metadata
  case module
  case mutableAddressWithNativeOwner
  case mutableAddressWithOwner
  case mutating
  case `nil`
  case noasync
  case noDerivative
  case noescape
  case none
  case nonisolated
  case nonmutating
  case objc
  case obsoleted
  case of
  case open
  case `operator`
  case optional
  case override
  case package
  case postfix
  case `precedencegroup`
  case prefix
  case `private`
  case `Protocol`
  case `protocol`
  case `public`
  case reasync
  case renamed
  case `repeat`
  case required
  case `rethrows`
  case `return`
  case reverse
  case right
  case safe
  case `self`
  case `Self`
  case Sendable
  case set
  case some
  case sourceFile
  case spi
  case spiModule
  case `static`
  case `struct`
  case `subscript`
  case `super`
  case swift
  case `switch`
  case target
  case `throw`
  case `throws`
  case transpose
  case `true`
  case `try`
  case `Type`
  case `typealias`
  case unavailable
  case unchecked
  case unowned
  case unsafe
  case unsafeAddress
  case unsafeMutableAddress
  case `var`
  case visibility
  case weak
  case `where`
  case `while`
  case willSet
  case witness_method
  case wrt
  case yield
  public init?(rawValue: Swift.UInt8)
  public typealias RawValue = Swift.UInt8
  public var rawValue: Swift.UInt8 {
    get
  }
}
extension SwiftSyntax.AccessorDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifierAndAccessorSpecifier")
  public var unexpectedBetweenModifierAndAccessorKind: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "accessorSpecifier")
  public var accessorKind: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenAccessorSpecifierAndParameters")
  public var unexpectedBetweenAccessorKindAndParameter: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "parameters")
  public var parameter: SwiftSyntax.AccessorParametersSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndEffectSpecifiers")
  public var unexpectedBetweenParameterAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "AccessorDeclSyntax(leadingTrivia:_:attributes:_:modifier:_:accessorSpecifier:_:parameters:_:effectSpecifiers:_:body:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifier: SwiftSyntax.DeclModifierSyntax? = nil, _ unexpectedBetweenModifierAndAccessorKind: SwiftSyntax.UnexpectedNodesSyntax? = nil, accessorKind: SwiftSyntax.TokenSyntax, _ unexpectedBetweenAccessorKindAndParameter: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameter: SwiftSyntax.AccessorParametersSyntax? = nil, _ unexpectedBetweenParameterAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, effectSpecifiers: SwiftSyntax.AccessorEffectSpecifiersSyntax? = nil, _ unexpectedBetweenEffectSpecifiersAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, body: SwiftSyntax.CodeBlockSyntax? = nil, _ unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ActorDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenActorKeywordAndName")
  public var unexpectedBetweenActorKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "name")
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ActorDeclSyntax(leadingTrivia:_:attributes:_:modifiers:_:actorKeyword:_:name:_:genericParameterClause:_:inheritanceClause:_:genericWhereClause:_:memberBlock:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndActorKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, actorKeyword: SwiftSyntax.TokenSyntax = .keyword(.actor), _ unexpectedBetweenActorKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, _ unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, memberBlock: SwiftSyntax.MemberBlockSyntax, _ unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ArrayExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftSquare")
  public var unexpectedBeforeLeftSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "leftSquare")
  public var leftSquareBracket: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndElements")
  public var unexpectedBetweenLeftSquareBracketAndElements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenElementsAndRightSquare")
  public var unexpectedBetweenElementsAndRightSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "rightSquare")
  public var rightSquareBracket: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterRightSquare")
  public var unexpectedAfterRightSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ArrayExprSyntax(leadingTrivia:_:leftSquare:_:elements:_:rightSquare:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquareBracket: SwiftSyntax.TokenSyntax = .leftSquareToken(), _ unexpectedBetweenLeftSquareBracketAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, elements: SwiftSyntax.ArrayElementListSyntax, _ unexpectedBetweenElementsAndRightSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquareBracket: SwiftSyntax.TokenSyntax = .rightSquareToken(), _ unexpectedAfterRightSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ArrayTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftSquare")
  public var unexpectedBeforeLeftSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "leftSquare")
  public var leftSquareBracket: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndElement")
  public var unexpectedBetweenLeftSquareBracketAndElementType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "element")
  public var elementType: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenElementAndRightSquare")
  public var unexpectedBetweenElementTypeAndRightSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "rightSquare")
  public var rightSquareBracket: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterRightSquare")
  public var unexpectedAfterRightSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ArrayTypeSyntax(leadingTrivia:_:leftSquare:_:element:_:rightSquare:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquareBracket: SwiftSyntax.TokenSyntax = .leftSquareToken(), _ unexpectedBetweenLeftSquareBracketAndElementType: SwiftSyntax.UnexpectedNodesSyntax? = nil, elementType: some TypeSyntaxProtocol, _ unexpectedBetweenElementTypeAndRightSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquareBracket: SwiftSyntax.TokenSyntax = .rightSquareToken(), _ unexpectedAfterRightSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ArrowExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenEffectSpecifiersAndArrow")
  public var unexpectedBetweenEffectSpecifiersAndArrowToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "arrow")
  public var arrowToken: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterArrow")
  public var unexpectedAfterArrowToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ArrowExprSyntax(leadingTrivia:_:effectSpecifiers:_:arrow:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, effectSpecifiers: SwiftSyntax.TypeEffectSpecifiersSyntax? = nil, _ unexpectedBetweenEffectSpecifiersAndArrowToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, arrowToken: SwiftSyntax.TokenSyntax = .arrowToken(), _ unexpectedAfterArrowToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.AsExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenExpressionAndAsKeyword")
  public var unexpectedBetweenExpressionAndAsTok: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "asKeyword")
  public var asTok: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenAsKeywordAndQuestionOrExclamationMark")
  public var unexpectedBetweenAsTokAndQuestionOrExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenQuestionOrExclamationMarkAndType")
  public var unexpectedBetweenQuestionOrExclamationMarkAndTypeName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "type")
  public var typeName: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterType")
  public var unexpectedAfterTypeName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "AsExprSyntax(leadingTrivia:_:expression:_:asKeyword:_:questionOrExclamationMark:_:type:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedBetweenExpressionAndAsTok: SwiftSyntax.UnexpectedNodesSyntax? = nil, asTok: SwiftSyntax.TokenSyntax = .keyword(.as), _ unexpectedBetweenAsTokAndQuestionOrExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, questionOrExclamationMark: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenQuestionOrExclamationMarkAndTypeName: SwiftSyntax.UnexpectedNodesSyntax? = nil, typeName: some TypeSyntaxProtocol, _ unexpectedAfterTypeName: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.AssignmentExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeEqual")
  public var unexpectedBeforeAssignToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "equal")
  public var assignToken: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterEqual")
  public var unexpectedAfterAssignToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "AssignmentExprSyntax(leadingTrivia:_:equal:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAssignToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, assignToken: SwiftSyntax.TokenSyntax = .equalToken(), _ unexpectedAfterAssignToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.AssociatedTypeDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenAssociatedtypeKeywordAndName")
  public var unexpectedBetweenAssociatedtypeKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "name")
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndInheritanceClause")
  public var unexpectedBetweenIdentifierAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "AssociatedTypeDeclSyntax(leadingTrivia:_:attributes:_:modifiers:_:associatedtypeKeyword:_:name:_:inheritanceClause:_:initializer:_:genericWhereClause:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndAssociatedtypeKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, associatedtypeKeyword: SwiftSyntax.TokenSyntax = .keyword(.associatedtype), _ unexpectedBetweenAssociatedtypeKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenIdentifierAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, _ unexpectedBetweenInheritanceClauseAndInitializer: SwiftSyntax.UnexpectedNodesSyntax? = nil, initializer: SwiftSyntax.TypeInitializerClauseSyntax? = nil, _ unexpectedBetweenInitializerAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedAfterGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.AttributeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAtSign")
  public var unexpectedBeforeAtSignToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "atSign")
  public var atSignToken: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenAtSignAndAttributeName")
  public var unexpectedBetweenAtSignTokenAndAttributeName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndArguments")
  public var unexpectedBetweenLeftParenAndArgument: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "arguments")
  public var argument: SwiftSyntax.AttributeSyntax.Arguments? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightParen")
  public var unexpectedBetweenArgumentAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "AttributeSyntax(leadingTrivia:_:atSign:_:attributeName:_:leftParen:_:arguments:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAtSignToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, atSignToken: SwiftSyntax.TokenSyntax = .atSignToken(), _ unexpectedBetweenAtSignTokenAndAttributeName: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributeName: some TypeSyntaxProtocol, _ unexpectedBetweenAttributeNameAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenLeftParenAndArgument: SwiftSyntax.UnexpectedNodesSyntax? = nil, argument: SwiftSyntax.AttributeSyntax.Arguments? = nil, _ unexpectedBetweenArgumentAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.AvailabilityArgumentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeArgument")
  public var unexpectedBeforeEntry: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "argument")
  public var entry: SwiftSyntax.AvailabilityArgumentSyntax.Argument {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentAndTrailingComma")
  public var unexpectedBetweenEntryAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "AvailabilityArgumentSyntax(leadingTrivia:_:argument:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeEntry: SwiftSyntax.UnexpectedNodesSyntax? = nil, entry: SwiftSyntax.AvailabilityArgumentSyntax.Argument, _ unexpectedBetweenEntryAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.AvailabilityConditionSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndAvailabilityArguments")
  public var unexpectedBetweenLeftParenAndAvailabilitySpec: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "availabilityArguments")
  public var availabilitySpec: SwiftSyntax.AvailabilityArgumentListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenAvailabilityArgumentsAndRightParen")
  public var unexpectedBetweenAvailabilitySpecAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "AvailabilityConditionSyntax(leadingTrivia:_:availabilityKeyword:_:leftParen:_:availabilityArguments:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAvailabilityKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, availabilityKeyword: SwiftSyntax.TokenSyntax, _ unexpectedBetweenAvailabilityKeywordAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndAvailabilitySpec: SwiftSyntax.UnexpectedNodesSyntax? = nil, availabilitySpec: SwiftSyntax.AvailabilityArgumentListSyntax, _ unexpectedBetweenAvailabilitySpecAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.BackDeployedAttributeArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndPlatforms")
  public var unexpectedBetweenColonAndVersionList: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "platforms")
  public var versionList: SwiftSyntax.PlatformVersionItemListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "addPlatform")
  public func addAvailability(_ element: SwiftSyntax.PlatformVersionItemSyntax) -> SwiftSyntax.BackDeployedAttributeArgumentsSyntax
  @available(*, deprecated, renamed: "unexpectedAfterPlatforms")
  public var unexpectedAfterVersionList: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "BackDeployedAttributeArgumentsSyntax(leadingTrivia:_:beforeLabel:_:colon:_:platforms:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, beforeLabel: SwiftSyntax.TokenSyntax = .keyword(.before), _ unexpectedBetweenBeforeLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndVersionList: SwiftSyntax.UnexpectedNodesSyntax? = nil, versionList: SwiftSyntax.PlatformVersionItemListSyntax, _ unexpectedAfterVersionList: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.BinaryOperatorExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeOperator")
  public var unexpectedBeforeOperatorToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "operator")
  public var operatorToken: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterOperator")
  public var unexpectedAfterOperatorToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "BinaryOperatorExprSyntax(leadingTrivia:_:operator:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeOperatorToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, operatorToken: SwiftSyntax.TokenSyntax, _ unexpectedAfterOperatorToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.BooleanLiteralExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLiteral")
  public var unexpectedBeforeBooleanLiteral: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "literal")
  public var booleanLiteral: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterLiteral")
  public var unexpectedAfterBooleanLiteral: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "BooleanLiteralExprSyntax(leadingTrivia:_:literal:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBooleanLiteral: SwiftSyntax.UnexpectedNodesSyntax? = nil, booleanLiteral: SwiftSyntax.TokenSyntax, _ unexpectedAfterBooleanLiteral: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.CanImportVersionInfoSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndVersion")
  public var unexpectedBetweenColonAndVersionTuple: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "version")
  public var versionTuple: SwiftSyntax.VersionTupleSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterVersion")
  public var unexpectedAfterVersionTuple: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "CanImportVersionInfoSyntax(leadingTrivia:_:comma:_:label:_:colon:_:version:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, comma: SwiftSyntax.TokenSyntax = .commaToken(), _ unexpectedBetweenCommaAndLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.TokenSyntax, _ unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndVersionTuple: SwiftSyntax.UnexpectedNodesSyntax? = nil, versionTuple: SwiftSyntax.VersionTupleSyntax, _ unexpectedAfterVersionTuple: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ClassDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenClassKeywordAndName")
  public var unexpectedBetweenClassKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "name")
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ClassDeclSyntax(leadingTrivia:_:attributes:_:modifiers:_:classKeyword:_:name:_:genericParameterClause:_:inheritanceClause:_:genericWhereClause:_:memberBlock:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndClassKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, classKeyword: SwiftSyntax.TokenSyntax = .keyword(.class), _ unexpectedBetweenClassKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, _ unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, memberBlock: SwiftSyntax.MemberBlockSyntax, _ unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ClosureCaptureSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndEqual")
  public var unexpectedBetweenNameAndAssignToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "equal")
  public var assignToken: SwiftSyntax.TokenSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenEqualAndExpression")
  public var unexpectedBetweenAssignTokenAndExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ClosureCaptureSyntax(leadingTrivia:_:specifier:_:name:_:equal:_:expression:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, specifier: SwiftSyntax.ClosureCaptureSpecifierSyntax? = nil, _ unexpectedBetweenSpecifierAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenNameAndAssignToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, assignToken: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenAssignTokenAndExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedBetweenExpressionAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ClosureParameterClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndParameters")
  public var unexpectedBetweenLeftParenAndParameterList: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "parameters")
  public var parameterList: SwiftSyntax.ClosureParameterListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndRightParen")
  public var unexpectedBetweenParameterListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ClosureParameterClauseSyntax(leadingTrivia:_:leftParen:_:parameters:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndParameterList: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameterList: SwiftSyntax.ClosureParameterListSyntax, _ unexpectedBetweenParameterListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ClosureSignatureSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenCaptureAndParameterClause")
  public var unexpectedBetweenCaptureAndInput: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "parameterClause")
  public var input: SwiftSyntax.ClosureSignatureSyntax.ParameterClause? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenParameterClauseAndEffectSpecifiers")
  public var unexpectedBetweenInputAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenEffectSpecifiersAndReturnClause")
  public var unexpectedBetweenEffectSpecifiersAndOutput: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "returnClause")
  public var output: SwiftSyntax.ReturnClauseSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenReturnClauseAndInKeyword")
  public var unexpectedBetweenOutputAndInTok: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "inKeyword")
  public var inTok: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterInKeyword")
  public var unexpectedAfterInTok: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ClosureSignatureSyntax(leadingTrivia:_:attributes:_:capture:_:parameterClause:_:effectSpecifiers:_:returnClause:_:inKeyword:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndCapture: SwiftSyntax.UnexpectedNodesSyntax? = nil, capture: SwiftSyntax.ClosureCaptureClauseSyntax? = nil, _ unexpectedBetweenCaptureAndInput: SwiftSyntax.UnexpectedNodesSyntax? = nil, input: SwiftSyntax.ClosureSignatureSyntax.ParameterClause? = nil, _ unexpectedBetweenInputAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, effectSpecifiers: SwiftSyntax.TypeEffectSpecifiersSyntax? = nil, _ unexpectedBetweenEffectSpecifiersAndOutput: SwiftSyntax.UnexpectedNodesSyntax? = nil, output: SwiftSyntax.ReturnClauseSyntax? = nil, _ unexpectedBetweenOutputAndInTok: SwiftSyntax.UnexpectedNodesSyntax? = nil, inTok: SwiftSyntax.TokenSyntax = .keyword(.in), _ unexpectedAfterInTok: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ConformanceRequirementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftType")
  public var unexpectedBeforeLeftTypeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "leftType")
  public var leftTypeIdentifier: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLeftTypeAndColon")
  public var unexpectedBetweenLeftTypeIdentifierAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndRightType")
  public var unexpectedBetweenColonAndRightTypeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "rightType")
  public var rightTypeIdentifier: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterRightType")
  public var unexpectedAfterRightTypeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ConformanceRequirementSyntax(leadingTrivia:_:leftType:_:colon:_:rightType:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftTypeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftTypeIdentifier: some TypeSyntaxProtocol, _ unexpectedBetweenLeftTypeIdentifierAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndRightTypeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightTypeIdentifier: some TypeSyntaxProtocol, _ unexpectedAfterRightTypeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ConsumeExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeConsumeKeyword")
  public var unexpectedBeforeMoveKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "consumeKeyword")
  public var moveKeyword: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenConsumeKeywordAndExpression")
  public var unexpectedBetweenMoveKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ConsumeExprSyntax(leadingTrivia:_:consumeKeyword:_:expression:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeMoveKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, moveKeyword: SwiftSyntax.TokenSyntax, _ unexpectedBetweenMoveKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.DeclReferenceExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeBaseName")
  public var unexpectedBeforeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "baseName")
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenBaseNameAndArgumentNames")
  public var unexpectedBetweenIdentifierAndDeclNameArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "argumentNames")
  public var declNameArguments: SwiftSyntax.DeclNameArgumentsSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterArgumentNames")
  public var unexpectedAfterDeclNameArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "DeclReferenceExprSyntax(leadingTrivia:_:baseName:_:argumentNames:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenIdentifierAndDeclNameArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, declNameArguments: SwiftSyntax.DeclNameArgumentsSyntax? = nil, _ unexpectedAfterDeclNameArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.DerivativeAttributeArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenPeriodAndAccessorSpecifier")
  public var unexpectedBetweenPeriodAndAccessorKind: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "accessorSpecifier")
  public var accessorKind: SwiftSyntax.TokenSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenAccessorSpecifierAndComma")
  public var unexpectedBetweenAccessorKindAndComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenCommaAndArguments")
  public var unexpectedBetweenCommaAndDiffParams: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "arguments")
  public var diffParams: SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterArguments")
  public var unexpectedAfterDiffParams: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "DerivativeAttributeArgumentsSyntax(leadingTrivia:_:ofLabel:_:colon:_:originalDeclName:_:period:_:accessorSpecifier:_:comma:_:arguments:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeOfLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, ofLabel: SwiftSyntax.TokenSyntax = .keyword(.of), _ unexpectedBetweenOfLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndOriginalDeclName: SwiftSyntax.UnexpectedNodesSyntax? = nil, originalDeclName: some ExprSyntaxProtocol, _ unexpectedBetweenOriginalDeclNameAndPeriod: SwiftSyntax.UnexpectedNodesSyntax? = nil, period: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenPeriodAndAccessorKind: SwiftSyntax.UnexpectedNodesSyntax? = nil, accessorKind: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenAccessorKindAndComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, comma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenCommaAndDiffParams: SwiftSyntax.UnexpectedNodesSyntax? = nil, diffParams: SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax? = nil, _ unexpectedAfterDiffParams: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.DictionaryElementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeKey")
  public var unexpectedBeforeKeyExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "key")
  public var keyExpression: SwiftSyntax.ExprSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenKeyAndColon")
  public var unexpectedBetweenKeyExpressionAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndValue")
  public var unexpectedBetweenColonAndValueExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "value")
  public var valueExpression: SwiftSyntax.ExprSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenValueAndTrailingComma")
  public var unexpectedBetweenValueExpressionAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "DictionaryElementSyntax(leadingTrivia:_:key:_:colon:_:value:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeKeyExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, keyExpression: some ExprSyntaxProtocol, _ unexpectedBetweenKeyExpressionAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndValueExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, valueExpression: some ExprSyntaxProtocol, _ unexpectedBetweenValueExpressionAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.DictionaryTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftSquare")
  public var unexpectedBeforeLeftSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "leftSquare")
  public var leftSquareBracket: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndKey")
  public var unexpectedBetweenLeftSquareBracketAndKeyType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "key")
  public var keyType: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenKeyAndColon")
  public var unexpectedBetweenKeyTypeAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndValue")
  public var unexpectedBetweenColonAndValueType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "value")
  public var valueType: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenValueAndRightSquare")
  public var unexpectedBetweenValueTypeAndRightSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "rightSquare")
  public var rightSquareBracket: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterRightSquare")
  public var unexpectedAfterRightSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "DictionaryTypeSyntax(leadingTrivia:_:leftSquare:_:key:_:colon:_:value:_:rightSquare:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquareBracket: SwiftSyntax.TokenSyntax = .leftSquareToken(), _ unexpectedBetweenLeftSquareBracketAndKeyType: SwiftSyntax.UnexpectedNodesSyntax? = nil, keyType: some TypeSyntaxProtocol, _ unexpectedBetweenKeyTypeAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndValueType: SwiftSyntax.UnexpectedNodesSyntax? = nil, valueType: some TypeSyntaxProtocol, _ unexpectedBetweenValueTypeAndRightSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquareBracket: SwiftSyntax.TokenSyntax = .rightSquareToken(), _ unexpectedAfterRightSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.DifferentiabilityArgumentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeArgument")
  public var unexpectedBeforeParameter: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "argument")
  public var parameter: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentAndTrailingComma")
  public var unexpectedBetweenParameterAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "DifferentiabilityArgumentSyntax(leadingTrivia:_:argument:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeParameter: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameter: SwiftSyntax.TokenSyntax, _ unexpectedBetweenParameterAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.DifferentiabilityArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndArguments")
  public var unexpectedBetweenLeftParenAndDifferentiabilityParameters: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "arguments")
  public var differentiabilityParameters: SwiftSyntax.DifferentiabilityArgumentListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightParen")
  public var unexpectedBetweenDifferentiabilityParametersAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "DifferentiabilityArgumentsSyntax(leadingTrivia:_:leftParen:_:arguments:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndDifferentiabilityParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, differentiabilityParameters: SwiftSyntax.DifferentiabilityArgumentListSyntax, _ unexpectedBetweenDifferentiabilityParametersAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndArguments")
  public var unexpectedBetweenColonAndParameters: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "arguments")
  public var parameters: SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax.Arguments {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterArguments")
  public var unexpectedAfterParameters: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "DifferentiabilityWithRespectToArgumentSyntax(leadingTrivia:_:wrtLabel:_:colon:_:arguments:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeWrtLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, wrtLabel: SwiftSyntax.TokenSyntax = .keyword(.wrt), _ unexpectedBetweenWrtLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameters: SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax.Arguments, _ unexpectedAfterParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.DifferentiableAttributeArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeKindSpecifier")
  public var unexpectedBeforeDiffKind: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "kindSpecifier")
  public var diffKind: SwiftSyntax.TokenSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenKindSpecifierAndKindSpecifierComma")
  public var unexpectedBetweenDiffKindAndDiffKindComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "kindSpecifierComma")
  public var diffKindComma: SwiftSyntax.TokenSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenKindSpecifierCommaAndArguments")
  public var unexpectedBetweenDiffKindCommaAndDiffParams: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "arguments")
  public var diffParams: SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndArgumentsComma")
  public var unexpectedBetweenDiffParamsAndDiffParamsComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "argumentsComma")
  public var diffParamsComma: SwiftSyntax.TokenSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsCommaAndGenericWhereClause")
  public var unexpectedBetweenDiffParamsCommaAndWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "genericWhereClause")
  public var whereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterGenericWhereClause")
  public var unexpectedAfterWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "DifferentiableAttributeArgumentsSyntax(leadingTrivia:_:kindSpecifier:_:kindSpecifierComma:_:arguments:_:argumentsComma:_:genericWhereClause:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeDiffKind: SwiftSyntax.UnexpectedNodesSyntax? = nil, diffKind: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenDiffKindAndDiffKindComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, diffKindComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenDiffKindCommaAndDiffParams: SwiftSyntax.UnexpectedNodesSyntax? = nil, diffParams: SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax? = nil, _ unexpectedBetweenDiffParamsAndDiffParamsComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, diffParamsComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenDiffParamsCommaAndWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, whereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedAfterWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.DynamicReplacementAttributeArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndDeclName")
  public var unexpectedBetweenColonAndDeclname: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "declName")
  public var declname: SwiftSyntax.DeclReferenceExprSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterDeclName")
  public var unexpectedAfterDeclname: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "DynamicReplacementAttributeArgumentsSyntax(leadingTrivia:_:forLabel:_:colon:_:declName:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeForLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, forLabel: SwiftSyntax.TokenSyntax = .keyword(.for), _ unexpectedBetweenForLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndDeclname: SwiftSyntax.UnexpectedNodesSyntax? = nil, declname: SwiftSyntax.DeclReferenceExprSyntax, _ unexpectedAfterDeclname: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.EditorPlaceholderDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifiersAndPlaceholder")
  public var unexpectedBetweenModifiersAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "placeholder")
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterPlaceholder")
  public var unexpectedAfterIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "EditorPlaceholderDeclSyntax(leadingTrivia:_:attributes:_:modifiers:_:placeholder:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, _ unexpectedAfterIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.EditorPlaceholderExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforePlaceholder")
  public var unexpectedBeforeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "placeholder")
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterPlaceholder")
  public var unexpectedAfterIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "EditorPlaceholderExprSyntax(leadingTrivia:_:placeholder:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, _ unexpectedAfterIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.EnumCaseElementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeName")
  public var unexpectedBeforeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "name")
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndParameterClause")
  public var unexpectedBetweenIdentifierAndAssociatedValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "parameterClause")
  public var associatedValue: SwiftSyntax.EnumCaseParameterClauseSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenParameterClauseAndRawValue")
  public var unexpectedBetweenAssociatedValueAndRawValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "EnumCaseElementSyntax(leadingTrivia:_:name:_:parameterClause:_:rawValue:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenIdentifierAndAssociatedValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, associatedValue: SwiftSyntax.EnumCaseParameterClauseSyntax? = nil, _ unexpectedBetweenAssociatedValueAndRawValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, rawValue: SwiftSyntax.InitializerClauseSyntax? = nil, _ unexpectedBetweenRawValueAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.EnumCaseParameterClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndParameters")
  public var unexpectedBetweenLeftParenAndParameterList: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "parameters")
  public var parameterList: SwiftSyntax.EnumCaseParameterListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndRightParen")
  public var unexpectedBetweenParameterListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "EnumCaseParameterClauseSyntax(leadingTrivia:_:leftParen:_:parameters:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndParameterList: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameterList: SwiftSyntax.EnumCaseParameterListSyntax, _ unexpectedBetweenParameterListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.EnumCaseParameterSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenTypeAndDefaultValue")
  public var unexpectedBetweenTypeAndDefaultArgument: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "defaultValue")
  public var defaultArgument: SwiftSyntax.InitializerClauseSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenDefaultValueAndTrailingComma")
  public var unexpectedBetweenDefaultArgumentAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "EnumCaseParameterSyntax(leadingTrivia:_:modifiers:_:firstName:_:secondName:_:colon:_:type:_:defaultValue:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndFirstName: SwiftSyntax.UnexpectedNodesSyntax? = nil, firstName: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenFirstNameAndSecondName: SwiftSyntax.UnexpectedNodesSyntax? = nil, secondName: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenSecondNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenColonAndType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedBetweenTypeAndDefaultArgument: SwiftSyntax.UnexpectedNodesSyntax? = nil, defaultArgument: SwiftSyntax.InitializerClauseSyntax? = nil, _ unexpectedBetweenDefaultArgumentAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.EnumDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenEnumKeywordAndName")
  public var unexpectedBetweenEnumKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "name")
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenIdentifierAndGenericParameters: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "genericParameterClause")
  public var genericParameters: SwiftSyntax.GenericParameterClauseSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenGenericParameterClauseAndInheritanceClause")
  public var unexpectedBetweenGenericParametersAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "EnumDeclSyntax(leadingTrivia:_:attributes:_:modifiers:_:enumKeyword:_:name:_:genericParameterClause:_:inheritanceClause:_:genericWhereClause:_:memberBlock:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndEnumKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, enumKeyword: SwiftSyntax.TokenSyntax = .keyword(.enum), _ unexpectedBetweenEnumKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenIdentifierAndGenericParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameters: SwiftSyntax.GenericParameterClauseSyntax? = nil, _ unexpectedBetweenGenericParametersAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, memberBlock: SwiftSyntax.MemberBlockSyntax, _ unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ExpressionSegmentSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenBackslashAndPounds")
  public var unexpectedBetweenBackslashAndDelimiter: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "pounds")
  public var delimiter: SwiftSyntax.TokenSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenPoundsAndLeftParen")
  public var unexpectedBetweenDelimiterAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ExpressionSegmentSyntax(leadingTrivia:_:backslash:_:pounds:_:leftParen:_:expressions:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBackslash: SwiftSyntax.UnexpectedNodesSyntax? = nil, backslash: SwiftSyntax.TokenSyntax = .backslashToken(), _ unexpectedBetweenBackslashAndDelimiter: SwiftSyntax.UnexpectedNodesSyntax? = nil, delimiter: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenDelimiterAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndExpressions: SwiftSyntax.UnexpectedNodesSyntax? = nil, expressions: SwiftSyntax.LabeledExprListSyntax, _ unexpectedBetweenExpressionsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.FloatLiteralExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLiteral")
  public var unexpectedBeforeFloatingDigits: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "literal")
  public var floatingDigits: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterLiteral")
  public var unexpectedAfterFloatingDigits: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "FloatLiteralExprSyntax(leadingTrivia:_:literal:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeFloatingDigits: SwiftSyntax.UnexpectedNodesSyntax? = nil, floatingDigits: SwiftSyntax.TokenSyntax, _ unexpectedAfterFloatingDigits: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ForStmtSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenInKeywordAndSequence")
  public var unexpectedBetweenInKeywordAndSequenceExpr: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "sequence")
  public var sequenceExpr: SwiftSyntax.ExprSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenSequenceAndWhereClause")
  public var unexpectedBetweenSequenceExprAndWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ForStmtSyntax(leadingTrivia:_:forKeyword:_:tryKeyword:_:awaitKeyword:_:caseKeyword:_:pattern:_:typeAnnotation:_:inKeyword:_:sequence:_:whereClause:_:body:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeForKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, forKeyword: SwiftSyntax.TokenSyntax = .keyword(.for), _ unexpectedBetweenForKeywordAndTryKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, tryKeyword: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenTryKeywordAndAwaitKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, awaitKeyword: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenAwaitKeywordAndCaseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, caseKeyword: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenCaseKeywordAndPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, pattern: some PatternSyntaxProtocol, _ unexpectedBetweenPatternAndTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? = nil, typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? = nil, _ unexpectedBetweenTypeAnnotationAndInKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, inKeyword: SwiftSyntax.TokenSyntax = .keyword(.in), _ unexpectedBetweenInKeywordAndSequenceExpr: SwiftSyntax.UnexpectedNodesSyntax? = nil, sequenceExpr: some ExprSyntaxProtocol, _ unexpectedBetweenSequenceExprAndWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, whereClause: SwiftSyntax.WhereClauseSyntax? = nil, _ unexpectedBetweenWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, body: SwiftSyntax.CodeBlockSyntax, _ unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.FunctionCallExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndArguments")
  public var unexpectedBetweenLeftParenAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "arguments")
  public var argumentList: SwiftSyntax.LabeledExprListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightParen")
  public var unexpectedBetweenArgumentListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "FunctionCallExprSyntax(leadingTrivia:_:calledExpression:_:leftParen:_:arguments:_:rightParen:_:trailingClosure:_:additionalTrailingClosures:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeCalledExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, calledExpression: some ExprSyntaxProtocol, _ unexpectedBetweenCalledExpressionAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenLeftParenAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? = nil, argumentList: SwiftSyntax.LabeledExprListSyntax, _ unexpectedBetweenArgumentListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], _ unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.FunctionDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenFuncKeywordAndName")
  public var unexpectedBetweenFuncKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "name")
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "FunctionDeclSyntax(leadingTrivia:_:attributes:_:modifiers:_:funcKeyword:_:name:_:genericParameterClause:_:signature:_:genericWhereClause:_:body:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndFuncKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, funcKeyword: SwiftSyntax.TokenSyntax = .keyword(.func), _ unexpectedBetweenFuncKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, _ unexpectedBetweenGenericParameterClauseAndSignature: SwiftSyntax.UnexpectedNodesSyntax? = nil, signature: SwiftSyntax.FunctionSignatureSyntax, _ unexpectedBetweenSignatureAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, body: SwiftSyntax.CodeBlockSyntax? = nil, _ unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.FunctionParameterClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndParameters")
  public var unexpectedBetweenLeftParenAndParameterList: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "parameters")
  public var parameterList: SwiftSyntax.FunctionParameterListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndRightParen")
  public var unexpectedBetweenParameterListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "FunctionParameterClauseSyntax(leadingTrivia:_:leftParen:_:parameters:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndParameterList: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameterList: SwiftSyntax.FunctionParameterListSyntax, _ unexpectedBetweenParameterListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.FunctionParameterSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenEllipsisAndDefaultValue")
  public var unexpectedBetweenEllipsisAndDefaultArgument: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "defaultValue")
  public var defaultArgument: SwiftSyntax.InitializerClauseSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenDefaultValueAndTrailingComma")
  public var unexpectedBetweenDefaultArgumentAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "FunctionParameterSyntax(leadingTrivia:_:attributes:_:modifiers:_:firstName:_:secondName:_:colon:_:type:_:ellipsis:_:defaultValue:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndFirstName: SwiftSyntax.UnexpectedNodesSyntax? = nil, firstName: SwiftSyntax.TokenSyntax, _ unexpectedBetweenFirstNameAndSecondName: SwiftSyntax.UnexpectedNodesSyntax? = nil, secondName: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenSecondNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedBetweenTypeAndEllipsis: SwiftSyntax.UnexpectedNodesSyntax? = nil, ellipsis: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenEllipsisAndDefaultArgument: SwiftSyntax.UnexpectedNodesSyntax? = nil, defaultArgument: SwiftSyntax.InitializerClauseSyntax? = nil, _ unexpectedBetweenDefaultArgumentAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.FunctionSignatureSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeParameterClause")
  public var unexpectedBeforeInput: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "parameterClause")
  public var input: SwiftSyntax.FunctionParameterClauseSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenParameterClauseAndEffectSpecifiers")
  public var unexpectedBetweenInputAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenEffectSpecifiersAndReturnClause")
  public var unexpectedBetweenEffectSpecifiersAndOutput: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "returnClause")
  public var output: SwiftSyntax.ReturnClauseSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterReturnClause")
  public var unexpectedAfterOutput: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "FunctionSignatureSyntax(leadingTrivia:_:parameterClause:_:effectSpecifiers:_:returnClause:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeInput: SwiftSyntax.UnexpectedNodesSyntax? = nil, input: SwiftSyntax.FunctionParameterClauseSyntax, _ unexpectedBetweenInputAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, effectSpecifiers: SwiftSyntax.FunctionEffectSpecifiersSyntax? = nil, _ unexpectedBetweenEffectSpecifiersAndOutput: SwiftSyntax.UnexpectedNodesSyntax? = nil, output: SwiftSyntax.ReturnClauseSyntax? = nil, _ unexpectedAfterOutput: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.FunctionTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndParameters")
  public var unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "parameters")
  public var arguments: SwiftSyntax.TupleTypeElementListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "addParameter")
  public func addArgument(_ element: SwiftSyntax.TupleTypeElementSyntax) -> SwiftSyntax.FunctionTypeSyntax
  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndRightParen")
  public var unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenEffectSpecifiersAndReturnClause")
  public var unexpectedBetweenEffectSpecifiersAndOutput: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "returnClause")
  public var output: SwiftSyntax.ReturnClauseSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterReturnClause")
  public var unexpectedAfterOutput: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "FunctionTypeSyntax(leadingTrivia:_:leftParen:_:parameters:_:rightParen:_:effectSpecifiers:_:returnClause:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, arguments: SwiftSyntax.TupleTypeElementListSyntax, _ unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedBetweenRightParenAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, effectSpecifiers: SwiftSyntax.TypeEffectSpecifiersSyntax? = nil, _ unexpectedBetweenEffectSpecifiersAndOutput: SwiftSyntax.UnexpectedNodesSyntax? = nil, output: SwiftSyntax.ReturnClauseSyntax, _ unexpectedAfterOutput: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.GenericArgumentClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftAngle")
  public var unexpectedBeforeLeftAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "leftAngle")
  public var leftAngleBracket: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLeftAngleAndArguments")
  public var unexpectedBetweenLeftAngleBracketAndArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightAngle")
  public var unexpectedBetweenArgumentsAndRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "rightAngle")
  public var rightAngleBracket: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterRightAngle")
  public var unexpectedAfterRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "GenericArgumentClauseSyntax(leadingTrivia:_:leftAngle:_:arguments:_:rightAngle:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftAngleBracket: SwiftSyntax.TokenSyntax = .leftAngleToken(), _ unexpectedBetweenLeftAngleBracketAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, arguments: SwiftSyntax.GenericArgumentListSyntax, _ unexpectedBetweenArgumentsAndRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightAngleBracket: SwiftSyntax.TokenSyntax = .rightAngleToken(), _ unexpectedAfterRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.GenericArgumentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeArgument")
  public var unexpectedBeforeArgumentType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "argument")
  public var argumentType: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentAndTrailingComma")
  public var unexpectedBetweenArgumentTypeAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "GenericArgumentSyntax(leadingTrivia:_:argument:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeArgumentType: SwiftSyntax.UnexpectedNodesSyntax? = nil, argumentType: some TypeSyntaxProtocol, _ unexpectedBetweenArgumentTypeAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.GenericParameterClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftAngle")
  public var unexpectedBeforeLeftAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "leftAngle")
  public var leftAngleBracket: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLeftAngleAndParameters")
  public var unexpectedBetweenLeftAngleBracketAndGenericParameterList: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "parameters")
  public var genericParameterList: SwiftSyntax.GenericParameterListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "addParameter")
  public func addGenericParameter(_ element: SwiftSyntax.GenericParameterSyntax) -> SwiftSyntax.GenericParameterClauseSyntax
  @available(*, deprecated, renamed: "unexpectedBetweenParametersAndGenericWhereClause")
  public var unexpectedBetweenGenericParameterListAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenGenericWhereClauseAndRightAngle")
  public var unexpectedBetweenGenericWhereClauseAndRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "rightAngle")
  public var rightAngleBracket: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterRightAngle")
  public var unexpectedAfterRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "GenericParameterClauseSyntax(leadingTrivia:_:leftAngle:_:parameters:_:genericWhereClause:_:rightAngle:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftAngleBracket: SwiftSyntax.TokenSyntax = .leftAngleToken(), _ unexpectedBetweenLeftAngleBracketAndGenericParameterList: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterList: SwiftSyntax.GenericParameterListSyntax, _ unexpectedBetweenGenericParameterListAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightAngleBracket: SwiftSyntax.TokenSyntax = .rightAngleToken(), _ unexpectedAfterRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.GenericParameterSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenAttributesAndEachKeyword")
  public var unexpectedBetweenAttributesAndEach: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "eachKeyword")
  public var each: SwiftSyntax.TokenSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenEachKeywordAndName")
  public var unexpectedBetweenEachAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "GenericParameterSyntax(leadingTrivia:_:attributes:_:eachKeyword:_:name:_:colon:_:inheritedType:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndEach: SwiftSyntax.UnexpectedNodesSyntax? = nil, each: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenEachAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenColonAndInheritedType: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritedType: (some TypeSyntaxProtocol)? = TypeSyntax?.none, _ unexpectedBetweenInheritedTypeAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.GenericRequirementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeRequirement")
  public var unexpectedBeforeBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "requirement")
  public var body: SwiftSyntax.GenericRequirementSyntax.Requirement {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenRequirementAndTrailingComma")
  public var unexpectedBetweenBodyAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "GenericRequirementSyntax(leadingTrivia:_:requirement:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, body: SwiftSyntax.GenericRequirementSyntax.Requirement, _ unexpectedBetweenBodyAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.GenericWhereClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenWhereKeywordAndRequirements")
  public var unexpectedBetweenWhereKeywordAndRequirementList: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "requirements")
  public var requirementList: SwiftSyntax.GenericRequirementListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterRequirements")
  public var unexpectedAfterRequirementList: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "GenericWhereClauseSyntax(leadingTrivia:_:whereKeyword:_:requirements:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeWhereKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, whereKeyword: SwiftSyntax.TokenSyntax = .keyword(.where), _ unexpectedBetweenWhereKeywordAndRequirementList: SwiftSyntax.UnexpectedNodesSyntax? = nil, requirementList: SwiftSyntax.GenericRequirementListSyntax, _ unexpectedAfterRequirementList: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ImplementsAttributeArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenCommaAndDeclName")
  public var unexpectedBetweenCommaAndDeclname: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "declName")
  public var declname: SwiftSyntax.DeclReferenceExprSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterDeclName")
  public var unexpectedAfterDeclname: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ImplementsAttributeArgumentsSyntax(leadingTrivia:_:type:_:comma:_:declName:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedBetweenTypeAndComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, comma: SwiftSyntax.TokenSyntax = .commaToken(), _ unexpectedBetweenCommaAndDeclname: SwiftSyntax.UnexpectedNodesSyntax? = nil, declname: SwiftSyntax.DeclReferenceExprSyntax, _ unexpectedAfterDeclname: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ImportDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifiersAndImportKeyword")
  public var unexpectedBetweenModifiersAndImportTok: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "importKeyword")
  public var importTok: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenImportKeywordAndImportKindSpecifier")
  public var unexpectedBetweenImportTokAndImportKind: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "importKindSpecifier")
  public var importKind: SwiftSyntax.TokenSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenImportKindSpecifierAndPath")
  public var unexpectedBetweenImportKindAndPath: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ImportDeclSyntax(leadingTrivia:_:attributes:_:modifiers:_:importKeyword:_:importKindSpecifier:_:path:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndImportTok: SwiftSyntax.UnexpectedNodesSyntax? = nil, importTok: SwiftSyntax.TokenSyntax = .keyword(.import), _ unexpectedBetweenImportTokAndImportKind: SwiftSyntax.UnexpectedNodesSyntax? = nil, importKind: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenImportKindAndPath: SwiftSyntax.UnexpectedNodesSyntax? = nil, path: SwiftSyntax.ImportPathComponentListSyntax, _ unexpectedAfterPath: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ImportPathComponentSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndTrailingPeriod")
  public var unexpectedBetweenNameAndTrailingDot: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "trailingPeriod")
  public var trailingDot: SwiftSyntax.TokenSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterTrailingPeriod")
  public var unexpectedAfterTrailingDot: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ImportPathComponentSyntax(leadingTrivia:_:name:_:trailingPeriod:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndTrailingDot: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingDot: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingDot: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.InfixOperatorExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftOperandAndOperator")
  public var unexpectedBetweenLeftOperandAndOperatorOperand: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "operator")
  public var operatorOperand: SwiftSyntax.ExprSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenOperatorAndRightOperand")
  public var unexpectedBetweenOperatorOperandAndRightOperand: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "InfixOperatorExprSyntax(leadingTrivia:_:leftOperand:_:operator:_:rightOperand:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftOperand: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftOperand: some ExprSyntaxProtocol, _ unexpectedBetweenLeftOperandAndOperatorOperand: SwiftSyntax.UnexpectedNodesSyntax? = nil, operatorOperand: some ExprSyntaxProtocol, _ unexpectedBetweenOperatorOperandAndRightOperand: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightOperand: some ExprSyntaxProtocol, _ unexpectedAfterRightOperand: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.InheritanceClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndInheritedTypes")
  public var unexpectedBetweenColonAndInheritedTypeCollection: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "inheritedTypes")
  public var inheritedTypeCollection: SwiftSyntax.InheritedTypeListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterInheritedTypes")
  public var unexpectedAfterInheritedTypeCollection: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "InheritanceClauseSyntax(leadingTrivia:_:colon:_:inheritedTypes:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndInheritedTypeCollection: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritedTypeCollection: SwiftSyntax.InheritedTypeListSyntax, _ unexpectedAfterInheritedTypeCollection: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.InheritedTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeType")
  public var unexpectedBeforeTypeName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "type")
  public var typeName: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenTypeAndTrailingComma")
  public var unexpectedBetweenTypeNameAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "InheritedTypeSyntax(leadingTrivia:_:type:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeTypeName: SwiftSyntax.UnexpectedNodesSyntax? = nil, typeName: some TypeSyntaxProtocol, _ unexpectedBetweenTypeNameAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.IntegerLiteralExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLiteral")
  public var unexpectedBeforeDigits: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "literal")
  public var digits: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterLiteral")
  public var unexpectedAfterDigits: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "IntegerLiteralExprSyntax(leadingTrivia:_:literal:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeDigits: SwiftSyntax.UnexpectedNodesSyntax? = nil, digits: SwiftSyntax.TokenSyntax, _ unexpectedAfterDigits: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.IsExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenExpressionAndIsKeyword")
  public var unexpectedBetweenExpressionAndIsTok: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "isKeyword")
  public var isTok: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenIsKeywordAndType")
  public var unexpectedBetweenIsTokAndTypeName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "type")
  public var typeName: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterType")
  public var unexpectedAfterTypeName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "IsExprSyntax(leadingTrivia:_:expression:_:isKeyword:_:type:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedBetweenExpressionAndIsTok: SwiftSyntax.UnexpectedNodesSyntax? = nil, isTok: SwiftSyntax.TokenSyntax = .keyword(.is), _ unexpectedBetweenIsTokAndTypeName: SwiftSyntax.UnexpectedNodesSyntax? = nil, typeName: some TypeSyntaxProtocol, _ unexpectedAfterTypeName: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.KeyPathSubscriptComponentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftSquare")
  public var unexpectedBeforeLeftBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "leftSquare")
  public var leftBracket: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndArguments")
  public var unexpectedBetweenLeftBracketAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "arguments")
  public var argumentList: SwiftSyntax.LabeledExprListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightSquare")
  public var unexpectedBetweenArgumentListAndRightBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "rightSquare")
  public var rightBracket: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterRightSquare")
  public var unexpectedAfterRightBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "KeyPathSubscriptComponentSyntax(leadingTrivia:_:leftSquare:_:arguments:_:rightSquare:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBracket: SwiftSyntax.TokenSyntax = .leftSquareToken(), _ unexpectedBetweenLeftBracketAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? = nil, argumentList: SwiftSyntax.LabeledExprListSyntax, _ unexpectedBetweenArgumentListAndRightBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBracket: SwiftSyntax.TokenSyntax = .rightSquareToken(), _ unexpectedAfterRightBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.LabeledStmtSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLabel")
  public var unexpectedBeforeLabelName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "label")
  public var labelName: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLabelAndColon")
  public var unexpectedBetweenLabelNameAndLabelColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "colon")
  public var labelColon: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndStatement")
  public var unexpectedBetweenLabelColonAndStatement: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "LabeledStmtSyntax(leadingTrivia:_:label:_:colon:_:statement:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLabelName: SwiftSyntax.UnexpectedNodesSyntax? = nil, labelName: SwiftSyntax.TokenSyntax, _ unexpectedBetweenLabelNameAndLabelColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, labelColon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenLabelColonAndStatement: SwiftSyntax.UnexpectedNodesSyntax? = nil, statement: some StmtSyntaxProtocol, _ unexpectedAfterStatement: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.LayoutRequirementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeType")
  public var unexpectedBeforeTypeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "type")
  public var typeIdentifier: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenTypeAndColon")
  public var unexpectedBetweenTypeIdentifierAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndLayoutSpecifier")
  public var unexpectedBetweenColonAndLayoutConstraint: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "layoutSpecifier")
  public var layoutConstraint: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLayoutSpecifierAndLeftParen")
  public var unexpectedBetweenLayoutConstraintAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "LayoutRequirementSyntax(leadingTrivia:_:type:_:colon:_:layoutSpecifier:_:leftParen:_:size:_:comma:_:alignment:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeTypeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, typeIdentifier: some TypeSyntaxProtocol, _ unexpectedBetweenTypeIdentifierAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndLayoutConstraint: SwiftSyntax.UnexpectedNodesSyntax? = nil, layoutConstraint: SwiftSyntax.TokenSyntax, _ unexpectedBetweenLayoutConstraintAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenLeftParenAndSize: SwiftSyntax.UnexpectedNodesSyntax? = nil, size: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenSizeAndComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, comma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenCommaAndAlignment: SwiftSyntax.UnexpectedNodesSyntax? = nil, alignment: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenAlignmentAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.MacroDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenMacroKeywordAndName")
  public var unexpectedBetweenMacroKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "name")
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "MacroDeclSyntax(leadingTrivia:_:attributes:_:modifiers:_:macroKeyword:_:name:_:genericParameterClause:_:signature:_:definition:_:genericWhereClause:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndMacroKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, macroKeyword: SwiftSyntax.TokenSyntax = .keyword(.macro), _ unexpectedBetweenMacroKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, _ unexpectedBetweenGenericParameterClauseAndSignature: SwiftSyntax.UnexpectedNodesSyntax? = nil, signature: SwiftSyntax.FunctionSignatureSyntax, _ unexpectedBetweenSignatureAndDefinition: SwiftSyntax.UnexpectedNodesSyntax? = nil, definition: SwiftSyntax.InitializerClauseSyntax? = nil, _ unexpectedBetweenDefinitionAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedAfterGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.MacroExpansionDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifiersAndPound")
  public var unexpectedBetweenModifiersAndPoundToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "pound")
  public var poundToken: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenPoundAndMacroName")
  public var unexpectedBetweenPoundTokenAndMacro: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "macroName")
  public var macro: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenMacroNameAndGenericArgumentClause")
  public var unexpectedBetweenMacroAndGenericArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "genericArgumentClause")
  public var genericArguments: SwiftSyntax.GenericArgumentClauseSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenGenericArgumentClauseAndLeftParen")
  public var unexpectedBetweenGenericArgumentsAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndArguments")
  public var unexpectedBetweenLeftParenAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "arguments")
  public var argumentList: SwiftSyntax.LabeledExprListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightParen")
  public var unexpectedBetweenArgumentListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "MacroExpansionDeclSyntax(leadingTrivia:_:attributes:_:modifiers:_:pound:_:macroName:_:genericArgumentClause:_:leftParen:_:arguments:_:rightParen:_:trailingClosure:_:additionalTrailingClosures:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndPoundToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, poundToken: SwiftSyntax.TokenSyntax = .poundToken(), _ unexpectedBetweenPoundTokenAndMacro: SwiftSyntax.UnexpectedNodesSyntax? = nil, macro: SwiftSyntax.TokenSyntax, _ unexpectedBetweenMacroAndGenericArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericArguments: SwiftSyntax.GenericArgumentClauseSyntax? = nil, _ unexpectedBetweenGenericArgumentsAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenLeftParenAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? = nil, argumentList: SwiftSyntax.LabeledExprListSyntax, _ unexpectedBetweenArgumentListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], _ unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.MacroExpansionExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforePound")
  public var unexpectedBeforePoundToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "pound")
  public var poundToken: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenPoundAndMacroName")
  public var unexpectedBetweenPoundTokenAndMacro: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "macroName")
  public var macro: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenMacroNameAndGenericArgumentClause")
  public var unexpectedBetweenMacroAndGenericArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "genericArgumentClause")
  public var genericArguments: SwiftSyntax.GenericArgumentClauseSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenGenericArgumentClauseAndLeftParen")
  public var unexpectedBetweenGenericArgumentsAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndArguments")
  public var unexpectedBetweenLeftParenAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "arguments")
  public var argumentList: SwiftSyntax.LabeledExprListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightParen")
  public var unexpectedBetweenArgumentListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "MacroExpansionExprSyntax(leadingTrivia:_:pound:_:macroName:_:genericArgumentClause:_:leftParen:_:arguments:_:rightParen:_:trailingClosure:_:additionalTrailingClosures:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePoundToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, poundToken: SwiftSyntax.TokenSyntax = .poundToken(), _ unexpectedBetweenPoundTokenAndMacro: SwiftSyntax.UnexpectedNodesSyntax? = nil, macro: SwiftSyntax.TokenSyntax, _ unexpectedBetweenMacroAndGenericArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericArguments: SwiftSyntax.GenericArgumentClauseSyntax? = nil, _ unexpectedBetweenGenericArgumentsAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenLeftParenAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? = nil, argumentList: SwiftSyntax.LabeledExprListSyntax, _ unexpectedBetweenArgumentListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], _ unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.MemberAccessExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenBaseAndPeriod")
  public var unexpectedBetweenBaseAndDot: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "period")
  public var dot: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenPeriodAndDeclName")
  public var unexpectedBetweenDotAndDeclName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "MemberAccessExprSyntax(leadingTrivia:_:base:_:period:_:declName:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBase: SwiftSyntax.UnexpectedNodesSyntax? = nil, base: (some ExprSyntaxProtocol)? = ExprSyntax?.none, _ unexpectedBetweenBaseAndDot: SwiftSyntax.UnexpectedNodesSyntax? = nil, dot: SwiftSyntax.TokenSyntax = .periodToken(), _ unexpectedBetweenDotAndDeclName: SwiftSyntax.UnexpectedNodesSyntax? = nil, declName: SwiftSyntax.DeclReferenceExprSyntax, _ unexpectedAfterDeclName: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.MetatypeTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenPeriodAndMetatypeSpecifier")
  public var unexpectedBetweenPeriodAndTypeOrProtocol: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "metatypeSpecifier")
  public var typeOrProtocol: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterMetatypeSpecifier")
  public var unexpectedAfterTypeOrProtocol: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "MetatypeTypeSyntax(leadingTrivia:_:baseType:_:period:_:metatypeSpecifier:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBaseType: SwiftSyntax.UnexpectedNodesSyntax? = nil, baseType: some TypeSyntaxProtocol, _ unexpectedBetweenBaseTypeAndPeriod: SwiftSyntax.UnexpectedNodesSyntax? = nil, period: SwiftSyntax.TokenSyntax = .periodToken(), _ unexpectedBetweenPeriodAndTypeOrProtocol: SwiftSyntax.UnexpectedNodesSyntax? = nil, typeOrProtocol: SwiftSyntax.TokenSyntax, _ unexpectedAfterTypeOrProtocol: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.NamedOpaqueReturnTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeGenericParameterClause")
  public var unexpectedBeforeGenericParameters: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "genericParameterClause")
  public var genericParameters: SwiftSyntax.GenericParameterClauseSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenGenericParameterClauseAndType")
  public var unexpectedBetweenGenericParametersAndBaseType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "type")
  public var baseType: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterType")
  public var unexpectedAfterBaseType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "NamedOpaqueReturnTypeSyntax(leadingTrivia:_:genericParameterClause:_:type:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeGenericParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameters: SwiftSyntax.GenericParameterClauseSyntax, _ unexpectedBetweenGenericParametersAndBaseType: SwiftSyntax.UnexpectedNodesSyntax? = nil, baseType: some TypeSyntaxProtocol, _ unexpectedAfterBaseType: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.OperatorDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeFixitySpecifier")
  public var unexpectedBeforeFixity: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "fixitySpecifier")
  public var fixity: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenFixitySpecifierAndOperatorKeyword")
  public var unexpectedBetweenFixityAndOperatorKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenOperatorKeywordAndName")
  public var unexpectedBetweenOperatorKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "name")
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndOperatorPrecedenceAndTypes")
  public var unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "OperatorDeclSyntax(leadingTrivia:_:fixitySpecifier:_:operatorKeyword:_:name:_:operatorPrecedenceAndTypes:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeFixity: SwiftSyntax.UnexpectedNodesSyntax? = nil, fixity: SwiftSyntax.TokenSyntax, _ unexpectedBetweenFixityAndOperatorKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, operatorKeyword: SwiftSyntax.TokenSyntax = .keyword(.operator), _ unexpectedBetweenOperatorKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenIdentifierAndOperatorPrecedenceAndTypes: SwiftSyntax.UnexpectedNodesSyntax? = nil, operatorPrecedenceAndTypes: SwiftSyntax.OperatorPrecedenceAndTypesSyntax? = nil, _ unexpectedAfterOperatorPrecedenceAndTypes: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.OptionalBindingConditionSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeBindingSpecifier")
  public var unexpectedBeforeBindingKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "bindingSpecifier")
  public var bindingKeyword: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenBindingSpecifierAndPattern")
  public var unexpectedBetweenBindingKeywordAndPattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "OptionalBindingConditionSyntax(leadingTrivia:_:bindingSpecifier:_:pattern:_:typeAnnotation:_:initializer:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBindingKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, bindingKeyword: SwiftSyntax.TokenSyntax, _ unexpectedBetweenBindingKeywordAndPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, pattern: some PatternSyntaxProtocol, _ unexpectedBetweenPatternAndTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? = nil, typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? = nil, _ unexpectedBetweenTypeAnnotationAndInitializer: SwiftSyntax.UnexpectedNodesSyntax? = nil, initializer: SwiftSyntax.InitializerClauseSyntax? = nil, _ unexpectedAfterInitializer: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.PackElementExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenEachKeywordAndPack")
  public var unexpectedBetweenEachKeywordAndPackRefExpr: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "pack")
  public var packRefExpr: SwiftSyntax.ExprSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterPack")
  public var unexpectedAfterPackRefExpr: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "PackElementExprSyntax(leadingTrivia:_:eachKeyword:_:pack:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeEachKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, eachKeyword: SwiftSyntax.TokenSyntax = .keyword(.each), _ unexpectedBetweenEachKeywordAndPackRefExpr: SwiftSyntax.UnexpectedNodesSyntax? = nil, packRefExpr: some ExprSyntaxProtocol, _ unexpectedAfterPackRefExpr: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.PackElementTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenEachKeywordAndPack")
  public var unexpectedBetweenEachKeywordAndPackType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "pack")
  public var packType: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterPack")
  public var unexpectedAfterPackType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "PackElementTypeSyntax(leadingTrivia:_:eachKeyword:_:pack:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeEachKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, eachKeyword: SwiftSyntax.TokenSyntax = .keyword(.each), _ unexpectedBetweenEachKeywordAndPackType: SwiftSyntax.UnexpectedNodesSyntax? = nil, packType: some TypeSyntaxProtocol, _ unexpectedAfterPackType: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.PackExpansionExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenRepeatKeywordAndRepetitionPattern")
  public var unexpectedBetweenRepeatKeywordAndPatternExpr: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "repetitionPattern")
  public var patternExpr: SwiftSyntax.ExprSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterRepetitionPattern")
  public var unexpectedAfterPatternExpr: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "PackExpansionExprSyntax(leadingTrivia:_:repeatKeyword:_:repetitionPattern:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeRepeatKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, repeatKeyword: SwiftSyntax.TokenSyntax = .keyword(.repeat), _ unexpectedBetweenRepeatKeywordAndPatternExpr: SwiftSyntax.UnexpectedNodesSyntax? = nil, patternExpr: some ExprSyntaxProtocol, _ unexpectedAfterPatternExpr: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.PackExpansionTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenRepeatKeywordAndRepetitionPattern")
  public var unexpectedBetweenRepeatKeywordAndPatternType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "repetitionPattern")
  public var patternType: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterRepetitionPattern")
  public var unexpectedAfterPatternType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "PackExpansionTypeSyntax(leadingTrivia:_:repeatKeyword:_:repetitionPattern:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeRepeatKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, repeatKeyword: SwiftSyntax.TokenSyntax = .keyword(.repeat), _ unexpectedBetweenRepeatKeywordAndPatternType: SwiftSyntax.UnexpectedNodesSyntax? = nil, patternType: some TypeSyntaxProtocol, _ unexpectedAfterPatternType: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.PatternBindingSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenInitializerAndAccessorBlock")
  public var unexpectedBetweenInitializerAndAccessor: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "accessorBlock")
  public var accessor: SwiftSyntax.AccessorBlockSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenAccessorBlockAndTrailingComma")
  public var unexpectedBetweenAccessorAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "PatternBindingSyntax(leadingTrivia:_:pattern:_:typeAnnotation:_:initializer:_:accessorBlock:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, pattern: some PatternSyntaxProtocol, _ unexpectedBetweenPatternAndTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? = nil, typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? = nil, _ unexpectedBetweenTypeAnnotationAndInitializer: SwiftSyntax.UnexpectedNodesSyntax? = nil, initializer: SwiftSyntax.InitializerClauseSyntax? = nil, _ unexpectedBetweenInitializerAndAccessor: SwiftSyntax.UnexpectedNodesSyntax? = nil, accessor: SwiftSyntax.AccessorBlockSyntax? = nil, _ unexpectedBetweenAccessorAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.PlatformVersionItemSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforePlatformVersion")
  public var unexpectedBeforeAvailabilityVersionRestriction: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "platformVersion")
  public var availabilityVersionRestriction: SwiftSyntax.PlatformVersionSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenPlatformVersionAndTrailingComma")
  public var unexpectedBetweenAvailabilityVersionRestrictionAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "PlatformVersionItemSyntax(leadingTrivia:_:platformVersion:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAvailabilityVersionRestriction: SwiftSyntax.UnexpectedNodesSyntax? = nil, availabilityVersionRestriction: SwiftSyntax.PlatformVersionSyntax, _ unexpectedBetweenAvailabilityVersionRestrictionAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.PostfixOperatorExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenExpressionAndOperator")
  public var unexpectedBetweenExpressionAndOperatorToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "operator")
  public var operatorToken: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterOperator")
  public var unexpectedAfterOperatorToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "PostfixOperatorExprSyntax(leadingTrivia:_:expression:_:operator:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedBetweenExpressionAndOperatorToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, operatorToken: SwiftSyntax.TokenSyntax, _ unexpectedAfterOperatorToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.PoundSourceLocationArgumentsSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeFileLabel")
  public var unexpectedBeforeFileArgLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "fileLabel")
  public var fileArgLabel: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenFileLabelAndFileColon")
  public var unexpectedBetweenFileArgLabelAndFileArgColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "fileColon")
  public var fileArgColon: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenFileColonAndFileName")
  public var unexpectedBetweenFileArgColonAndFileName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenCommaAndLineLabel")
  public var unexpectedBetweenCommaAndLineArgLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "lineLabel")
  public var lineArgLabel: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLineLabelAndLineColon")
  public var unexpectedBetweenLineArgLabelAndLineArgColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "lineColon")
  public var lineArgColon: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLineColonAndLineNumber")
  public var unexpectedBetweenLineArgColonAndLineNumber: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "PoundSourceLocationArgumentsSyntax(leadingTrivia:_:fileLabel:_:fileColon:_:fileName:_:comma:_:lineLabel:_:lineColon:_:lineNumber:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeFileArgLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, fileArgLabel: SwiftSyntax.TokenSyntax = .keyword(.file), _ unexpectedBetweenFileArgLabelAndFileArgColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, fileArgColon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenFileArgColonAndFileName: SwiftSyntax.UnexpectedNodesSyntax? = nil, fileName: SwiftSyntax.SimpleStringLiteralExprSyntax, _ unexpectedBetweenFileNameAndComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, comma: SwiftSyntax.TokenSyntax = .commaToken(), _ unexpectedBetweenCommaAndLineArgLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, lineArgLabel: SwiftSyntax.TokenSyntax = .keyword(.line), _ unexpectedBetweenLineArgLabelAndLineArgColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, lineArgColon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenLineArgColonAndLineNumber: SwiftSyntax.UnexpectedNodesSyntax? = nil, lineNumber: SwiftSyntax.TokenSyntax, _ unexpectedAfterLineNumber: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.PoundSourceLocationSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndArguments")
  public var unexpectedBetweenLeftParenAndArgs: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "arguments")
  public var args: SwiftSyntax.PoundSourceLocationArgumentsSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightParen")
  public var unexpectedBetweenArgsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "PoundSourceLocationSyntax(leadingTrivia:_:poundSourceLocation:_:leftParen:_:arguments:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePoundSourceLocation: SwiftSyntax.UnexpectedNodesSyntax? = nil, poundSourceLocation: SwiftSyntax.TokenSyntax = .poundSourceLocationToken(), _ unexpectedBetweenPoundSourceLocationAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndArgs: SwiftSyntax.UnexpectedNodesSyntax? = nil, args: SwiftSyntax.PoundSourceLocationArgumentsSyntax? = nil, _ unexpectedBetweenArgsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.PrecedenceGroupAssignmentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAssignmentLabel")
  public var unexpectedBeforeAssignmentKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "assignmentLabel")
  public var assignmentKeyword: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenAssignmentLabelAndColon")
  public var unexpectedBetweenAssignmentKeywordAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndValue")
  public var unexpectedBetweenColonAndFlag: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "value")
  public var flag: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterValue")
  public var unexpectedAfterFlag: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "PrecedenceGroupAssignmentSyntax(leadingTrivia:_:assignmentLabel:_:colon:_:value:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAssignmentKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, assignmentKeyword: SwiftSyntax.TokenSyntax = .keyword(.assignment), _ unexpectedBetweenAssignmentKeywordAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndFlag: SwiftSyntax.UnexpectedNodesSyntax? = nil, flag: SwiftSyntax.TokenSyntax, _ unexpectedAfterFlag: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.PrecedenceGroupAssociativitySyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAssociativityLabel")
  public var unexpectedBeforeAssociativityKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "associativityLabel")
  public var associativityKeyword: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenAssociativityLabelAndColon")
  public var unexpectedBetweenAssociativityKeywordAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "PrecedenceGroupAssociativitySyntax(leadingTrivia:_:associativityLabel:_:colon:_:value:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAssociativityKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, associativityKeyword: SwiftSyntax.TokenSyntax = .keyword(.associativity), _ unexpectedBetweenAssociativityKeywordAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, value: SwiftSyntax.TokenSyntax, _ unexpectedAfterValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.PrecedenceGroupDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenPrecedencegroupKeywordAndName")
  public var unexpectedBetweenPrecedencegroupKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "name")
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndLeftBrace")
  public var unexpectedBetweenIdentifierAndLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "PrecedenceGroupDeclSyntax(leadingTrivia:_:attributes:_:modifiers:_:precedencegroupKeyword:_:name:_:leftBrace:_:groupAttributes:_:rightBrace:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndPrecedencegroupKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, precedencegroupKeyword: SwiftSyntax.TokenSyntax = .keyword(.precedencegroup), _ unexpectedBetweenPrecedencegroupKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenIdentifierAndLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), _ unexpectedBetweenLeftBraceAndGroupAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, groupAttributes: SwiftSyntax.PrecedenceGroupAttributeListSyntax, _ unexpectedBetweenGroupAttributesAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), _ unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.PrecedenceGroupRelationSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeHigherThanOrLowerThanLabel")
  public var unexpectedBeforeHigherThanOrLowerThan: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "higherThanOrLowerThanLabel")
  public var higherThanOrLowerThan: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenHigherThanOrLowerThanLabelAndColon")
  public var unexpectedBetweenHigherThanOrLowerThanAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndPrecedenceGroups")
  public var unexpectedBetweenColonAndOtherNames: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "precedenceGroups")
  public var otherNames: SwiftSyntax.PrecedenceGroupNameListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterPrecedenceGroups")
  public var unexpectedAfterOtherNames: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "PrecedenceGroupRelationSyntax(leadingTrivia:_:higherThanOrLowerThanLabel:_:colon:_:precedenceGroups:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeHigherThanOrLowerThan: SwiftSyntax.UnexpectedNodesSyntax? = nil, higherThanOrLowerThan: SwiftSyntax.TokenSyntax, _ unexpectedBetweenHigherThanOrLowerThanAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndOtherNames: SwiftSyntax.UnexpectedNodesSyntax? = nil, otherNames: SwiftSyntax.PrecedenceGroupNameListSyntax, _ unexpectedAfterOtherNames: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.PrefixOperatorExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeOperator")
  public var unexpectedBeforeOperatorToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "operator")
  public var operatorToken: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenOperatorAndExpression")
  public var unexpectedBetweenOperatorTokenAndPostfixExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "expression")
  public var postfixExpression: SwiftSyntax.ExprSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterExpression")
  public var unexpectedAfterPostfixExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "PrefixOperatorExprSyntax(leadingTrivia:_:operator:_:expression:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeOperatorToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, operatorToken: SwiftSyntax.TokenSyntax, _ unexpectedBetweenOperatorTokenAndPostfixExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, postfixExpression: some ExprSyntaxProtocol, _ unexpectedAfterPostfixExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.PrimaryAssociatedTypeClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftAngle")
  public var unexpectedBeforeLeftAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "leftAngle")
  public var leftAngleBracket: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLeftAngleAndPrimaryAssociatedTypes")
  public var unexpectedBetweenLeftAngleBracketAndPrimaryAssociatedTypeList: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "primaryAssociatedTypes")
  public var primaryAssociatedTypeList: SwiftSyntax.PrimaryAssociatedTypeListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenPrimaryAssociatedTypesAndRightAngle")
  public var unexpectedBetweenPrimaryAssociatedTypeListAndRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "rightAngle")
  public var rightAngleBracket: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterRightAngle")
  public var unexpectedAfterRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "PrimaryAssociatedTypeClauseSyntax(leadingTrivia:_:leftAngle:_:primaryAssociatedTypes:_:rightAngle:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftAngleBracket: SwiftSyntax.TokenSyntax = .leftAngleToken(), _ unexpectedBetweenLeftAngleBracketAndPrimaryAssociatedTypeList: SwiftSyntax.UnexpectedNodesSyntax? = nil, primaryAssociatedTypeList: SwiftSyntax.PrimaryAssociatedTypeListSyntax, _ unexpectedBetweenPrimaryAssociatedTypeListAndRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightAngleBracket: SwiftSyntax.TokenSyntax = .rightAngleToken(), _ unexpectedAfterRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ProtocolDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenProtocolKeywordAndName")
  public var unexpectedBetweenProtocolKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "name")
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndPrimaryAssociatedTypeClause")
  public var unexpectedBetweenIdentifierAndPrimaryAssociatedTypeClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ProtocolDeclSyntax(leadingTrivia:_:attributes:_:modifiers:_:protocolKeyword:_:name:_:primaryAssociatedTypeClause:_:inheritanceClause:_:genericWhereClause:_:memberBlock:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndProtocolKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, protocolKeyword: SwiftSyntax.TokenSyntax = .keyword(.protocol), _ unexpectedBetweenProtocolKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenIdentifierAndPrimaryAssociatedTypeClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, primaryAssociatedTypeClause: SwiftSyntax.PrimaryAssociatedTypeClauseSyntax? = nil, _ unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, memberBlock: SwiftSyntax.MemberBlockSyntax, _ unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.RegexLiteralExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenOpeningPoundsAndOpeningSlash")
  public var unexpectedBetweenOpeningPoundsAndOpenSlash: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "openingSlash")
  public var openSlash: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenOpeningSlashAndRegex")
  public var unexpectedBetweenOpenSlashAndRegexPattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "regex")
  public var regexPattern: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenRegexAndClosingSlash")
  public var unexpectedBetweenRegexPatternAndCloseSlash: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "closingSlash")
  public var closeSlash: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenClosingSlashAndClosingPounds")
  public var unexpectedBetweenCloseSlashAndClosingPounds: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "RegexLiteralExprSyntax(leadingTrivia:_:openingPounds:_:openingSlash:_:regex:_:closingSlash:_:closingPounds:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeOpeningPounds: SwiftSyntax.UnexpectedNodesSyntax? = nil, openingPounds: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenOpeningPoundsAndOpenSlash: SwiftSyntax.UnexpectedNodesSyntax? = nil, openSlash: SwiftSyntax.TokenSyntax = .regexSlashToken(), _ unexpectedBetweenOpenSlashAndRegexPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, regexPattern: SwiftSyntax.TokenSyntax, _ unexpectedBetweenRegexPatternAndCloseSlash: SwiftSyntax.UnexpectedNodesSyntax? = nil, closeSlash: SwiftSyntax.TokenSyntax = .regexSlashToken(), _ unexpectedBetweenCloseSlashAndClosingPounds: SwiftSyntax.UnexpectedNodesSyntax? = nil, closingPounds: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterClosingPounds: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ReturnClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenArrowAndType")
  public var unexpectedBetweenArrowAndReturnType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "type")
  public var returnType: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterType")
  public var unexpectedAfterReturnType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ReturnClauseSyntax(leadingTrivia:_:arrow:_:type:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeArrow: SwiftSyntax.UnexpectedNodesSyntax? = nil, arrow: SwiftSyntax.TokenSyntax = .arrowToken(), _ unexpectedBetweenArrowAndReturnType: SwiftSyntax.UnexpectedNodesSyntax? = nil, returnType: some TypeSyntaxProtocol, _ unexpectedAfterReturnType: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.SameTypeRequirementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLeftType")
  public var unexpectedBeforeLeftTypeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "leftType")
  public var leftTypeIdentifier: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLeftTypeAndEqual")
  public var unexpectedBetweenLeftTypeIdentifierAndEqualityToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "equal")
  public var equalityToken: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenEqualAndRightType")
  public var unexpectedBetweenEqualityTokenAndRightTypeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "rightType")
  public var rightTypeIdentifier: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterRightType")
  public var unexpectedAfterRightTypeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "SameTypeRequirementSyntax(leadingTrivia:_:leftType:_:equal:_:rightType:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftTypeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftTypeIdentifier: some TypeSyntaxProtocol, _ unexpectedBetweenLeftTypeIdentifierAndEqualityToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, equalityToken: SwiftSyntax.TokenSyntax, _ unexpectedBetweenEqualityTokenAndRightTypeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightTypeIdentifier: some TypeSyntaxProtocol, _ unexpectedAfterRightTypeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.SomeOrAnyTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenSomeOrAnySpecifierAndConstraint")
  public var unexpectedBetweenSomeOrAnySpecifierAndBaseType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "constraint")
  public var baseType: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterConstraint")
  public var unexpectedAfterBaseType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "SomeOrAnyTypeSyntax(leadingTrivia:_:someOrAnySpecifier:_:constraint:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeSomeOrAnySpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, someOrAnySpecifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenSomeOrAnySpecifierAndBaseType: SwiftSyntax.UnexpectedNodesSyntax? = nil, baseType: some TypeSyntaxProtocol, _ unexpectedAfterBaseType: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.SourceFileSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenStatementsAndEndOfFileToken")
  public var unexpectedBetweenStatementsAndEofToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "endOfFileToken")
  public var eofToken: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterEndOfFileToken")
  public var unexpectedAfterEofToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "SourceFileSyntax(leadingTrivia:_:shebang:_:statements:_:endOfFileToken:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeShebang: SwiftSyntax.UnexpectedNodesSyntax? = nil, shebang: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenShebangAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, statements: SwiftSyntax.CodeBlockItemListSyntax, _ unexpectedBetweenStatementsAndEofToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, eofToken: SwiftSyntax.TokenSyntax = .endOfFileToken(), _ unexpectedAfterEofToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.SpecializeAvailabilityArgumentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAvailabilityLabel")
  public var unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "availabilityLabel")
  public var label: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenAvailabilityLabelAndColon")
  public var unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndAvailabilityArguments")
  public var unexpectedBetweenColonAndAvailabilityList: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "availabilityArguments")
  public var availabilityList: SwiftSyntax.AvailabilityArgumentListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "addAvailabilityArgument")
  public func addAvailability(_ element: SwiftSyntax.AvailabilityArgumentSyntax) -> SwiftSyntax.SpecializeAvailabilityArgumentSyntax
  @available(*, deprecated, renamed: "unexpectedBetweenAvailabilityArgumentsAndSemicolon")
  public var unexpectedBetweenAvailabilityListAndSemicolon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "SpecializeAvailabilityArgumentSyntax(leadingTrivia:_:availabilityLabel:_:colon:_:availabilityArguments:_:semicolon:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.TokenSyntax = .keyword(.availability), _ unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndAvailabilityList: SwiftSyntax.UnexpectedNodesSyntax? = nil, availabilityList: SwiftSyntax.AvailabilityArgumentListSyntax, _ unexpectedBetweenAvailabilityListAndSemicolon: SwiftSyntax.UnexpectedNodesSyntax? = nil, semicolon: SwiftSyntax.TokenSyntax = .semicolonToken(), _ unexpectedAfterSemicolon: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.SpecializeTargetFunctionArgumentSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeTargetLabel")
  public var unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "targetLabel")
  public var label: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenTargetLabelAndColon")
  public var unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndDeclName")
  public var unexpectedBetweenColonAndDeclname: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "declName")
  public var declname: SwiftSyntax.DeclReferenceExprSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenDeclNameAndTrailingComma")
  public var unexpectedBetweenDeclnameAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "SpecializeTargetFunctionArgumentSyntax(leadingTrivia:_:targetLabel:_:colon:_:declName:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.TokenSyntax = .keyword(.target), _ unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndDeclname: SwiftSyntax.UnexpectedNodesSyntax? = nil, declname: SwiftSyntax.DeclReferenceExprSyntax, _ unexpectedBetweenDeclnameAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.StringLiteralExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeOpeningPounds")
  public var unexpectedBeforeOpenDelimiter: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "openingPounds")
  public var openDelimiter: SwiftSyntax.TokenSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenOpeningPoundsAndOpeningQuote")
  public var unexpectedBetweenOpenDelimiterAndOpenQuote: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "openingQuote")
  public var openQuote: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenOpeningQuoteAndSegments")
  public var unexpectedBetweenOpenQuoteAndSegments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenSegmentsAndClosingQuote")
  public var unexpectedBetweenSegmentsAndCloseQuote: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "closingQuote")
  public var closeQuote: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenClosingQuoteAndClosingPounds")
  public var unexpectedBetweenCloseQuoteAndCloseDelimiter: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "closingPounds")
  public var closeDelimiter: SwiftSyntax.TokenSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterClosingPounds")
  public var unexpectedAfterCloseDelimiter: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "StringLiteralExprSyntax(leadingTrivia:_:openingPounds:_:openingQuote:_:segments:_:closingQuote:_:closingPounds:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeOpenDelimiter: SwiftSyntax.UnexpectedNodesSyntax? = nil, openDelimiter: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenOpenDelimiterAndOpenQuote: SwiftSyntax.UnexpectedNodesSyntax? = nil, openQuote: SwiftSyntax.TokenSyntax, _ unexpectedBetweenOpenQuoteAndSegments: SwiftSyntax.UnexpectedNodesSyntax? = nil, segments: SwiftSyntax.StringLiteralSegmentListSyntax, _ unexpectedBetweenSegmentsAndCloseQuote: SwiftSyntax.UnexpectedNodesSyntax? = nil, closeQuote: SwiftSyntax.TokenSyntax, _ unexpectedBetweenCloseQuoteAndCloseDelimiter: SwiftSyntax.UnexpectedNodesSyntax? = nil, closeDelimiter: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterCloseDelimiter: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.StructDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenStructKeywordAndName")
  public var unexpectedBetweenStructKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "name")
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "StructDeclSyntax(leadingTrivia:_:attributes:_:modifiers:_:structKeyword:_:name:_:genericParameterClause:_:inheritanceClause:_:genericWhereClause:_:memberBlock:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndStructKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, structKeyword: SwiftSyntax.TokenSyntax = .keyword(.struct), _ unexpectedBetweenStructKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, _ unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, memberBlock: SwiftSyntax.MemberBlockSyntax, _ unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.SubscriptCallExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenCalledExpressionAndLeftSquare")
  public var unexpectedBetweenCalledExpressionAndLeftBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "leftSquare")
  public var leftBracket: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLeftSquareAndArguments")
  public var unexpectedBetweenLeftBracketAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "arguments")
  public var argumentList: SwiftSyntax.LabeledExprListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenArgumentsAndRightSquare")
  public var unexpectedBetweenArgumentListAndRightBracket: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "rightSquare")
  public var rightBracket: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenRightSquareAndTrailingClosure")
  public var unexpectedBetweenRightBracketAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "SubscriptCallExprSyntax(leadingTrivia:_:calledExpression:_:leftSquare:_:arguments:_:rightSquare:_:trailingClosure:_:additionalTrailingClosures:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeCalledExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, calledExpression: some ExprSyntaxProtocol, _ unexpectedBetweenCalledExpressionAndLeftBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBracket: SwiftSyntax.TokenSyntax = .leftSquareToken(), _ unexpectedBetweenLeftBracketAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? = nil, argumentList: SwiftSyntax.LabeledExprListSyntax, _ unexpectedBetweenArgumentListAndRightBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBracket: SwiftSyntax.TokenSyntax = .rightSquareToken(), _ unexpectedBetweenRightBracketAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], _ unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.SubscriptDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenGenericParameterClauseAndParameterClause")
  public var unexpectedBetweenGenericParameterClauseAndIndices: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "parameterClause")
  public var indices: SwiftSyntax.FunctionParameterClauseSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenParameterClauseAndReturnClause")
  public var unexpectedBetweenIndicesAndResult: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "returnClause")
  public var result: SwiftSyntax.ReturnClauseSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenReturnClauseAndGenericWhereClause")
  public var unexpectedBetweenResultAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenGenericWhereClauseAndAccessorBlock")
  public var unexpectedBetweenGenericWhereClauseAndAccessor: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "accessorBlock")
  public var accessor: SwiftSyntax.AccessorBlockSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterAccessorBlock")
  public var unexpectedAfterAccessor: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "SubscriptDeclSyntax(leadingTrivia:_:attributes:_:modifiers:_:subscriptKeyword:_:genericParameterClause:_:parameterClause:_:returnClause:_:genericWhereClause:_:accessorBlock:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndSubscriptKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, subscriptKeyword: SwiftSyntax.TokenSyntax = .keyword(.subscript), _ unexpectedBetweenSubscriptKeywordAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, _ unexpectedBetweenGenericParameterClauseAndIndices: SwiftSyntax.UnexpectedNodesSyntax? = nil, indices: SwiftSyntax.FunctionParameterClauseSyntax, _ unexpectedBetweenIndicesAndResult: SwiftSyntax.UnexpectedNodesSyntax? = nil, result: SwiftSyntax.ReturnClauseSyntax, _ unexpectedBetweenResultAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndAccessor: SwiftSyntax.UnexpectedNodesSyntax? = nil, accessor: SwiftSyntax.AccessorBlockSyntax? = nil, _ unexpectedAfterAccessor: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.SuppressedTypeSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenWithoutTildeAndType")
  public var unexpectedBetweenWithoutTildeAndPatternType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "type")
  public var patternType: SwiftSyntax.TypeSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterType")
  public var unexpectedAfterPatternType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "SuppressedTypeSyntax(leadingTrivia:_:withoutTilde:_:type:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeWithoutTilde: SwiftSyntax.UnexpectedNodesSyntax? = nil, withoutTilde: SwiftSyntax.TokenSyntax, _ unexpectedBetweenWithoutTildeAndPatternType: SwiftSyntax.UnexpectedNodesSyntax? = nil, patternType: some TypeSyntaxProtocol, _ unexpectedAfterPatternType: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.SwitchCaseSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAttribute")
  public var unexpectedBeforeUnknownAttr: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "attribute")
  public var unknownAttr: SwiftSyntax.AttributeSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenAttributeAndLabel")
  public var unexpectedBetweenUnknownAttrAndLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "SwitchCaseSyntax(leadingTrivia:_:attribute:_:label:_:statements:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeUnknownAttr: SwiftSyntax.UnexpectedNodesSyntax? = nil, unknownAttr: SwiftSyntax.AttributeSyntax? = nil, _ unexpectedBetweenUnknownAttrAndLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.SwitchCaseSyntax.Label, _ unexpectedBetweenLabelAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, statements: SwiftSyntax.CodeBlockItemListSyntax, _ unexpectedAfterStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.SwitchExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenSwitchKeywordAndSubject")
  public var unexpectedBetweenSwitchKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "subject")
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenSubjectAndLeftBrace")
  public var unexpectedBetweenExpressionAndLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "SwitchExprSyntax(leadingTrivia:_:switchKeyword:_:subject:_:leftBrace:_:cases:_:rightBrace:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeSwitchKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, switchKeyword: SwiftSyntax.TokenSyntax = .keyword(.switch), _ unexpectedBetweenSwitchKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedBetweenExpressionAndLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), _ unexpectedBetweenLeftBraceAndCases: SwiftSyntax.UnexpectedNodesSyntax? = nil, cases: SwiftSyntax.SwitchCaseListSyntax, _ unexpectedBetweenCasesAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), _ unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.TernaryExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeCondition")
  public var unexpectedBeforeConditionExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "condition")
  public var conditionExpression: SwiftSyntax.ExprSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenConditionAndQuestionMark")
  public var unexpectedBetweenConditionExpressionAndQuestionMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenQuestionMarkAndThenExpression")
  public var unexpectedBetweenQuestionMarkAndFirstChoice: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "thenExpression")
  public var firstChoice: SwiftSyntax.ExprSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenThenExpressionAndColon")
  public var unexpectedBetweenFirstChoiceAndColonMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "colon")
  public var colonMark: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndElseExpression")
  public var unexpectedBetweenColonMarkAndSecondChoice: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "elseExpression")
  public var secondChoice: SwiftSyntax.ExprSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterElseExpression")
  public var unexpectedAfterSecondChoice: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "TernaryExprSyntax(leadingTrivia:_:condition:_:questionMark:_:thenExpression:_:colon:_:elseExpression:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeConditionExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, conditionExpression: some ExprSyntaxProtocol, _ unexpectedBetweenConditionExpressionAndQuestionMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, questionMark: SwiftSyntax.TokenSyntax = .infixQuestionMarkToken(), _ unexpectedBetweenQuestionMarkAndFirstChoice: SwiftSyntax.UnexpectedNodesSyntax? = nil, firstChoice: some ExprSyntaxProtocol, _ unexpectedBetweenFirstChoiceAndColonMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, colonMark: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonMarkAndSecondChoice: SwiftSyntax.UnexpectedNodesSyntax? = nil, secondChoice: some ExprSyntaxProtocol, _ unexpectedAfterSecondChoice: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.TupleExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndElements")
  public var unexpectedBetweenLeftParenAndElementList: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "elements")
  public var elementList: SwiftSyntax.LabeledExprListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenElementsAndRightParen")
  public var unexpectedBetweenElementListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "TupleExprSyntax(leadingTrivia:_:leftParen:_:elements:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndElementList: SwiftSyntax.UnexpectedNodesSyntax? = nil, elementList: SwiftSyntax.LabeledExprListSyntax, _ unexpectedBetweenElementListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.TuplePatternElementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeLabel")
  public var unexpectedBeforeLabelName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "label")
  public var labelName: SwiftSyntax.TokenSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenLabelAndColon")
  public var unexpectedBetweenLabelNameAndLabelColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "colon")
  public var labelColon: SwiftSyntax.TokenSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenColonAndPattern")
  public var unexpectedBetweenLabelColonAndPattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "TuplePatternElementSyntax(leadingTrivia:_:label:_:colon:_:pattern:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLabelName: SwiftSyntax.UnexpectedNodesSyntax? = nil, labelName: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenLabelNameAndLabelColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, labelColon: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenLabelColonAndPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, pattern: some PatternSyntaxProtocol, _ unexpectedBetweenPatternAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.TupleTypeElementSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeInoutKeyword")
  public var unexpectedBeforeInOut: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "inoutKeyword")
  public var inOut: SwiftSyntax.TokenSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenInoutKeywordAndFirstName")
  public var unexpectedBetweenInOutAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "firstName")
  public var name: SwiftSyntax.TokenSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenFirstNameAndSecondName")
  public var unexpectedBetweenNameAndSecondName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "TupleTypeElementSyntax(leadingTrivia:_:inoutKeyword:_:firstName:_:secondName:_:colon:_:type:_:ellipsis:_:trailingComma:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeInOut: SwiftSyntax.UnexpectedNodesSyntax? = nil, inOut: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenInOutAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenNameAndSecondName: SwiftSyntax.UnexpectedNodesSyntax? = nil, secondName: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenSecondNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenColonAndType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedBetweenTypeAndEllipsis: SwiftSyntax.UnexpectedNodesSyntax? = nil, ellipsis: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenEllipsisAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.TypeAliasDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenTypealiasKeywordAndName")
  public var unexpectedBetweenTypealiasKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "name")
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenNameAndGenericParameterClause")
  public var unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "TypeAliasDeclSyntax(leadingTrivia:_:attributes:_:modifiers:_:typealiasKeyword:_:name:_:genericParameterClause:_:initializer:_:genericWhereClause:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndTypealiasKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, typealiasKeyword: SwiftSyntax.TokenSyntax = .keyword(.typealias), _ unexpectedBetweenTypealiasKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, _ unexpectedBetweenGenericParameterClauseAndInitializer: SwiftSyntax.UnexpectedNodesSyntax? = nil, initializer: SwiftSyntax.TypeInitializerClauseSyntax, _ unexpectedBetweenInitializerAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedAfterGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.UnresolvedAsExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeAsKeyword")
  public var unexpectedBeforeAsTok: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "asKeyword")
  public var asTok: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenAsKeywordAndQuestionOrExclamationMark")
  public var unexpectedBetweenAsTokAndQuestionOrExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "UnresolvedAsExprSyntax(leadingTrivia:_:asKeyword:_:questionOrExclamationMark:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAsTok: SwiftSyntax.UnexpectedNodesSyntax? = nil, asTok: SwiftSyntax.TokenSyntax = .keyword(.as), _ unexpectedBetweenAsTokAndQuestionOrExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, questionOrExclamationMark: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterQuestionOrExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.UnresolvedIsExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeIsKeyword")
  public var unexpectedBeforeIsTok: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "isKeyword")
  public var isTok: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterIsKeyword")
  public var unexpectedAfterIsTok: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "UnresolvedIsExprSyntax(leadingTrivia:_:isKeyword:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeIsTok: SwiftSyntax.UnexpectedNodesSyntax? = nil, isTok: SwiftSyntax.TokenSyntax = .keyword(.is), _ unexpectedAfterIsTok: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.UnresolvedTernaryExprSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenQuestionMarkAndThenExpression")
  public var unexpectedBetweenQuestionMarkAndFirstChoice: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "thenExpression")
  public var firstChoice: SwiftSyntax.ExprSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenThenExpressionAndColon")
  public var unexpectedBetweenFirstChoiceAndColonMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "colon")
  public var colonMark: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterColon")
  public var unexpectedAfterColonMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "UnresolvedTernaryExprSyntax(leadingTrivia:_:questionMark:_:thenExpression:_:colon:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeQuestionMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, questionMark: SwiftSyntax.TokenSyntax = .infixQuestionMarkToken(), _ unexpectedBetweenQuestionMarkAndFirstChoice: SwiftSyntax.UnexpectedNodesSyntax? = nil, firstChoice: some ExprSyntaxProtocol, _ unexpectedBetweenFirstChoiceAndColonMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, colonMark: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedAfterColonMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.ValueBindingPatternSyntax {
  @available(*, deprecated, renamed: "unexpectedBeforeBindingSpecifier")
  public var unexpectedBeforeBindingKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "bindingSpecifier")
  public var bindingKeyword: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenBindingSpecifierAndPattern")
  public var unexpectedBetweenBindingKeywordAndValuePattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "pattern")
  public var valuePattern: SwiftSyntax.PatternSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterPattern")
  public var unexpectedAfterValuePattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "ValueBindingPatternSyntax(leadingTrivia:_:bindingSpecifier:_:pattern:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBindingKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, bindingKeyword: SwiftSyntax.TokenSyntax, _ unexpectedBetweenBindingKeywordAndValuePattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, valuePattern: some PatternSyntaxProtocol, _ unexpectedAfterValuePattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.VariableDeclSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenModifiersAndBindingSpecifier")
  public var unexpectedBetweenModifiersAndBindingKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "bindingSpecifier")
  public var bindingKeyword: SwiftSyntax.TokenSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenBindingSpecifierAndBindings")
  public var unexpectedBetweenBindingKeywordAndBindings: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "VariableDeclSyntax(leadingTrivia:_:attributes:_:modifiers:_:bindingSpecifier:_:bindings:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndBindingKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, bindingKeyword: SwiftSyntax.TokenSyntax, _ unexpectedBetweenBindingKeywordAndBindings: SwiftSyntax.UnexpectedNodesSyntax? = nil, bindings: SwiftSyntax.PatternBindingListSyntax, _ unexpectedAfterBindings: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.WhereClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenWhereKeywordAndCondition")
  public var unexpectedBetweenWhereKeywordAndGuardResult: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "condition")
  public var guardResult: SwiftSyntax.ExprSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterCondition")
  public var unexpectedAfterGuardResult: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "WhereClauseSyntax(leadingTrivia:_:whereKeyword:_:condition:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeWhereKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, whereKeyword: SwiftSyntax.TokenSyntax = .keyword(.where), _ unexpectedBetweenWhereKeywordAndGuardResult: SwiftSyntax.UnexpectedNodesSyntax? = nil, guardResult: some ExprSyntaxProtocol, _ unexpectedAfterGuardResult: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.YieldStmtSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenYieldKeywordAndYieldedExpressions")
  public var unexpectedBetweenYieldKeywordAndYields: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "yieldedExpressions")
  public var yields: SwiftSyntax.YieldStmtSyntax.YieldedExpressions {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedAfterYieldedExpressions")
  public var unexpectedAfterYields: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "YieldStmtSyntax(leadingTrivia:_:yieldKeyword:_:yieldedExpressions:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeYieldKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, yieldKeyword: SwiftSyntax.TokenSyntax = .keyword(.yield), _ unexpectedBetweenYieldKeywordAndYields: SwiftSyntax.UnexpectedNodesSyntax? = nil, yields: SwiftSyntax.YieldStmtSyntax.YieldedExpressions, _ unexpectedAfterYields: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
extension SwiftSyntax.YieldedExpressionsClauseSyntax {
  @available(*, deprecated, renamed: "unexpectedBetweenLeftParenAndElements")
  public var unexpectedBetweenLeftParenAndElementList: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "elements")
  public var elementList: SwiftSyntax.YieldedExpressionListSyntax {
    get
    set
  }
  @available(*, deprecated, renamed: "unexpectedBetweenElementsAndRightParen")
  public var unexpectedBetweenElementListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set
  }
  @available(*, deprecated, renamed: "YieldedExpressionsClauseSyntax(leadingTrivia:_:leftParen:_:elements:_:rightParen:_:trailingTrivia:)")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndElementList: SwiftSyntax.UnexpectedNodesSyntax? = nil, elementList: SwiftSyntax.YieldedExpressionListSyntax, _ unexpectedBetweenElementListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
}
@available(*, deprecated, renamed: "ImportPathComponentListSyntax")
public typealias AccessPathSyntax = SwiftSyntax.ImportPathComponentListSyntax
@available(*, deprecated, renamed: "ImportPathComponentSyntax")
public typealias AccessPathComponentSyntax = SwiftSyntax.ImportPathComponentSyntax
@available(*, deprecated, renamed: "AccessorDeclListSyntax")
public typealias AccessorListSyntax = SwiftSyntax.AccessorDeclListSyntax
@available(*, deprecated, renamed: "AccessorParametersSyntax")
public typealias AccessorParameterSyntax = SwiftSyntax.AccessorParametersSyntax
@available(*, deprecated, renamed: "AssociatedTypeDeclSyntax")
public typealias AssociatedtypeDeclSyntax = SwiftSyntax.AssociatedTypeDeclSyntax
@available(*, deprecated, renamed: "SpecializeAvailabilityArgumentSyntax")
public typealias AvailabilityEntrySyntax = SwiftSyntax.SpecializeAvailabilityArgumentSyntax
@available(*, deprecated, renamed: "AvailabilityArgumentListSyntax")
public typealias AvailabilitySpecListSyntax = SwiftSyntax.AvailabilityArgumentListSyntax
@available(*, deprecated, renamed: "PlatformVersionSyntax")
public typealias AvailabilityVersionRestrictionSyntax = SwiftSyntax.PlatformVersionSyntax
@available(*, deprecated, renamed: "PlatformVersionItemListSyntax")
public typealias AvailabilityVersionRestrictionListSyntax = SwiftSyntax.PlatformVersionItemListSyntax
@available(*, deprecated, renamed: "PlatformVersionItemSyntax")
public typealias AvailabilityVersionRestrictionListEntrySyntax = SwiftSyntax.PlatformVersionItemSyntax
@available(*, deprecated, renamed: "BackDeployedAttributeArgumentsSyntax")
public typealias BackDeployedAttributeSpecListSyntax = SwiftSyntax.BackDeployedAttributeArgumentsSyntax
@available(*, deprecated, renamed: "SwitchCaseItemSyntax")
public typealias CaseItemSyntax = SwiftSyntax.SwitchCaseItemSyntax
@available(*, deprecated, renamed: "SwitchCaseItemListSyntax")
public typealias CaseItemListSyntax = SwiftSyntax.SwitchCaseItemListSyntax
@available(*, deprecated, renamed: "ClosureCaptureSyntax")
public typealias ClosureCaptureItemSyntax = SwiftSyntax.ClosureCaptureSyntax
@available(*, deprecated, renamed: "ClosureCaptureListSyntax")
public typealias ClosureCaptureItemListSyntax = SwiftSyntax.ClosureCaptureListSyntax
@available(*, deprecated, renamed: "ClosureCaptureSpecifierSyntax")
public typealias ClosureCaptureItemSpecifierSyntax = SwiftSyntax.ClosureCaptureSpecifierSyntax
@available(*, deprecated, renamed: "ClosureCaptureClauseSyntax")
public typealias ClosureCaptureSignatureSyntax = SwiftSyntax.ClosureCaptureClauseSyntax
@available(*, deprecated, renamed: "ClosureShorthandParameterSyntax")
public typealias ClosureParamSyntax = SwiftSyntax.ClosureShorthandParameterSyntax
@available(*, deprecated, renamed: "ClosureShorthandParameterListSyntax")
public typealias ClosureParamListSyntax = SwiftSyntax.ClosureShorthandParameterListSyntax
@available(*, deprecated, renamed: "SomeOrAnyTypeSyntax")
public typealias ConstrainedSugarTypeSyntax = SwiftSyntax.SomeOrAnyTypeSyntax
@available(*, deprecated, renamed: "DeinitializerEffectSpecifiersSyntax")
public typealias DeinitEffectSpecifiersSyntax = SwiftSyntax.DeinitializerEffectSpecifiersSyntax
@available(*, deprecated, renamed: "DerivativeAttributeArgumentsSyntax")
public typealias DerivativeRegistrationAttributeArgumentsSyntax = SwiftSyntax.DerivativeAttributeArgumentsSyntax
@available(*, deprecated, renamed: "DesignatedTypeSyntax")
public typealias DesignatedTypeElementSyntax = SwiftSyntax.DesignatedTypeSyntax
@available(*, deprecated, renamed: "DifferentiabilityArgumentSyntax")
public typealias DifferentiabilityParamSyntax = SwiftSyntax.DifferentiabilityArgumentSyntax
@available(*, deprecated, renamed: "DifferentiabilityArgumentListSyntax")
public typealias DifferentiabilityParamListSyntax = SwiftSyntax.DifferentiabilityArgumentListSyntax
@available(*, deprecated, renamed: "DifferentiabilityArgumentsSyntax")
public typealias DifferentiabilityParamsSyntax = SwiftSyntax.DifferentiabilityArgumentsSyntax
@available(*, deprecated, renamed: "DifferentiabilityWithRespectToArgumentSyntax")
public typealias DifferentiabilityParamsClauseSyntax = SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax
@available(*, deprecated, renamed: "DocumentationAttributeArgumentListSyntax")
public typealias DocumentationAttributeArgumentsSyntax = SwiftSyntax.DocumentationAttributeArgumentListSyntax
@available(*, deprecated, renamed: "DynamicReplacementAttributeArgumentsSyntax")
public typealias DynamicReplacementArgumentsSyntax = SwiftSyntax.DynamicReplacementAttributeArgumentsSyntax
@available(*, deprecated, renamed: "EffectsAttributeArgumentListSyntax")
public typealias EffectsArgumentsSyntax = SwiftSyntax.EffectsAttributeArgumentListSyntax
@available(*, deprecated, renamed: "EnumCaseParameterClauseSyntax")
public typealias EnumCaseAssociatedValueSyntax = SwiftSyntax.EnumCaseParameterClauseSyntax
@available(*, deprecated, renamed: "FallThroughStmtSyntax")
public typealias FallthroughStmtSyntax = SwiftSyntax.FallThroughStmtSyntax
@available(*, deprecated, renamed: "ForStmtSyntax")
public typealias ForInStmtSyntax = SwiftSyntax.ForStmtSyntax
@available(*, deprecated, renamed: "ForceUnwrapExprSyntax")
public typealias ForcedValueExprSyntax = SwiftSyntax.ForceUnwrapExprSyntax
@available(*, deprecated, renamed: "DeclReferenceExprSyntax")
public typealias IdentifierExprSyntax = SwiftSyntax.DeclReferenceExprSyntax
@available(*, deprecated, renamed: "LabeledSpecializeArgumentSyntax")
public typealias LabeledSpecializeEntrySyntax = SwiftSyntax.LabeledSpecializeArgumentSyntax
@available(*, deprecated, renamed: "MemberBlockSyntax")
public typealias MemberDeclBlockSyntax = SwiftSyntax.MemberBlockSyntax
@available(*, deprecated, renamed: "MemberBlockItemListSyntax")
public typealias MemberDeclListSyntax = SwiftSyntax.MemberBlockItemListSyntax
@available(*, deprecated, renamed: "MemberBlockItemSyntax")
public typealias MemberDeclListItemSyntax = SwiftSyntax.MemberBlockItemSyntax
@available(*, deprecated, renamed: "MemberTypeSyntax")
public typealias MemberTypeIdentifierSyntax = SwiftSyntax.MemberTypeSyntax
@available(*, deprecated, renamed: "DeclModifierListSyntax")
public typealias ModifierListSyntax = SwiftSyntax.DeclModifierListSyntax
@available(*, deprecated, renamed: "ConsumeExprSyntax")
public typealias MoveExprSyntax = SwiftSyntax.ConsumeExprSyntax
@available(*, deprecated, renamed: "ObjCSelectorPieceListSyntax")
public typealias ObjCSelectorSyntax = SwiftSyntax.ObjCSelectorPieceListSyntax
@available(*, deprecated, renamed: "OriginallyDefinedInAttributeArgumentsSyntax")
public typealias OriginallyDefinedInArgumentsSyntax = SwiftSyntax.OriginallyDefinedInAttributeArgumentsSyntax
@available(*, deprecated, renamed: "PackElementTypeSyntax")
public typealias PackReferenceTypeSyntax = SwiftSyntax.PackElementTypeSyntax
@available(*, deprecated, renamed: "FunctionParameterClauseSyntax")
public typealias ParameterClauseSyntax = SwiftSyntax.FunctionParameterClauseSyntax
@available(*, deprecated, renamed: "PostfixOperatorExprSyntax")
public typealias PostfixUnaryExprSyntax = SwiftSyntax.PostfixOperatorExprSyntax
@available(*, deprecated, renamed: "PoundSourceLocationArgumentsSyntax")
public typealias PoundSourceLocationArgsSyntax = SwiftSyntax.PoundSourceLocationArgumentsSyntax
@available(*, deprecated, renamed: "PrecedenceGroupNameSyntax")
public typealias PrecedenceGroupNameElementSyntax = SwiftSyntax.PrecedenceGroupNameSyntax
@available(*, deprecated, renamed: "RepeatStmtSyntax")
public typealias RepeatWhileStmtSyntax = SwiftSyntax.RepeatStmtSyntax
@available(*, deprecated, renamed: "IdentifierTypeSyntax")
public typealias SimpleTypeIdentifierSyntax = SwiftSyntax.IdentifierTypeSyntax
@available(*, deprecated, renamed: "SpecializeAttributeArgumentListSyntax")
public typealias SpecializeAttributeSpecListSyntax = SwiftSyntax.SpecializeAttributeArgumentListSyntax
@available(*, deprecated, renamed: "GenericSpecializationExprSyntax")
public typealias SpecializeExprSyntax = SwiftSyntax.GenericSpecializationExprSyntax
@available(*, deprecated, renamed: "StringLiteralSegmentListSyntax")
public typealias StringLiteralSegmentsSyntax = SwiftSyntax.StringLiteralSegmentListSyntax
@available(*, deprecated, renamed: "SubscriptCallExprSyntax")
public typealias SubscriptExprSyntax = SwiftSyntax.SubscriptCallExprSyntax
@available(*, deprecated, renamed: "SuperExprSyntax")
public typealias SuperRefExprSyntax = SwiftSyntax.SuperExprSyntax
@available(*, deprecated, renamed: "SpecializeTargetFunctionArgumentSyntax")
public typealias TargetFunctionEntrySyntax = SwiftSyntax.SpecializeTargetFunctionArgumentSyntax
@available(*, deprecated, renamed: "LabeledExprSyntax")
public typealias TupleExprElementSyntax = SwiftSyntax.LabeledExprSyntax
@available(*, deprecated, renamed: "LabeledExprListSyntax")
public typealias TupleExprElementListSyntax = SwiftSyntax.LabeledExprListSyntax
@available(*, deprecated, renamed: "InheritanceClauseSyntax")
public typealias TypeInheritanceClauseSyntax = SwiftSyntax.InheritanceClauseSyntax
@available(*, deprecated, renamed: "TypeAliasDeclSyntax")
public typealias TypealiasDeclSyntax = SwiftSyntax.TypeAliasDeclSyntax
@available(*, deprecated, renamed: "UnavailableFromAsyncAttributeArgumentsSyntax")
public typealias UnavailableFromAsyncArgumentsSyntax = SwiftSyntax.UnavailableFromAsyncAttributeArgumentsSyntax
@available(*, deprecated, renamed: "PatternExprSyntax")
public typealias UnresolvedPatternExprSyntax = SwiftSyntax.PatternExprSyntax
@available(*, deprecated, renamed: "YieldedExpressionListSyntax")
public typealias YieldExprListSyntax = SwiftSyntax.YieldedExpressionListSyntax
@available(*, deprecated, renamed: "YieldedExpressionSyntax")
public typealias YieldExprListElementSyntax = SwiftSyntax.YieldedExpressionSyntax
@available(*, deprecated, renamed: "YieldedExpressionsClauseSyntax")
public typealias YieldListSyntax = SwiftSyntax.YieldedExpressionsClauseSyntax
extension SwiftSyntax.SyntaxKind {
  public static var accessPath: SwiftSyntax.SyntaxKind {
    get
  }
  public static var accessPathComponent: SwiftSyntax.SyntaxKind {
    get
  }
  public static var accessorList: SwiftSyntax.SyntaxKind {
    get
  }
  public static var accessorParameter: SwiftSyntax.SyntaxKind {
    get
  }
  public static var associatedtypeDecl: SwiftSyntax.SyntaxKind {
    get
  }
  public static var availabilityEntry: SwiftSyntax.SyntaxKind {
    get
  }
  public static var availabilitySpecList: SwiftSyntax.SyntaxKind {
    get
  }
  public static var availabilityVersionRestriction: SwiftSyntax.SyntaxKind {
    get
  }
  public static var availabilityVersionRestrictionList: SwiftSyntax.SyntaxKind {
    get
  }
  public static var availabilityVersionRestrictionListEntry: SwiftSyntax.SyntaxKind {
    get
  }
  public static var backDeployedAttributeSpecList: SwiftSyntax.SyntaxKind {
    get
  }
  public static var caseItem: SwiftSyntax.SyntaxKind {
    get
  }
  public static var caseItemList: SwiftSyntax.SyntaxKind {
    get
  }
  public static var closureCaptureItem: SwiftSyntax.SyntaxKind {
    get
  }
  public static var closureCaptureItemList: SwiftSyntax.SyntaxKind {
    get
  }
  public static var closureCaptureItemSpecifier: SwiftSyntax.SyntaxKind {
    get
  }
  public static var closureCaptureSignature: SwiftSyntax.SyntaxKind {
    get
  }
  public static var closureParam: SwiftSyntax.SyntaxKind {
    get
  }
  public static var closureParamList: SwiftSyntax.SyntaxKind {
    get
  }
  public static var constrainedSugarType: SwiftSyntax.SyntaxKind {
    get
  }
  public static var deinitEffectSpecifiers: SwiftSyntax.SyntaxKind {
    get
  }
  public static var derivativeRegistrationAttributeArguments: SwiftSyntax.SyntaxKind {
    get
  }
  public static var designatedTypeElement: SwiftSyntax.SyntaxKind {
    get
  }
  public static var differentiabilityParam: SwiftSyntax.SyntaxKind {
    get
  }
  public static var differentiabilityParamList: SwiftSyntax.SyntaxKind {
    get
  }
  public static var differentiabilityParams: SwiftSyntax.SyntaxKind {
    get
  }
  public static var differentiabilityParamsClause: SwiftSyntax.SyntaxKind {
    get
  }
  public static var documentationAttributeArguments: SwiftSyntax.SyntaxKind {
    get
  }
  public static var dynamicReplacementArguments: SwiftSyntax.SyntaxKind {
    get
  }
  public static var effectsArguments: SwiftSyntax.SyntaxKind {
    get
  }
  public static var enumCaseAssociatedValue: SwiftSyntax.SyntaxKind {
    get
  }
  public static var fallthroughStmt: SwiftSyntax.SyntaxKind {
    get
  }
  public static var forInStmt: SwiftSyntax.SyntaxKind {
    get
  }
  public static var forcedValueExpr: SwiftSyntax.SyntaxKind {
    get
  }
  public static var identifierExpr: SwiftSyntax.SyntaxKind {
    get
  }
  public static var labeledSpecializeEntry: SwiftSyntax.SyntaxKind {
    get
  }
  public static var memberDeclBlock: SwiftSyntax.SyntaxKind {
    get
  }
  public static var memberDeclList: SwiftSyntax.SyntaxKind {
    get
  }
  public static var memberDeclListItem: SwiftSyntax.SyntaxKind {
    get
  }
  public static var memberTypeIdentifier: SwiftSyntax.SyntaxKind {
    get
  }
  public static var modifierList: SwiftSyntax.SyntaxKind {
    get
  }
  public static var moveExpr: SwiftSyntax.SyntaxKind {
    get
  }
  public static var objCSelector: SwiftSyntax.SyntaxKind {
    get
  }
  public static var originallyDefinedInArguments: SwiftSyntax.SyntaxKind {
    get
  }
  public static var packReferenceType: SwiftSyntax.SyntaxKind {
    get
  }
  public static var parameterClause: SwiftSyntax.SyntaxKind {
    get
  }
  public static var postfixUnaryExpr: SwiftSyntax.SyntaxKind {
    get
  }
  public static var poundSourceLocationArgs: SwiftSyntax.SyntaxKind {
    get
  }
  public static var precedenceGroupNameElement: SwiftSyntax.SyntaxKind {
    get
  }
  public static var repeatWhileStmt: SwiftSyntax.SyntaxKind {
    get
  }
  public static var simpleTypeIdentifier: SwiftSyntax.SyntaxKind {
    get
  }
  public static var specializeAttributeSpecList: SwiftSyntax.SyntaxKind {
    get
  }
  public static var specializeExpr: SwiftSyntax.SyntaxKind {
    get
  }
  public static var stringLiteralSegments: SwiftSyntax.SyntaxKind {
    get
  }
  public static var subscriptExpr: SwiftSyntax.SyntaxKind {
    get
  }
  public static var superRefExpr: SwiftSyntax.SyntaxKind {
    get
  }
  public static var targetFunctionEntry: SwiftSyntax.SyntaxKind {
    get
  }
  public static var tupleExprElement: SwiftSyntax.SyntaxKind {
    get
  }
  public static var tupleExprElementList: SwiftSyntax.SyntaxKind {
    get
  }
  public static var typeInheritanceClause: SwiftSyntax.SyntaxKind {
    get
  }
  public static var typealiasDecl: SwiftSyntax.SyntaxKind {
    get
  }
  public static var unavailableFromAsyncArguments: SwiftSyntax.SyntaxKind {
    get
  }
  public static var unresolvedPatternExpr: SwiftSyntax.SyntaxKind {
    get
  }
  public static var yieldExprList: SwiftSyntax.SyntaxKind {
    get
  }
  public static var yieldExprListElement: SwiftSyntax.SyntaxKind {
    get
  }
  public static var yieldList: SwiftSyntax.SyntaxKind {
    get
  }
}
@_inheritsConvenienceInitializers open class SyntaxAnyVisitor : SwiftSyntax.SyntaxVisitor {
  open func visitAny(_ node: SwiftSyntax.Syntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitAnyPost(_ node: SwiftSyntax.Syntax)
  override open func visit(_ token: SwiftSyntax.TokenSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TokenSyntax)
  override open func visit(_ node: SwiftSyntax.AccessorBlockSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AccessorBlockSyntax)
  override open func visit(_ node: SwiftSyntax.AccessorDeclListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AccessorDeclListSyntax)
  override open func visit(_ node: SwiftSyntax.AccessorDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AccessorDeclSyntax)
  override open func visit(_ node: SwiftSyntax.AccessorEffectSpecifiersSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AccessorEffectSpecifiersSyntax)
  override open func visit(_ node: SwiftSyntax.AccessorParametersSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AccessorParametersSyntax)
  override open func visit(_ node: SwiftSyntax.ActorDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ActorDeclSyntax)
  override open func visit(_ node: SwiftSyntax.ArrayElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ArrayElementListSyntax)
  override open func visit(_ node: SwiftSyntax.ArrayElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ArrayElementSyntax)
  override open func visit(_ node: SwiftSyntax.ArrayExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ArrayExprSyntax)
  override open func visit(_ node: SwiftSyntax.ArrayTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ArrayTypeSyntax)
  override open func visit(_ node: SwiftSyntax.ArrowExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ArrowExprSyntax)
  override open func visit(_ node: SwiftSyntax.AsExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AsExprSyntax)
  override open func visit(_ node: SwiftSyntax.AssignmentExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AssignmentExprSyntax)
  override open func visit(_ node: SwiftSyntax.AssociatedTypeDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AssociatedTypeDeclSyntax)
  override open func visit(_ node: SwiftSyntax.AttributeListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AttributeListSyntax)
  override open func visit(_ node: SwiftSyntax.AttributeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AttributeSyntax)
  override open func visit(_ node: SwiftSyntax.AttributedTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AttributedTypeSyntax)
  override open func visit(_ node: SwiftSyntax.AvailabilityArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AvailabilityArgumentListSyntax)
  override open func visit(_ node: SwiftSyntax.AvailabilityArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AvailabilityArgumentSyntax)
  override open func visit(_ node: SwiftSyntax.AvailabilityConditionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AvailabilityConditionSyntax)
  override open func visit(_ node: SwiftSyntax.AvailabilityLabeledArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AvailabilityLabeledArgumentSyntax)
  override open func visit(_ node: SwiftSyntax.AwaitExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.AwaitExprSyntax)
  override open func visit(_ node: SwiftSyntax.BackDeployedAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.BackDeployedAttributeArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.BinaryOperatorExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.BinaryOperatorExprSyntax)
  override open func visit(_ node: SwiftSyntax.BooleanLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.BooleanLiteralExprSyntax)
  override open func visit(_ node: SwiftSyntax.BorrowExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.BorrowExprSyntax)
  override open func visit(_ node: SwiftSyntax.BreakStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.BreakStmtSyntax)
  override open func visit(_ node: SwiftSyntax.CanImportExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CanImportExprSyntax)
  override open func visit(_ node: SwiftSyntax.CanImportVersionInfoSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CanImportVersionInfoSyntax)
  override open func visit(_ node: SwiftSyntax.CatchClauseListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CatchClauseListSyntax)
  override open func visit(_ node: SwiftSyntax.CatchClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CatchClauseSyntax)
  override open func visit(_ node: SwiftSyntax.CatchItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CatchItemListSyntax)
  override open func visit(_ node: SwiftSyntax.CatchItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CatchItemSyntax)
  override open func visit(_ node: SwiftSyntax.ClassDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClassDeclSyntax)
  override open func visit(_ node: SwiftSyntax.ClassRestrictionTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClassRestrictionTypeSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureCaptureClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureCaptureClauseSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureCaptureListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureCaptureListSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureCaptureSpecifierSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureCaptureSpecifierSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureCaptureSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureCaptureSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureExprSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureParameterClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureParameterClauseSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureParameterListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureParameterListSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureParameterSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureParameterSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureShorthandParameterListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureShorthandParameterListSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureShorthandParameterSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureShorthandParameterSyntax)
  override open func visit(_ node: SwiftSyntax.ClosureSignatureSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ClosureSignatureSyntax)
  override open func visit(_ node: SwiftSyntax.CodeBlockItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CodeBlockItemListSyntax)
  override open func visit(_ node: SwiftSyntax.CodeBlockItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CodeBlockItemSyntax)
  override open func visit(_ node: SwiftSyntax.CodeBlockSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CodeBlockSyntax)
  override open func visit(_ node: SwiftSyntax.CompositionTypeElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CompositionTypeElementListSyntax)
  override open func visit(_ node: SwiftSyntax.CompositionTypeElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CompositionTypeElementSyntax)
  override open func visit(_ node: SwiftSyntax.CompositionTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CompositionTypeSyntax)
  override open func visit(_ node: SwiftSyntax.ConditionElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ConditionElementListSyntax)
  override open func visit(_ node: SwiftSyntax.ConditionElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ConditionElementSyntax)
  override open func visit(_ node: SwiftSyntax.ConformanceRequirementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ConformanceRequirementSyntax)
  override open func visit(_ node: SwiftSyntax.ConsumeExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ConsumeExprSyntax)
  override open func visit(_ node: SwiftSyntax.ContinueStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ContinueStmtSyntax)
  override open func visit(_ node: SwiftSyntax.ConventionAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ConventionAttributeArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.ConventionWitnessMethodAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ConventionWitnessMethodAttributeArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.CopyExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.CopyExprSyntax)
  override open func visit(_ node: SwiftSyntax.DeclModifierDetailSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeclModifierDetailSyntax)
  override open func visit(_ node: SwiftSyntax.DeclModifierListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeclModifierListSyntax)
  override open func visit(_ node: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeclModifierSyntax)
  override open func visit(_ node: SwiftSyntax.DeclNameArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeclNameArgumentListSyntax)
  override open func visit(_ node: SwiftSyntax.DeclNameArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeclNameArgumentSyntax)
  override open func visit(_ node: SwiftSyntax.DeclNameArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeclNameArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.DeclReferenceExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeclReferenceExprSyntax)
  override open func visit(_ node: SwiftSyntax.DeferStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeferStmtSyntax)
  override open func visit(_ node: SwiftSyntax.DeinitializerDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeinitializerDeclSyntax)
  override open func visit(_ node: SwiftSyntax.DeinitializerEffectSpecifiersSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DeinitializerEffectSpecifiersSyntax)
  override open func visit(_ node: SwiftSyntax.DerivativeAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DerivativeAttributeArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.DesignatedTypeListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DesignatedTypeListSyntax)
  override open func visit(_ node: SwiftSyntax.DesignatedTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DesignatedTypeSyntax)
  override open func visit(_ node: SwiftSyntax.DictionaryElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DictionaryElementListSyntax)
  override open func visit(_ node: SwiftSyntax.DictionaryElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DictionaryElementSyntax)
  override open func visit(_ node: SwiftSyntax.DictionaryExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DictionaryExprSyntax)
  override open func visit(_ node: SwiftSyntax.DictionaryTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DictionaryTypeSyntax)
  override open func visit(_ node: SwiftSyntax.DifferentiabilityArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DifferentiabilityArgumentListSyntax)
  override open func visit(_ node: SwiftSyntax.DifferentiabilityArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DifferentiabilityArgumentSyntax)
  override open func visit(_ node: SwiftSyntax.DifferentiabilityArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DifferentiabilityArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax)
  override open func visit(_ node: SwiftSyntax.DifferentiableAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DifferentiableAttributeArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.DiscardAssignmentExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DiscardAssignmentExprSyntax)
  override open func visit(_ node: SwiftSyntax.DiscardStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DiscardStmtSyntax)
  override open func visit(_ node: SwiftSyntax.DoStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DoStmtSyntax)
  override open func visit(_ node: SwiftSyntax.DocumentationAttributeArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DocumentationAttributeArgumentListSyntax)
  override open func visit(_ node: SwiftSyntax.DocumentationAttributeArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DocumentationAttributeArgumentSyntax)
  override open func visit(_ node: SwiftSyntax.DynamicReplacementAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.DynamicReplacementAttributeArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.EditorPlaceholderDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.EditorPlaceholderDeclSyntax)
  override open func visit(_ node: SwiftSyntax.EditorPlaceholderExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.EditorPlaceholderExprSyntax)
  override open func visit(_ node: SwiftSyntax.EffectsAttributeArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.EffectsAttributeArgumentListSyntax)
  override open func visit(_ node: SwiftSyntax.EnumCaseDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.EnumCaseDeclSyntax)
  override open func visit(_ node: SwiftSyntax.EnumCaseElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.EnumCaseElementListSyntax)
  override open func visit(_ node: SwiftSyntax.EnumCaseElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.EnumCaseElementSyntax)
  override open func visit(_ node: SwiftSyntax.EnumCaseParameterClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.EnumCaseParameterClauseSyntax)
  override open func visit(_ node: SwiftSyntax.EnumCaseParameterListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.EnumCaseParameterListSyntax)
  override open func visit(_ node: SwiftSyntax.EnumCaseParameterSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.EnumCaseParameterSyntax)
  override open func visit(_ node: SwiftSyntax.EnumDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.EnumDeclSyntax)
  override open func visit(_ node: SwiftSyntax.ExposeAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ExposeAttributeArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.ExprListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ExprListSyntax)
  override open func visit(_ node: SwiftSyntax.ExpressionPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ExpressionPatternSyntax)
  override open func visit(_ node: SwiftSyntax.ExpressionSegmentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ExpressionSegmentSyntax)
  override open func visit(_ node: SwiftSyntax.ExpressionStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ExpressionStmtSyntax)
  override open func visit(_ node: SwiftSyntax.ExtensionDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ExtensionDeclSyntax)
  override open func visit(_ node: SwiftSyntax.FallThroughStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FallThroughStmtSyntax)
  override open func visit(_ node: SwiftSyntax.FloatLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FloatLiteralExprSyntax)
  override open func visit(_ node: SwiftSyntax.ForStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ForStmtSyntax)
  override open func visit(_ node: SwiftSyntax.ForceUnwrapExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ForceUnwrapExprSyntax)
  override open func visit(_ node: SwiftSyntax.FunctionCallExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FunctionCallExprSyntax)
  override open func visit(_ node: SwiftSyntax.FunctionDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FunctionDeclSyntax)
  override open func visit(_ node: SwiftSyntax.FunctionEffectSpecifiersSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FunctionEffectSpecifiersSyntax)
  override open func visit(_ node: SwiftSyntax.FunctionParameterClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FunctionParameterClauseSyntax)
  override open func visit(_ node: SwiftSyntax.FunctionParameterListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FunctionParameterListSyntax)
  override open func visit(_ node: SwiftSyntax.FunctionParameterSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FunctionParameterSyntax)
  override open func visit(_ node: SwiftSyntax.FunctionSignatureSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FunctionSignatureSyntax)
  override open func visit(_ node: SwiftSyntax.FunctionTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.FunctionTypeSyntax)
  override open func visit(_ node: SwiftSyntax.GenericArgumentClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericArgumentClauseSyntax)
  override open func visit(_ node: SwiftSyntax.GenericArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericArgumentListSyntax)
  override open func visit(_ node: SwiftSyntax.GenericArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericArgumentSyntax)
  override open func visit(_ node: SwiftSyntax.GenericParameterClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericParameterClauseSyntax)
  override open func visit(_ node: SwiftSyntax.GenericParameterListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericParameterListSyntax)
  override open func visit(_ node: SwiftSyntax.GenericParameterSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericParameterSyntax)
  override open func visit(_ node: SwiftSyntax.GenericRequirementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericRequirementListSyntax)
  override open func visit(_ node: SwiftSyntax.GenericRequirementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericRequirementSyntax)
  override open func visit(_ node: SwiftSyntax.GenericSpecializationExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericSpecializationExprSyntax)
  override open func visit(_ node: SwiftSyntax.GenericWhereClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GenericWhereClauseSyntax)
  override open func visit(_ node: SwiftSyntax.GuardStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.GuardStmtSyntax)
  override open func visit(_ node: SwiftSyntax.IdentifierPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IdentifierPatternSyntax)
  override open func visit(_ node: SwiftSyntax.IdentifierTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IdentifierTypeSyntax)
  override open func visit(_ node: SwiftSyntax.IfConfigClauseListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IfConfigClauseListSyntax)
  override open func visit(_ node: SwiftSyntax.IfConfigClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IfConfigClauseSyntax)
  override open func visit(_ node: SwiftSyntax.IfConfigDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IfConfigDeclSyntax)
  override open func visit(_ node: SwiftSyntax.IfExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IfExprSyntax)
  override open func visit(_ node: SwiftSyntax.ImplementsAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ImplementsAttributeArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax)
  override open func visit(_ node: SwiftSyntax.ImportDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ImportDeclSyntax)
  override open func visit(_ node: SwiftSyntax.ImportPathComponentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ImportPathComponentListSyntax)
  override open func visit(_ node: SwiftSyntax.ImportPathComponentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ImportPathComponentSyntax)
  override open func visit(_ node: SwiftSyntax.InOutExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.InOutExprSyntax)
  override open func visit(_ node: SwiftSyntax.InfixOperatorExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.InfixOperatorExprSyntax)
  override open func visit(_ node: SwiftSyntax.InheritanceClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.InheritanceClauseSyntax)
  override open func visit(_ node: SwiftSyntax.InheritedTypeListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.InheritedTypeListSyntax)
  override open func visit(_ node: SwiftSyntax.InheritedTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.InheritedTypeSyntax)
  override open func visit(_ node: SwiftSyntax.InitializerClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.InitializerClauseSyntax)
  override open func visit(_ node: SwiftSyntax.InitializerDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.InitializerDeclSyntax)
  override open func visit(_ node: SwiftSyntax.IntegerLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IntegerLiteralExprSyntax)
  override open func visit(_ node: SwiftSyntax.IsExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IsExprSyntax)
  override open func visit(_ node: SwiftSyntax.IsTypePatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.IsTypePatternSyntax)
  override open func visit(_ node: SwiftSyntax.KeyPathComponentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.KeyPathComponentListSyntax)
  override open func visit(_ node: SwiftSyntax.KeyPathComponentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.KeyPathComponentSyntax)
  override open func visit(_ node: SwiftSyntax.KeyPathExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.KeyPathExprSyntax)
  override open func visit(_ node: SwiftSyntax.KeyPathOptionalComponentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.KeyPathOptionalComponentSyntax)
  override open func visit(_ node: SwiftSyntax.KeyPathPropertyComponentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.KeyPathPropertyComponentSyntax)
  override open func visit(_ node: SwiftSyntax.KeyPathSubscriptComponentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.KeyPathSubscriptComponentSyntax)
  override open func visit(_ node: SwiftSyntax.LabeledExprListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.LabeledExprListSyntax)
  override open func visit(_ node: SwiftSyntax.LabeledExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.LabeledExprSyntax)
  override open func visit(_ node: SwiftSyntax.LabeledSpecializeArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.LabeledSpecializeArgumentSyntax)
  override open func visit(_ node: SwiftSyntax.LabeledStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.LabeledStmtSyntax)
  override open func visit(_ node: SwiftSyntax.LayoutRequirementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.LayoutRequirementSyntax)
  override open func visit(_ node: SwiftSyntax.MacroDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MacroDeclSyntax)
  override open func visit(_ node: SwiftSyntax.MacroExpansionDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MacroExpansionDeclSyntax)
  override open func visit(_ node: SwiftSyntax.MacroExpansionExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MacroExpansionExprSyntax)
  override open func visit(_ node: SwiftSyntax.MatchingPatternConditionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MatchingPatternConditionSyntax)
  override open func visit(_ node: SwiftSyntax.MemberAccessExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MemberAccessExprSyntax)
  override open func visit(_ node: SwiftSyntax.MemberBlockItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MemberBlockItemListSyntax)
  override open func visit(_ node: SwiftSyntax.MemberBlockItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MemberBlockItemSyntax)
  override open func visit(_ node: SwiftSyntax.MemberBlockSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MemberBlockSyntax)
  override open func visit(_ node: SwiftSyntax.MemberTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MemberTypeSyntax)
  override open func visit(_ node: SwiftSyntax.MetatypeTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MetatypeTypeSyntax)
  override open func visit(_ node: SwiftSyntax.MissingDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MissingDeclSyntax)
  override open func visit(_ node: SwiftSyntax.MissingExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MissingExprSyntax)
  override open func visit(_ node: SwiftSyntax.MissingPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MissingPatternSyntax)
  override open func visit(_ node: SwiftSyntax.MissingStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MissingStmtSyntax)
  override open func visit(_ node: SwiftSyntax.MissingSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MissingSyntax)
  override open func visit(_ node: SwiftSyntax.MissingTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MissingTypeSyntax)
  override open func visit(_ node: SwiftSyntax.MultipleTrailingClosureElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MultipleTrailingClosureElementListSyntax)
  override open func visit(_ node: SwiftSyntax.MultipleTrailingClosureElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.MultipleTrailingClosureElementSyntax)
  override open func visit(_ node: SwiftSyntax.NamedOpaqueReturnTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.NamedOpaqueReturnTypeSyntax)
  override open func visit(_ node: SwiftSyntax.NilLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.NilLiteralExprSyntax)
  override open func visit(_ node: SwiftSyntax.ObjCSelectorPieceListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ObjCSelectorPieceListSyntax)
  override open func visit(_ node: SwiftSyntax.ObjCSelectorPieceSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ObjCSelectorPieceSyntax)
  override open func visit(_ node: SwiftSyntax.OpaqueReturnTypeOfAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.OpaqueReturnTypeOfAttributeArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.OperatorDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.OperatorDeclSyntax)
  override open func visit(_ node: SwiftSyntax.OperatorPrecedenceAndTypesSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.OperatorPrecedenceAndTypesSyntax)
  override open func visit(_ node: SwiftSyntax.OptionalBindingConditionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.OptionalBindingConditionSyntax)
  override open func visit(_ node: SwiftSyntax.OptionalChainingExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.OptionalChainingExprSyntax)
  override open func visit(_ node: SwiftSyntax.OptionalTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.OptionalTypeSyntax)
  override open func visit(_ node: SwiftSyntax.OriginallyDefinedInAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.OriginallyDefinedInAttributeArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.PackElementExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PackElementExprSyntax)
  override open func visit(_ node: SwiftSyntax.PackElementTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PackElementTypeSyntax)
  override open func visit(_ node: SwiftSyntax.PackExpansionExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PackExpansionExprSyntax)
  override open func visit(_ node: SwiftSyntax.PackExpansionTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PackExpansionTypeSyntax)
  override open func visit(_ node: SwiftSyntax.PatternBindingListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PatternBindingListSyntax)
  override open func visit(_ node: SwiftSyntax.PatternBindingSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PatternBindingSyntax)
  override open func visit(_ node: SwiftSyntax.PatternExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PatternExprSyntax)
  override open func visit(_ node: SwiftSyntax.PlatformVersionItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PlatformVersionItemListSyntax)
  override open func visit(_ node: SwiftSyntax.PlatformVersionItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PlatformVersionItemSyntax)
  override open func visit(_ node: SwiftSyntax.PlatformVersionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PlatformVersionSyntax)
  override open func visit(_ node: SwiftSyntax.PostfixIfConfigExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PostfixIfConfigExprSyntax)
  override open func visit(_ node: SwiftSyntax.PostfixOperatorExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PostfixOperatorExprSyntax)
  override open func visit(_ node: SwiftSyntax.PoundSourceLocationArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PoundSourceLocationArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.PoundSourceLocationSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PoundSourceLocationSyntax)
  override open func visit(_ node: SwiftSyntax.PrecedenceGroupAssignmentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrecedenceGroupAssignmentSyntax)
  override open func visit(_ node: SwiftSyntax.PrecedenceGroupAssociativitySyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrecedenceGroupAssociativitySyntax)
  override open func visit(_ node: SwiftSyntax.PrecedenceGroupAttributeListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrecedenceGroupAttributeListSyntax)
  override open func visit(_ node: SwiftSyntax.PrecedenceGroupDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrecedenceGroupDeclSyntax)
  override open func visit(_ node: SwiftSyntax.PrecedenceGroupNameListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrecedenceGroupNameListSyntax)
  override open func visit(_ node: SwiftSyntax.PrecedenceGroupNameSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrecedenceGroupNameSyntax)
  override open func visit(_ node: SwiftSyntax.PrecedenceGroupRelationSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrecedenceGroupRelationSyntax)
  override open func visit(_ node: SwiftSyntax.PrefixOperatorExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrefixOperatorExprSyntax)
  override open func visit(_ node: SwiftSyntax.PrimaryAssociatedTypeClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrimaryAssociatedTypeClauseSyntax)
  override open func visit(_ node: SwiftSyntax.PrimaryAssociatedTypeListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrimaryAssociatedTypeListSyntax)
  override open func visit(_ node: SwiftSyntax.PrimaryAssociatedTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.PrimaryAssociatedTypeSyntax)
  override open func visit(_ node: SwiftSyntax.ProtocolDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ProtocolDeclSyntax)
  override open func visit(_ node: SwiftSyntax.RegexLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.RegexLiteralExprSyntax)
  override open func visit(_ node: SwiftSyntax.RepeatStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.RepeatStmtSyntax)
  override open func visit(_ node: SwiftSyntax.ReturnClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ReturnClauseSyntax)
  override open func visit(_ node: SwiftSyntax.ReturnStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ReturnStmtSyntax)
  override open func visit(_ node: SwiftSyntax.SameTypeRequirementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SameTypeRequirementSyntax)
  override open func visit(_ node: SwiftSyntax.SequenceExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SequenceExprSyntax)
  override open func visit(_ node: SwiftSyntax.SimpleStringLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SimpleStringLiteralExprSyntax)
  override open func visit(_ node: SwiftSyntax.SimpleStringLiteralSegmentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SimpleStringLiteralSegmentListSyntax)
  override open func visit(_ node: SwiftSyntax.SomeOrAnyTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SomeOrAnyTypeSyntax)
  override open func visit(_ node: SwiftSyntax.SourceFileSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SourceFileSyntax)
  override open func visit(_ node: SwiftSyntax.SpecializeAttributeArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SpecializeAttributeArgumentListSyntax)
  override open func visit(_ node: SwiftSyntax.SpecializeAvailabilityArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SpecializeAvailabilityArgumentSyntax)
  override open func visit(_ node: SwiftSyntax.SpecializeTargetFunctionArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SpecializeTargetFunctionArgumentSyntax)
  override open func visit(_ node: SwiftSyntax.StringLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.StringLiteralExprSyntax)
  override open func visit(_ node: SwiftSyntax.StringLiteralSegmentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.StringLiteralSegmentListSyntax)
  override open func visit(_ node: SwiftSyntax.StringSegmentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.StringSegmentSyntax)
  override open func visit(_ node: SwiftSyntax.StructDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.StructDeclSyntax)
  override open func visit(_ node: SwiftSyntax.SubscriptCallExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SubscriptCallExprSyntax)
  override open func visit(_ node: SwiftSyntax.SubscriptDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SubscriptDeclSyntax)
  override open func visit(_ node: SwiftSyntax.SuperExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SuperExprSyntax)
  override open func visit(_ node: SwiftSyntax.SuppressedTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SuppressedTypeSyntax)
  override open func visit(_ node: SwiftSyntax.SwitchCaseItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SwitchCaseItemListSyntax)
  override open func visit(_ node: SwiftSyntax.SwitchCaseItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SwitchCaseItemSyntax)
  override open func visit(_ node: SwiftSyntax.SwitchCaseLabelSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SwitchCaseLabelSyntax)
  override open func visit(_ node: SwiftSyntax.SwitchCaseListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SwitchCaseListSyntax)
  override open func visit(_ node: SwiftSyntax.SwitchCaseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SwitchCaseSyntax)
  override open func visit(_ node: SwiftSyntax.SwitchDefaultLabelSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SwitchDefaultLabelSyntax)
  override open func visit(_ node: SwiftSyntax.SwitchExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.SwitchExprSyntax)
  override open func visit(_ node: SwiftSyntax.TernaryExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TernaryExprSyntax)
  override open func visit(_ node: SwiftSyntax.ThrowStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ThrowStmtSyntax)
  override open func visit(_ node: SwiftSyntax.TryExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TryExprSyntax)
  override open func visit(_ node: SwiftSyntax.TupleExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TupleExprSyntax)
  override open func visit(_ node: SwiftSyntax.TuplePatternElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TuplePatternElementListSyntax)
  override open func visit(_ node: SwiftSyntax.TuplePatternElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TuplePatternElementSyntax)
  override open func visit(_ node: SwiftSyntax.TuplePatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TuplePatternSyntax)
  override open func visit(_ node: SwiftSyntax.TupleTypeElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TupleTypeElementListSyntax)
  override open func visit(_ node: SwiftSyntax.TupleTypeElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TupleTypeElementSyntax)
  override open func visit(_ node: SwiftSyntax.TupleTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TupleTypeSyntax)
  override open func visit(_ node: SwiftSyntax.TypeAliasDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TypeAliasDeclSyntax)
  override open func visit(_ node: SwiftSyntax.TypeAnnotationSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TypeAnnotationSyntax)
  override open func visit(_ node: SwiftSyntax.TypeEffectSpecifiersSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TypeEffectSpecifiersSyntax)
  override open func visit(_ node: SwiftSyntax.TypeExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TypeExprSyntax)
  override open func visit(_ node: SwiftSyntax.TypeInitializerClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.TypeInitializerClauseSyntax)
  override open func visit(_ node: SwiftSyntax.UnavailableFromAsyncAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.UnavailableFromAsyncAttributeArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.UnderscorePrivateAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.UnderscorePrivateAttributeArgumentsSyntax)
  override open func visit(_ node: SwiftSyntax.UnexpectedNodesSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.UnexpectedNodesSyntax)
  override open func visit(_ node: SwiftSyntax.UnresolvedAsExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.UnresolvedAsExprSyntax)
  override open func visit(_ node: SwiftSyntax.UnresolvedIsExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.UnresolvedIsExprSyntax)
  override open func visit(_ node: SwiftSyntax.UnresolvedTernaryExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.UnresolvedTernaryExprSyntax)
  override open func visit(_ node: SwiftSyntax.ValueBindingPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.ValueBindingPatternSyntax)
  override open func visit(_ node: SwiftSyntax.VariableDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.VariableDeclSyntax)
  override open func visit(_ node: SwiftSyntax.VersionComponentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.VersionComponentListSyntax)
  override open func visit(_ node: SwiftSyntax.VersionComponentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.VersionComponentSyntax)
  override open func visit(_ node: SwiftSyntax.VersionTupleSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.VersionTupleSyntax)
  override open func visit(_ node: SwiftSyntax.WhereClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.WhereClauseSyntax)
  override open func visit(_ node: SwiftSyntax.WhileStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.WhileStmtSyntax)
  override open func visit(_ node: SwiftSyntax.WildcardPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.WildcardPatternSyntax)
  override open func visit(_ node: SwiftSyntax.YieldStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.YieldStmtSyntax)
  override open func visit(_ node: SwiftSyntax.YieldedExpressionListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.YieldedExpressionListSyntax)
  override open func visit(_ node: SwiftSyntax.YieldedExpressionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.YieldedExpressionSyntax)
  override open func visit(_ node: SwiftSyntax.YieldedExpressionsClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  override open func visitPost(_ node: SwiftSyntax.YieldedExpressionsClauseSyntax)
  override public init(viewMode: SwiftSyntax.SyntaxTreeViewMode)
  @objc deinit
}
public protocol DeclSyntaxProtocol : SwiftSyntax.SyntaxProtocol {
}
extension SwiftSyntax.Syntax {
  public func isProtocol(_: (any SwiftSyntax.DeclSyntaxProtocol).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.DeclSyntaxProtocol).Type) -> (any SwiftSyntax.DeclSyntaxProtocol)?
}
public struct DeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init(_ syntax: some DeclSyntaxProtocol)
  public init?(_ syntax: (some DeclSyntaxProtocol)?)
  public init(fromProtocol syntax: any SwiftSyntax.DeclSyntaxProtocol)
  public init?(fromProtocol syntax: (any SwiftSyntax.DeclSyntaxProtocol)?)
  public init?(_ node: some SyntaxProtocol)
  public func `is`<S>(_ syntaxType: S.Type) -> Swift.Bool where S : SwiftSyntax.DeclSyntaxProtocol
  public func `as`<S>(_ syntaxType: S.Type) -> S? where S : SwiftSyntax.DeclSyntaxProtocol
  public func cast<S>(_ syntaxType: S.Type) -> S where S : SwiftSyntax.DeclSyntaxProtocol
  @available(*, deprecated, message: "Expression always evaluates to true")
  public func isProtocol(_: (any SwiftSyntax.DeclSyntaxProtocol).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.DeclSyntaxProtocol).Type) -> any SwiftSyntax.DeclSyntaxProtocol
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public protocol ExprSyntaxProtocol : SwiftSyntax.SyntaxProtocol {
}
extension SwiftSyntax.Syntax {
  public func isProtocol(_: (any SwiftSyntax.ExprSyntaxProtocol).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.ExprSyntaxProtocol).Type) -> (any SwiftSyntax.ExprSyntaxProtocol)?
}
public struct ExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init(_ syntax: some ExprSyntaxProtocol)
  public init?(_ syntax: (some ExprSyntaxProtocol)?)
  public init(fromProtocol syntax: any SwiftSyntax.ExprSyntaxProtocol)
  public init?(fromProtocol syntax: (any SwiftSyntax.ExprSyntaxProtocol)?)
  public init?(_ node: some SyntaxProtocol)
  public func `is`<S>(_ syntaxType: S.Type) -> Swift.Bool where S : SwiftSyntax.ExprSyntaxProtocol
  public func `as`<S>(_ syntaxType: S.Type) -> S? where S : SwiftSyntax.ExprSyntaxProtocol
  public func cast<S>(_ syntaxType: S.Type) -> S where S : SwiftSyntax.ExprSyntaxProtocol
  @available(*, deprecated, message: "Expression always evaluates to true")
  public func isProtocol(_: (any SwiftSyntax.ExprSyntaxProtocol).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.ExprSyntaxProtocol).Type) -> any SwiftSyntax.ExprSyntaxProtocol
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public protocol PatternSyntaxProtocol : SwiftSyntax.SyntaxProtocol {
}
extension SwiftSyntax.Syntax {
  public func isProtocol(_: (any SwiftSyntax.PatternSyntaxProtocol).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.PatternSyntaxProtocol).Type) -> (any SwiftSyntax.PatternSyntaxProtocol)?
}
public struct PatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init(_ syntax: some PatternSyntaxProtocol)
  public init?(_ syntax: (some PatternSyntaxProtocol)?)
  public init(fromProtocol syntax: any SwiftSyntax.PatternSyntaxProtocol)
  public init?(fromProtocol syntax: (any SwiftSyntax.PatternSyntaxProtocol)?)
  public init?(_ node: some SyntaxProtocol)
  public func `is`<S>(_ syntaxType: S.Type) -> Swift.Bool where S : SwiftSyntax.PatternSyntaxProtocol
  public func `as`<S>(_ syntaxType: S.Type) -> S? where S : SwiftSyntax.PatternSyntaxProtocol
  public func cast<S>(_ syntaxType: S.Type) -> S where S : SwiftSyntax.PatternSyntaxProtocol
  @available(*, deprecated, message: "Expression always evaluates to true")
  public func isProtocol(_: (any SwiftSyntax.PatternSyntaxProtocol).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.PatternSyntaxProtocol).Type) -> any SwiftSyntax.PatternSyntaxProtocol
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public protocol StmtSyntaxProtocol : SwiftSyntax.SyntaxProtocol {
}
extension SwiftSyntax.Syntax {
  public func isProtocol(_: (any SwiftSyntax.StmtSyntaxProtocol).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.StmtSyntaxProtocol).Type) -> (any SwiftSyntax.StmtSyntaxProtocol)?
}
public struct StmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init(_ syntax: some StmtSyntaxProtocol)
  public init?(_ syntax: (some StmtSyntaxProtocol)?)
  public init(fromProtocol syntax: any SwiftSyntax.StmtSyntaxProtocol)
  public init?(fromProtocol syntax: (any SwiftSyntax.StmtSyntaxProtocol)?)
  public init?(_ node: some SyntaxProtocol)
  public func `is`<S>(_ syntaxType: S.Type) -> Swift.Bool where S : SwiftSyntax.StmtSyntaxProtocol
  public func `as`<S>(_ syntaxType: S.Type) -> S? where S : SwiftSyntax.StmtSyntaxProtocol
  public func cast<S>(_ syntaxType: S.Type) -> S where S : SwiftSyntax.StmtSyntaxProtocol
  @available(*, deprecated, message: "Expression always evaluates to true")
  public func isProtocol(_: (any SwiftSyntax.StmtSyntaxProtocol).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.StmtSyntaxProtocol).Type) -> any SwiftSyntax.StmtSyntaxProtocol
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public protocol TypeSyntaxProtocol : SwiftSyntax.SyntaxProtocol {
}
extension SwiftSyntax.Syntax {
  public func isProtocol(_: (any SwiftSyntax.TypeSyntaxProtocol).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.TypeSyntaxProtocol).Type) -> (any SwiftSyntax.TypeSyntaxProtocol)?
}
public struct TypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init(_ syntax: some TypeSyntaxProtocol)
  public init?(_ syntax: (some TypeSyntaxProtocol)?)
  public init(fromProtocol syntax: any SwiftSyntax.TypeSyntaxProtocol)
  public init?(fromProtocol syntax: (any SwiftSyntax.TypeSyntaxProtocol)?)
  public init?(_ node: some SyntaxProtocol)
  public func `is`<S>(_ syntaxType: S.Type) -> Swift.Bool where S : SwiftSyntax.TypeSyntaxProtocol
  public func `as`<S>(_ syntaxType: S.Type) -> S? where S : SwiftSyntax.TypeSyntaxProtocol
  public func cast<S>(_ syntaxType: S.Type) -> S where S : SwiftSyntax.TypeSyntaxProtocol
  @available(*, deprecated, message: "Expression always evaluates to true")
  public func isProtocol(_: (any SwiftSyntax.TypeSyntaxProtocol).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.TypeSyntaxProtocol).Type) -> any SwiftSyntax.TypeSyntaxProtocol
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.Syntax {
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
}
public struct AccessorDeclListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.AccessorDeclSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.AccessorDeclListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.AccessorDeclListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.AccessorDeclListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.AccessorDeclListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct ArrayElementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.ArrayElementSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.ArrayElementListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.ArrayElementListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.ArrayElementListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.ArrayElementListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct AttributeListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public enum Element : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case attribute(SwiftSyntax.AttributeSyntax)
    case ifConfigDecl(SwiftSyntax.IfConfigDeclSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.AttributeSyntax)
    public init(_ node: SwiftSyntax.IfConfigDeclSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.AttributeListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.AttributeListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.AttributeListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.AttributeListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct AvailabilityArgumentListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.AvailabilityArgumentSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.AvailabilityArgumentListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.AvailabilityArgumentListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.AvailabilityArgumentListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.AvailabilityArgumentListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct CatchClauseListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.CatchClauseSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.CatchClauseListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.CatchClauseListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.CatchClauseListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.CatchClauseListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct CatchItemListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.CatchItemSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.CatchItemListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.CatchItemListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.CatchItemListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.CatchItemListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct ClosureCaptureListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.ClosureCaptureSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.ClosureCaptureListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.ClosureCaptureListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.ClosureCaptureListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.ClosureCaptureListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct ClosureParameterListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.ClosureParameterSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.ClosureParameterListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.ClosureParameterListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.ClosureParameterListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.ClosureParameterListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct ClosureShorthandParameterListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.ClosureShorthandParameterSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.ClosureShorthandParameterListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.ClosureShorthandParameterListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.ClosureShorthandParameterListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.ClosureShorthandParameterListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct CodeBlockItemListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.CodeBlockItemSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.CodeBlockItemListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.CodeBlockItemListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.CodeBlockItemListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.CodeBlockItemListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct CompositionTypeElementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.CompositionTypeElementSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.CompositionTypeElementListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.CompositionTypeElementListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.CompositionTypeElementListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.CompositionTypeElementListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct ConditionElementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.ConditionElementSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.ConditionElementListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.ConditionElementListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.ConditionElementListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.ConditionElementListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct DeclModifierListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.DeclModifierSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.DeclModifierListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.DeclModifierListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.DeclModifierListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.DeclModifierListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct DeclNameArgumentListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.DeclNameArgumentSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.DeclNameArgumentListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.DeclNameArgumentListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.DeclNameArgumentListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.DeclNameArgumentListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct DesignatedTypeListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.DesignatedTypeSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.DesignatedTypeListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.DesignatedTypeListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.DesignatedTypeListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.DesignatedTypeListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct DictionaryElementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.DictionaryElementSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.DictionaryElementListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.DictionaryElementListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.DictionaryElementListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.DictionaryElementListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct DifferentiabilityArgumentListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.DifferentiabilityArgumentSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.DifferentiabilityArgumentListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.DifferentiabilityArgumentListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.DifferentiabilityArgumentListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.DifferentiabilityArgumentListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct DocumentationAttributeArgumentListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.DocumentationAttributeArgumentSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.DocumentationAttributeArgumentListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.DocumentationAttributeArgumentListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.DocumentationAttributeArgumentListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.DocumentationAttributeArgumentListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct EffectsAttributeArgumentListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.TokenSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.EffectsAttributeArgumentListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.EffectsAttributeArgumentListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.EffectsAttributeArgumentListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.EffectsAttributeArgumentListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct EnumCaseElementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.EnumCaseElementSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.EnumCaseElementListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.EnumCaseElementListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.EnumCaseElementListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.EnumCaseElementListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct EnumCaseParameterListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.EnumCaseParameterSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.EnumCaseParameterListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.EnumCaseParameterListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.EnumCaseParameterListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.EnumCaseParameterListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct ExprListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.ExprSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.ExprListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.ExprListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.ExprListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.ExprListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct FunctionParameterListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.FunctionParameterSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.FunctionParameterListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.FunctionParameterListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.FunctionParameterListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.FunctionParameterListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct GenericArgumentListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.GenericArgumentSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.GenericArgumentListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.GenericArgumentListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.GenericArgumentListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.GenericArgumentListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct GenericParameterListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.GenericParameterSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.GenericParameterListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.GenericParameterListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.GenericParameterListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.GenericParameterListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct GenericRequirementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.GenericRequirementSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.GenericRequirementListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.GenericRequirementListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.GenericRequirementListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.GenericRequirementListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct IfConfigClauseListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.IfConfigClauseSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.IfConfigClauseListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.IfConfigClauseListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.IfConfigClauseListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.IfConfigClauseListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct ImportPathComponentListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.ImportPathComponentSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.ImportPathComponentListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.ImportPathComponentListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.ImportPathComponentListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.ImportPathComponentListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct InheritedTypeListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.InheritedTypeSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.InheritedTypeListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.InheritedTypeListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.InheritedTypeListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.InheritedTypeListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct KeyPathComponentListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.KeyPathComponentSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.KeyPathComponentListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.KeyPathComponentListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.KeyPathComponentListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.KeyPathComponentListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct LabeledExprListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.LabeledExprSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.LabeledExprListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.LabeledExprListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.LabeledExprListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.LabeledExprListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct MemberBlockItemListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.MemberBlockItemSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.MemberBlockItemListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.MemberBlockItemListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.MemberBlockItemListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.MemberBlockItemListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct MultipleTrailingClosureElementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.MultipleTrailingClosureElementSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.MultipleTrailingClosureElementListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.MultipleTrailingClosureElementListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.MultipleTrailingClosureElementListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.MultipleTrailingClosureElementListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct ObjCSelectorPieceListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.ObjCSelectorPieceSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.ObjCSelectorPieceListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.ObjCSelectorPieceListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.ObjCSelectorPieceListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.ObjCSelectorPieceListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct PatternBindingListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.PatternBindingSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.PatternBindingListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.PatternBindingListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.PatternBindingListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.PatternBindingListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct PlatformVersionItemListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.PlatformVersionItemSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.PlatformVersionItemListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.PlatformVersionItemListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.PlatformVersionItemListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.PlatformVersionItemListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct PrecedenceGroupAttributeListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public enum Element : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case precedenceGroupRelation(SwiftSyntax.PrecedenceGroupRelationSyntax)
    case precedenceGroupAssignment(SwiftSyntax.PrecedenceGroupAssignmentSyntax)
    case precedenceGroupAssociativity(SwiftSyntax.PrecedenceGroupAssociativitySyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.PrecedenceGroupRelationSyntax)
    public init(_ node: SwiftSyntax.PrecedenceGroupAssignmentSyntax)
    public init(_ node: SwiftSyntax.PrecedenceGroupAssociativitySyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.PrecedenceGroupAttributeListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.PrecedenceGroupAttributeListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.PrecedenceGroupAttributeListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.PrecedenceGroupAttributeListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct PrecedenceGroupNameListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.PrecedenceGroupNameSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.PrecedenceGroupNameListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.PrecedenceGroupNameListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.PrecedenceGroupNameListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.PrecedenceGroupNameListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct PrimaryAssociatedTypeListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.PrimaryAssociatedTypeSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.PrimaryAssociatedTypeListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.PrimaryAssociatedTypeListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.PrimaryAssociatedTypeListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.PrimaryAssociatedTypeListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct SimpleStringLiteralSegmentListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.StringSegmentSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.SimpleStringLiteralSegmentListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.SimpleStringLiteralSegmentListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.SimpleStringLiteralSegmentListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.SimpleStringLiteralSegmentListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct SpecializeAttributeArgumentListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public enum Element : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case labeledSpecializeArgument(SwiftSyntax.LabeledSpecializeArgumentSyntax)
    case specializeAvailabilityArgument(SwiftSyntax.SpecializeAvailabilityArgumentSyntax)
    case specializeTargetFunctionArgument(SwiftSyntax.SpecializeTargetFunctionArgumentSyntax)
    case genericWhereClause(SwiftSyntax.GenericWhereClauseSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.LabeledSpecializeArgumentSyntax)
    public init(_ node: SwiftSyntax.SpecializeAvailabilityArgumentSyntax)
    public init(_ node: SwiftSyntax.SpecializeTargetFunctionArgumentSyntax)
    public init(_ node: SwiftSyntax.GenericWhereClauseSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.SpecializeAttributeArgumentListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.SpecializeAttributeArgumentListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.SpecializeAttributeArgumentListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.SpecializeAttributeArgumentListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct StringLiteralSegmentListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public enum Element : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case stringSegment(SwiftSyntax.StringSegmentSyntax)
    case expressionSegment(SwiftSyntax.ExpressionSegmentSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.StringSegmentSyntax)
    public init(_ node: SwiftSyntax.ExpressionSegmentSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.StringLiteralSegmentListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.StringLiteralSegmentListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.StringLiteralSegmentListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.StringLiteralSegmentListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct SwitchCaseItemListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.SwitchCaseItemSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.SwitchCaseItemListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.SwitchCaseItemListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.SwitchCaseItemListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.SwitchCaseItemListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct SwitchCaseListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public enum Element : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case switchCase(SwiftSyntax.SwitchCaseSyntax)
    case ifConfigDecl(SwiftSyntax.IfConfigDeclSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.SwitchCaseSyntax)
    public init(_ node: SwiftSyntax.IfConfigDeclSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.SwitchCaseListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.SwitchCaseListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.SwitchCaseListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.SwitchCaseListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct TuplePatternElementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.TuplePatternElementSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.TuplePatternElementListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.TuplePatternElementListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.TuplePatternElementListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.TuplePatternElementListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct TupleTypeElementListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.TupleTypeElementSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.TupleTypeElementListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.TupleTypeElementListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.TupleTypeElementListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.TupleTypeElementListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct UnexpectedNodesSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.Syntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.UnexpectedNodesSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.UnexpectedNodesSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.UnexpectedNodesSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.UnexpectedNodesSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct VersionComponentListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.VersionComponentSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.VersionComponentListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.VersionComponentListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.VersionComponentListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.VersionComponentListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public struct YieldedExpressionListSyntax : SwiftSyntax.SyntaxCollection, SwiftSyntax.SyntaxHashable {
  public typealias Element = SwiftSyntax.YieldedExpressionSyntax
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public static let syntaxKind: SwiftSyntax.SyntaxKind
  public typealias ArrayLiteralElement = SwiftSyntax.YieldedExpressionListSyntax.Element
  public typealias Index = SwiftSyntax.SyntaxChildrenIndex
  public typealias Indices = Swift.DefaultIndices<SwiftSyntax.YieldedExpressionListSyntax>
  public typealias Iterator = SwiftSyntax.SyntaxCollectionIterator<SwiftSyntax.YieldedExpressionListSyntax.Element>
  public typealias SubSequence = Swift.Slice<SwiftSyntax.YieldedExpressionListSyntax>
  public var hashValue: Swift.Int {
    get
  }
}
public enum SyntaxEnum {
  case token(SwiftSyntax.TokenSyntax)
  case accessorBlock(SwiftSyntax.AccessorBlockSyntax)
  case accessorDeclList(SwiftSyntax.AccessorDeclListSyntax)
  case accessorDecl(SwiftSyntax.AccessorDeclSyntax)
  case accessorEffectSpecifiers(SwiftSyntax.AccessorEffectSpecifiersSyntax)
  case accessorParameters(SwiftSyntax.AccessorParametersSyntax)
  case actorDecl(SwiftSyntax.ActorDeclSyntax)
  case arrayElementList(SwiftSyntax.ArrayElementListSyntax)
  case arrayElement(SwiftSyntax.ArrayElementSyntax)
  case arrayExpr(SwiftSyntax.ArrayExprSyntax)
  case arrayType(SwiftSyntax.ArrayTypeSyntax)
  case arrowExpr(SwiftSyntax.ArrowExprSyntax)
  case asExpr(SwiftSyntax.AsExprSyntax)
  case assignmentExpr(SwiftSyntax.AssignmentExprSyntax)
  case associatedTypeDecl(SwiftSyntax.AssociatedTypeDeclSyntax)
  case attributeList(SwiftSyntax.AttributeListSyntax)
  case attribute(SwiftSyntax.AttributeSyntax)
  case attributedType(SwiftSyntax.AttributedTypeSyntax)
  case availabilityArgumentList(SwiftSyntax.AvailabilityArgumentListSyntax)
  case availabilityArgument(SwiftSyntax.AvailabilityArgumentSyntax)
  case availabilityCondition(SwiftSyntax.AvailabilityConditionSyntax)
  case availabilityLabeledArgument(SwiftSyntax.AvailabilityLabeledArgumentSyntax)
  case awaitExpr(SwiftSyntax.AwaitExprSyntax)
  case backDeployedAttributeArguments(SwiftSyntax.BackDeployedAttributeArgumentsSyntax)
  case binaryOperatorExpr(SwiftSyntax.BinaryOperatorExprSyntax)
  case booleanLiteralExpr(SwiftSyntax.BooleanLiteralExprSyntax)
  case borrowExpr(SwiftSyntax.BorrowExprSyntax)
  case breakStmt(SwiftSyntax.BreakStmtSyntax)
  case canImportExpr(SwiftSyntax.CanImportExprSyntax)
  case canImportVersionInfo(SwiftSyntax.CanImportVersionInfoSyntax)
  case catchClauseList(SwiftSyntax.CatchClauseListSyntax)
  case catchClause(SwiftSyntax.CatchClauseSyntax)
  case catchItemList(SwiftSyntax.CatchItemListSyntax)
  case catchItem(SwiftSyntax.CatchItemSyntax)
  case classDecl(SwiftSyntax.ClassDeclSyntax)
  case classRestrictionType(SwiftSyntax.ClassRestrictionTypeSyntax)
  case closureCaptureClause(SwiftSyntax.ClosureCaptureClauseSyntax)
  case closureCaptureList(SwiftSyntax.ClosureCaptureListSyntax)
  case closureCaptureSpecifier(SwiftSyntax.ClosureCaptureSpecifierSyntax)
  case closureCapture(SwiftSyntax.ClosureCaptureSyntax)
  case closureExpr(SwiftSyntax.ClosureExprSyntax)
  case closureParameterClause(SwiftSyntax.ClosureParameterClauseSyntax)
  case closureParameterList(SwiftSyntax.ClosureParameterListSyntax)
  case closureParameter(SwiftSyntax.ClosureParameterSyntax)
  case closureShorthandParameterList(SwiftSyntax.ClosureShorthandParameterListSyntax)
  case closureShorthandParameter(SwiftSyntax.ClosureShorthandParameterSyntax)
  case closureSignature(SwiftSyntax.ClosureSignatureSyntax)
  case codeBlockItemList(SwiftSyntax.CodeBlockItemListSyntax)
  case codeBlockItem(SwiftSyntax.CodeBlockItemSyntax)
  case codeBlock(SwiftSyntax.CodeBlockSyntax)
  case compositionTypeElementList(SwiftSyntax.CompositionTypeElementListSyntax)
  case compositionTypeElement(SwiftSyntax.CompositionTypeElementSyntax)
  case compositionType(SwiftSyntax.CompositionTypeSyntax)
  case conditionElementList(SwiftSyntax.ConditionElementListSyntax)
  case conditionElement(SwiftSyntax.ConditionElementSyntax)
  case conformanceRequirement(SwiftSyntax.ConformanceRequirementSyntax)
  case consumeExpr(SwiftSyntax.ConsumeExprSyntax)
  case continueStmt(SwiftSyntax.ContinueStmtSyntax)
  case conventionAttributeArguments(SwiftSyntax.ConventionAttributeArgumentsSyntax)
  case conventionWitnessMethodAttributeArguments(SwiftSyntax.ConventionWitnessMethodAttributeArgumentsSyntax)
  case copyExpr(SwiftSyntax.CopyExprSyntax)
  case declModifierDetail(SwiftSyntax.DeclModifierDetailSyntax)
  case declModifierList(SwiftSyntax.DeclModifierListSyntax)
  case declModifier(SwiftSyntax.DeclModifierSyntax)
  case declNameArgumentList(SwiftSyntax.DeclNameArgumentListSyntax)
  case declNameArgument(SwiftSyntax.DeclNameArgumentSyntax)
  case declNameArguments(SwiftSyntax.DeclNameArgumentsSyntax)
  case declReferenceExpr(SwiftSyntax.DeclReferenceExprSyntax)
  case deferStmt(SwiftSyntax.DeferStmtSyntax)
  case deinitializerDecl(SwiftSyntax.DeinitializerDeclSyntax)
  case deinitializerEffectSpecifiers(SwiftSyntax.DeinitializerEffectSpecifiersSyntax)
  case derivativeAttributeArguments(SwiftSyntax.DerivativeAttributeArgumentsSyntax)
  case designatedTypeList(SwiftSyntax.DesignatedTypeListSyntax)
  case designatedType(SwiftSyntax.DesignatedTypeSyntax)
  case dictionaryElementList(SwiftSyntax.DictionaryElementListSyntax)
  case dictionaryElement(SwiftSyntax.DictionaryElementSyntax)
  case dictionaryExpr(SwiftSyntax.DictionaryExprSyntax)
  case dictionaryType(SwiftSyntax.DictionaryTypeSyntax)
  case differentiabilityArgumentList(SwiftSyntax.DifferentiabilityArgumentListSyntax)
  case differentiabilityArgument(SwiftSyntax.DifferentiabilityArgumentSyntax)
  case differentiabilityArguments(SwiftSyntax.DifferentiabilityArgumentsSyntax)
  case differentiabilityWithRespectToArgument(SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax)
  case differentiableAttributeArguments(SwiftSyntax.DifferentiableAttributeArgumentsSyntax)
  case discardAssignmentExpr(SwiftSyntax.DiscardAssignmentExprSyntax)
  case discardStmt(SwiftSyntax.DiscardStmtSyntax)
  case doStmt(SwiftSyntax.DoStmtSyntax)
  case documentationAttributeArgumentList(SwiftSyntax.DocumentationAttributeArgumentListSyntax)
  case documentationAttributeArgument(SwiftSyntax.DocumentationAttributeArgumentSyntax)
  case dynamicReplacementAttributeArguments(SwiftSyntax.DynamicReplacementAttributeArgumentsSyntax)
  case editorPlaceholderDecl(SwiftSyntax.EditorPlaceholderDeclSyntax)
  case editorPlaceholderExpr(SwiftSyntax.EditorPlaceholderExprSyntax)
  case effectsAttributeArgumentList(SwiftSyntax.EffectsAttributeArgumentListSyntax)
  case enumCaseDecl(SwiftSyntax.EnumCaseDeclSyntax)
  case enumCaseElementList(SwiftSyntax.EnumCaseElementListSyntax)
  case enumCaseElement(SwiftSyntax.EnumCaseElementSyntax)
  case enumCaseParameterClause(SwiftSyntax.EnumCaseParameterClauseSyntax)
  case enumCaseParameterList(SwiftSyntax.EnumCaseParameterListSyntax)
  case enumCaseParameter(SwiftSyntax.EnumCaseParameterSyntax)
  case enumDecl(SwiftSyntax.EnumDeclSyntax)
  case exposeAttributeArguments(SwiftSyntax.ExposeAttributeArgumentsSyntax)
  case exprList(SwiftSyntax.ExprListSyntax)
  case expressionPattern(SwiftSyntax.ExpressionPatternSyntax)
  case expressionSegment(SwiftSyntax.ExpressionSegmentSyntax)
  case expressionStmt(SwiftSyntax.ExpressionStmtSyntax)
  case extensionDecl(SwiftSyntax.ExtensionDeclSyntax)
  case fallThroughStmt(SwiftSyntax.FallThroughStmtSyntax)
  case floatLiteralExpr(SwiftSyntax.FloatLiteralExprSyntax)
  case forStmt(SwiftSyntax.ForStmtSyntax)
  case forceUnwrapExpr(SwiftSyntax.ForceUnwrapExprSyntax)
  case functionCallExpr(SwiftSyntax.FunctionCallExprSyntax)
  case functionDecl(SwiftSyntax.FunctionDeclSyntax)
  case functionEffectSpecifiers(SwiftSyntax.FunctionEffectSpecifiersSyntax)
  case functionParameterClause(SwiftSyntax.FunctionParameterClauseSyntax)
  case functionParameterList(SwiftSyntax.FunctionParameterListSyntax)
  case functionParameter(SwiftSyntax.FunctionParameterSyntax)
  case functionSignature(SwiftSyntax.FunctionSignatureSyntax)
  case functionType(SwiftSyntax.FunctionTypeSyntax)
  case genericArgumentClause(SwiftSyntax.GenericArgumentClauseSyntax)
  case genericArgumentList(SwiftSyntax.GenericArgumentListSyntax)
  case genericArgument(SwiftSyntax.GenericArgumentSyntax)
  case genericParameterClause(SwiftSyntax.GenericParameterClauseSyntax)
  case genericParameterList(SwiftSyntax.GenericParameterListSyntax)
  case genericParameter(SwiftSyntax.GenericParameterSyntax)
  case genericRequirementList(SwiftSyntax.GenericRequirementListSyntax)
  case genericRequirement(SwiftSyntax.GenericRequirementSyntax)
  case genericSpecializationExpr(SwiftSyntax.GenericSpecializationExprSyntax)
  case genericWhereClause(SwiftSyntax.GenericWhereClauseSyntax)
  case guardStmt(SwiftSyntax.GuardStmtSyntax)
  case identifierPattern(SwiftSyntax.IdentifierPatternSyntax)
  case identifierType(SwiftSyntax.IdentifierTypeSyntax)
  case ifConfigClauseList(SwiftSyntax.IfConfigClauseListSyntax)
  case ifConfigClause(SwiftSyntax.IfConfigClauseSyntax)
  case ifConfigDecl(SwiftSyntax.IfConfigDeclSyntax)
  case ifExpr(SwiftSyntax.IfExprSyntax)
  case implementsAttributeArguments(SwiftSyntax.ImplementsAttributeArgumentsSyntax)
  case implicitlyUnwrappedOptionalType(SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax)
  case importDecl(SwiftSyntax.ImportDeclSyntax)
  case importPathComponentList(SwiftSyntax.ImportPathComponentListSyntax)
  case importPathComponent(SwiftSyntax.ImportPathComponentSyntax)
  case inOutExpr(SwiftSyntax.InOutExprSyntax)
  case infixOperatorExpr(SwiftSyntax.InfixOperatorExprSyntax)
  case inheritanceClause(SwiftSyntax.InheritanceClauseSyntax)
  case inheritedTypeList(SwiftSyntax.InheritedTypeListSyntax)
  case inheritedType(SwiftSyntax.InheritedTypeSyntax)
  case initializerClause(SwiftSyntax.InitializerClauseSyntax)
  case initializerDecl(SwiftSyntax.InitializerDeclSyntax)
  case integerLiteralExpr(SwiftSyntax.IntegerLiteralExprSyntax)
  case isExpr(SwiftSyntax.IsExprSyntax)
  case isTypePattern(SwiftSyntax.IsTypePatternSyntax)
  case keyPathComponentList(SwiftSyntax.KeyPathComponentListSyntax)
  case keyPathComponent(SwiftSyntax.KeyPathComponentSyntax)
  case keyPathExpr(SwiftSyntax.KeyPathExprSyntax)
  case keyPathOptionalComponent(SwiftSyntax.KeyPathOptionalComponentSyntax)
  case keyPathPropertyComponent(SwiftSyntax.KeyPathPropertyComponentSyntax)
  case keyPathSubscriptComponent(SwiftSyntax.KeyPathSubscriptComponentSyntax)
  case labeledExprList(SwiftSyntax.LabeledExprListSyntax)
  case labeledExpr(SwiftSyntax.LabeledExprSyntax)
  case labeledSpecializeArgument(SwiftSyntax.LabeledSpecializeArgumentSyntax)
  case labeledStmt(SwiftSyntax.LabeledStmtSyntax)
  case layoutRequirement(SwiftSyntax.LayoutRequirementSyntax)
  case macroDecl(SwiftSyntax.MacroDeclSyntax)
  case macroExpansionDecl(SwiftSyntax.MacroExpansionDeclSyntax)
  case macroExpansionExpr(SwiftSyntax.MacroExpansionExprSyntax)
  case matchingPatternCondition(SwiftSyntax.MatchingPatternConditionSyntax)
  case memberAccessExpr(SwiftSyntax.MemberAccessExprSyntax)
  case memberBlockItemList(SwiftSyntax.MemberBlockItemListSyntax)
  case memberBlockItem(SwiftSyntax.MemberBlockItemSyntax)
  case memberBlock(SwiftSyntax.MemberBlockSyntax)
  case memberType(SwiftSyntax.MemberTypeSyntax)
  case metatypeType(SwiftSyntax.MetatypeTypeSyntax)
  case missingDecl(SwiftSyntax.MissingDeclSyntax)
  case missingExpr(SwiftSyntax.MissingExprSyntax)
  case missingPattern(SwiftSyntax.MissingPatternSyntax)
  case missingStmt(SwiftSyntax.MissingStmtSyntax)
  case missing(SwiftSyntax.MissingSyntax)
  case missingType(SwiftSyntax.MissingTypeSyntax)
  case multipleTrailingClosureElementList(SwiftSyntax.MultipleTrailingClosureElementListSyntax)
  case multipleTrailingClosureElement(SwiftSyntax.MultipleTrailingClosureElementSyntax)
  case namedOpaqueReturnType(SwiftSyntax.NamedOpaqueReturnTypeSyntax)
  case nilLiteralExpr(SwiftSyntax.NilLiteralExprSyntax)
  case objCSelectorPieceList(SwiftSyntax.ObjCSelectorPieceListSyntax)
  case objCSelectorPiece(SwiftSyntax.ObjCSelectorPieceSyntax)
  case opaqueReturnTypeOfAttributeArguments(SwiftSyntax.OpaqueReturnTypeOfAttributeArgumentsSyntax)
  case operatorDecl(SwiftSyntax.OperatorDeclSyntax)
  case operatorPrecedenceAndTypes(SwiftSyntax.OperatorPrecedenceAndTypesSyntax)
  case optionalBindingCondition(SwiftSyntax.OptionalBindingConditionSyntax)
  case optionalChainingExpr(SwiftSyntax.OptionalChainingExprSyntax)
  case optionalType(SwiftSyntax.OptionalTypeSyntax)
  case originallyDefinedInAttributeArguments(SwiftSyntax.OriginallyDefinedInAttributeArgumentsSyntax)
  case packElementExpr(SwiftSyntax.PackElementExprSyntax)
  case packElementType(SwiftSyntax.PackElementTypeSyntax)
  case packExpansionExpr(SwiftSyntax.PackExpansionExprSyntax)
  case packExpansionType(SwiftSyntax.PackExpansionTypeSyntax)
  case patternBindingList(SwiftSyntax.PatternBindingListSyntax)
  case patternBinding(SwiftSyntax.PatternBindingSyntax)
  case patternExpr(SwiftSyntax.PatternExprSyntax)
  case platformVersionItemList(SwiftSyntax.PlatformVersionItemListSyntax)
  case platformVersionItem(SwiftSyntax.PlatformVersionItemSyntax)
  case platformVersion(SwiftSyntax.PlatformVersionSyntax)
  case postfixIfConfigExpr(SwiftSyntax.PostfixIfConfigExprSyntax)
  case postfixOperatorExpr(SwiftSyntax.PostfixOperatorExprSyntax)
  case poundSourceLocationArguments(SwiftSyntax.PoundSourceLocationArgumentsSyntax)
  case poundSourceLocation(SwiftSyntax.PoundSourceLocationSyntax)
  case precedenceGroupAssignment(SwiftSyntax.PrecedenceGroupAssignmentSyntax)
  case precedenceGroupAssociativity(SwiftSyntax.PrecedenceGroupAssociativitySyntax)
  case precedenceGroupAttributeList(SwiftSyntax.PrecedenceGroupAttributeListSyntax)
  case precedenceGroupDecl(SwiftSyntax.PrecedenceGroupDeclSyntax)
  case precedenceGroupNameList(SwiftSyntax.PrecedenceGroupNameListSyntax)
  case precedenceGroupName(SwiftSyntax.PrecedenceGroupNameSyntax)
  case precedenceGroupRelation(SwiftSyntax.PrecedenceGroupRelationSyntax)
  case prefixOperatorExpr(SwiftSyntax.PrefixOperatorExprSyntax)
  case primaryAssociatedTypeClause(SwiftSyntax.PrimaryAssociatedTypeClauseSyntax)
  case primaryAssociatedTypeList(SwiftSyntax.PrimaryAssociatedTypeListSyntax)
  case primaryAssociatedType(SwiftSyntax.PrimaryAssociatedTypeSyntax)
  case protocolDecl(SwiftSyntax.ProtocolDeclSyntax)
  case regexLiteralExpr(SwiftSyntax.RegexLiteralExprSyntax)
  case repeatStmt(SwiftSyntax.RepeatStmtSyntax)
  case returnClause(SwiftSyntax.ReturnClauseSyntax)
  case returnStmt(SwiftSyntax.ReturnStmtSyntax)
  case sameTypeRequirement(SwiftSyntax.SameTypeRequirementSyntax)
  case sequenceExpr(SwiftSyntax.SequenceExprSyntax)
  case simpleStringLiteralExpr(SwiftSyntax.SimpleStringLiteralExprSyntax)
  case simpleStringLiteralSegmentList(SwiftSyntax.SimpleStringLiteralSegmentListSyntax)
  case someOrAnyType(SwiftSyntax.SomeOrAnyTypeSyntax)
  case sourceFile(SwiftSyntax.SourceFileSyntax)
  case specializeAttributeArgumentList(SwiftSyntax.SpecializeAttributeArgumentListSyntax)
  case specializeAvailabilityArgument(SwiftSyntax.SpecializeAvailabilityArgumentSyntax)
  case specializeTargetFunctionArgument(SwiftSyntax.SpecializeTargetFunctionArgumentSyntax)
  case stringLiteralExpr(SwiftSyntax.StringLiteralExprSyntax)
  case stringLiteralSegmentList(SwiftSyntax.StringLiteralSegmentListSyntax)
  case stringSegment(SwiftSyntax.StringSegmentSyntax)
  case structDecl(SwiftSyntax.StructDeclSyntax)
  case subscriptCallExpr(SwiftSyntax.SubscriptCallExprSyntax)
  case subscriptDecl(SwiftSyntax.SubscriptDeclSyntax)
  case superExpr(SwiftSyntax.SuperExprSyntax)
  case suppressedType(SwiftSyntax.SuppressedTypeSyntax)
  case switchCaseItemList(SwiftSyntax.SwitchCaseItemListSyntax)
  case switchCaseItem(SwiftSyntax.SwitchCaseItemSyntax)
  case switchCaseLabel(SwiftSyntax.SwitchCaseLabelSyntax)
  case switchCaseList(SwiftSyntax.SwitchCaseListSyntax)
  case switchCase(SwiftSyntax.SwitchCaseSyntax)
  case switchDefaultLabel(SwiftSyntax.SwitchDefaultLabelSyntax)
  case switchExpr(SwiftSyntax.SwitchExprSyntax)
  case ternaryExpr(SwiftSyntax.TernaryExprSyntax)
  case throwStmt(SwiftSyntax.ThrowStmtSyntax)
  case tryExpr(SwiftSyntax.TryExprSyntax)
  case tupleExpr(SwiftSyntax.TupleExprSyntax)
  case tuplePatternElementList(SwiftSyntax.TuplePatternElementListSyntax)
  case tuplePatternElement(SwiftSyntax.TuplePatternElementSyntax)
  case tuplePattern(SwiftSyntax.TuplePatternSyntax)
  case tupleTypeElementList(SwiftSyntax.TupleTypeElementListSyntax)
  case tupleTypeElement(SwiftSyntax.TupleTypeElementSyntax)
  case tupleType(SwiftSyntax.TupleTypeSyntax)
  case typeAliasDecl(SwiftSyntax.TypeAliasDeclSyntax)
  case typeAnnotation(SwiftSyntax.TypeAnnotationSyntax)
  case typeEffectSpecifiers(SwiftSyntax.TypeEffectSpecifiersSyntax)
  case typeExpr(SwiftSyntax.TypeExprSyntax)
  case typeInitializerClause(SwiftSyntax.TypeInitializerClauseSyntax)
  case unavailableFromAsyncAttributeArguments(SwiftSyntax.UnavailableFromAsyncAttributeArgumentsSyntax)
  case underscorePrivateAttributeArguments(SwiftSyntax.UnderscorePrivateAttributeArgumentsSyntax)
  case unexpectedNodes(SwiftSyntax.UnexpectedNodesSyntax)
  case unresolvedAsExpr(SwiftSyntax.UnresolvedAsExprSyntax)
  case unresolvedIsExpr(SwiftSyntax.UnresolvedIsExprSyntax)
  case unresolvedTernaryExpr(SwiftSyntax.UnresolvedTernaryExprSyntax)
  case valueBindingPattern(SwiftSyntax.ValueBindingPatternSyntax)
  case variableDecl(SwiftSyntax.VariableDeclSyntax)
  case versionComponentList(SwiftSyntax.VersionComponentListSyntax)
  case versionComponent(SwiftSyntax.VersionComponentSyntax)
  case versionTuple(SwiftSyntax.VersionTupleSyntax)
  case whereClause(SwiftSyntax.WhereClauseSyntax)
  case whileStmt(SwiftSyntax.WhileStmtSyntax)
  case wildcardPattern(SwiftSyntax.WildcardPatternSyntax)
  case yieldStmt(SwiftSyntax.YieldStmtSyntax)
  case yieldedExpressionList(SwiftSyntax.YieldedExpressionListSyntax)
  case yieldedExpression(SwiftSyntax.YieldedExpressionSyntax)
  case yieldedExpressionsClause(SwiftSyntax.YieldedExpressionsClauseSyntax)
}
extension SwiftSyntax.Syntax {
  public func `as`(_: SwiftSyntax.SyntaxEnum.Type) -> SwiftSyntax.SyntaxEnum
}
public enum SyntaxKind : Swift.CaseIterable {
  case token
  case accessorBlock
  case accessorDeclList
  case accessorDecl
  case accessorEffectSpecifiers
  case accessorParameters
  case actorDecl
  case arrayElementList
  case arrayElement
  case arrayExpr
  case arrayType
  case arrowExpr
  case asExpr
  case assignmentExpr
  case associatedTypeDecl
  case attributeList
  case attribute
  case attributedType
  case availabilityArgumentList
  case availabilityArgument
  case availabilityCondition
  case availabilityLabeledArgument
  case awaitExpr
  case backDeployedAttributeArguments
  case binaryOperatorExpr
  case booleanLiteralExpr
  case borrowExpr
  case breakStmt
  case canImportExpr
  case canImportVersionInfo
  case catchClauseList
  case catchClause
  case catchItemList
  case catchItem
  case classDecl
  case classRestrictionType
  case closureCaptureClause
  case closureCaptureList
  case closureCaptureSpecifier
  case closureCapture
  case closureExpr
  case closureParameterClause
  case closureParameterList
  case closureParameter
  case closureShorthandParameterList
  case closureShorthandParameter
  case closureSignature
  case codeBlockItemList
  case codeBlockItem
  case codeBlock
  case compositionTypeElementList
  case compositionTypeElement
  case compositionType
  case conditionElementList
  case conditionElement
  case conformanceRequirement
  case consumeExpr
  case continueStmt
  case conventionAttributeArguments
  case conventionWitnessMethodAttributeArguments
  case copyExpr
  case declModifierDetail
  case declModifierList
  case declModifier
  case declNameArgumentList
  case declNameArgument
  case declNameArguments
  case declReferenceExpr
  case deferStmt
  case deinitializerDecl
  case deinitializerEffectSpecifiers
  case derivativeAttributeArguments
  case designatedTypeList
  case designatedType
  case dictionaryElementList
  case dictionaryElement
  case dictionaryExpr
  case dictionaryType
  case differentiabilityArgumentList
  case differentiabilityArgument
  case differentiabilityArguments
  case differentiabilityWithRespectToArgument
  case differentiableAttributeArguments
  case discardAssignmentExpr
  case discardStmt
  case doStmt
  case documentationAttributeArgumentList
  case documentationAttributeArgument
  case dynamicReplacementAttributeArguments
  case editorPlaceholderDecl
  case editorPlaceholderExpr
  case effectsAttributeArgumentList
  case enumCaseDecl
  case enumCaseElementList
  case enumCaseElement
  case enumCaseParameterClause
  case enumCaseParameterList
  case enumCaseParameter
  case enumDecl
  case exposeAttributeArguments
  case exprList
  case expressionPattern
  case expressionSegment
  case expressionStmt
  case extensionDecl
  case fallThroughStmt
  case floatLiteralExpr
  case forStmt
  case forceUnwrapExpr
  case functionCallExpr
  case functionDecl
  case functionEffectSpecifiers
  case functionParameterClause
  case functionParameterList
  case functionParameter
  case functionSignature
  case functionType
  case genericArgumentClause
  case genericArgumentList
  case genericArgument
  case genericParameterClause
  case genericParameterList
  case genericParameter
  case genericRequirementList
  case genericRequirement
  case genericSpecializationExpr
  case genericWhereClause
  case guardStmt
  case identifierPattern
  case identifierType
  case ifConfigClauseList
  case ifConfigClause
  case ifConfigDecl
  case ifExpr
  case implementsAttributeArguments
  case implicitlyUnwrappedOptionalType
  case importDecl
  case importPathComponentList
  case importPathComponent
  case inOutExpr
  case infixOperatorExpr
  case inheritanceClause
  case inheritedTypeList
  case inheritedType
  case initializerClause
  case initializerDecl
  case integerLiteralExpr
  case isExpr
  case isTypePattern
  case keyPathComponentList
  case keyPathComponent
  case keyPathExpr
  case keyPathOptionalComponent
  case keyPathPropertyComponent
  case keyPathSubscriptComponent
  case labeledExprList
  case labeledExpr
  case labeledSpecializeArgument
  case labeledStmt
  case layoutRequirement
  case macroDecl
  case macroExpansionDecl
  case macroExpansionExpr
  case matchingPatternCondition
  case memberAccessExpr
  case memberBlockItemList
  case memberBlockItem
  case memberBlock
  case memberType
  case metatypeType
  case missingDecl
  case missingExpr
  case missingPattern
  case missingStmt
  case missing
  case missingType
  case multipleTrailingClosureElementList
  case multipleTrailingClosureElement
  case namedOpaqueReturnType
  case nilLiteralExpr
  case objCSelectorPieceList
  case objCSelectorPiece
  case opaqueReturnTypeOfAttributeArguments
  case operatorDecl
  case operatorPrecedenceAndTypes
  case optionalBindingCondition
  case optionalChainingExpr
  case optionalType
  case originallyDefinedInAttributeArguments
  case packElementExpr
  case packElementType
  case packExpansionExpr
  case packExpansionType
  case patternBindingList
  case patternBinding
  case patternExpr
  case platformVersionItemList
  case platformVersionItem
  case platformVersion
  case postfixIfConfigExpr
  case postfixOperatorExpr
  case poundSourceLocationArguments
  case poundSourceLocation
  case precedenceGroupAssignment
  case precedenceGroupAssociativity
  case precedenceGroupAttributeList
  case precedenceGroupDecl
  case precedenceGroupNameList
  case precedenceGroupName
  case precedenceGroupRelation
  case prefixOperatorExpr
  case primaryAssociatedTypeClause
  case primaryAssociatedTypeList
  case primaryAssociatedType
  case protocolDecl
  case regexLiteralExpr
  case repeatStmt
  case returnClause
  case returnStmt
  case sameTypeRequirement
  case sequenceExpr
  case simpleStringLiteralExpr
  case simpleStringLiteralSegmentList
  case someOrAnyType
  case sourceFile
  case specializeAttributeArgumentList
  case specializeAvailabilityArgument
  case specializeTargetFunctionArgument
  case stringLiteralExpr
  case stringLiteralSegmentList
  case stringSegment
  case structDecl
  case subscriptCallExpr
  case subscriptDecl
  case superExpr
  case suppressedType
  case switchCaseItemList
  case switchCaseItem
  case switchCaseLabel
  case switchCaseList
  case switchCase
  case switchDefaultLabel
  case switchExpr
  case ternaryExpr
  case throwStmt
  case tryExpr
  case tupleExpr
  case tuplePatternElementList
  case tuplePatternElement
  case tuplePattern
  case tupleTypeElementList
  case tupleTypeElement
  case tupleType
  case typeAliasDecl
  case typeAnnotation
  case typeEffectSpecifiers
  case typeExpr
  case typeInitializerClause
  case unavailableFromAsyncAttributeArguments
  case underscorePrivateAttributeArguments
  case unexpectedNodes
  case unresolvedAsExpr
  case unresolvedIsExpr
  case unresolvedTernaryExpr
  case valueBindingPattern
  case variableDecl
  case versionComponentList
  case versionComponent
  case versionTuple
  case whereClause
  case whileStmt
  case wildcardPattern
  case yieldStmt
  case yieldedExpressionList
  case yieldedExpression
  case yieldedExpressionsClause
  public var isSyntaxCollection: Swift.Bool {
    get
  }
  public var isMissing: Swift.Bool {
    get
  }
  public var syntaxNodeType: any SwiftSyntax.SyntaxProtocol.Type {
    get
  }
  public static func == (a: SwiftSyntax.SyntaxKind, b: SwiftSyntax.SyntaxKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public typealias AllCases = [SwiftSyntax.SyntaxKind]
  public static var allCases: [SwiftSyntax.SyntaxKind] {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
open class SyntaxRewriter {
  final public let viewMode: SwiftSyntax.SyntaxTreeViewMode
  public init(viewMode: SwiftSyntax.SyntaxTreeViewMode = .sourceAccurate)
  public func rewrite(_ node: some SyntaxProtocol, detach: Swift.Bool = false) -> SwiftSyntax.Syntax
  open func visit(_ token: SwiftSyntax.TokenSyntax) -> SwiftSyntax.TokenSyntax
  open func visitPre(_ node: SwiftSyntax.Syntax)
  open func visitAny(_ node: SwiftSyntax.Syntax) -> SwiftSyntax.Syntax?
  open func visitPost(_ node: SwiftSyntax.Syntax)
  @available(*, deprecated, renamed: "rewrite(_:detach:)")
  public func visit(_ node: SwiftSyntax.Syntax) -> SwiftSyntax.Syntax
  public func visit<T>(_ node: T) -> T where T : SwiftSyntax.SyntaxChildChoices
  open func visit(_ node: SwiftSyntax.AccessorBlockSyntax) -> SwiftSyntax.AccessorBlockSyntax
  open func visit(_ node: SwiftSyntax.AccessorDeclListSyntax) -> SwiftSyntax.AccessorDeclListSyntax
  open func visit(_ node: SwiftSyntax.AccessorDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.AccessorEffectSpecifiersSyntax) -> SwiftSyntax.AccessorEffectSpecifiersSyntax
  open func visit(_ node: SwiftSyntax.AccessorParametersSyntax) -> SwiftSyntax.AccessorParametersSyntax
  open func visit(_ node: SwiftSyntax.ActorDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.ArrayElementListSyntax) -> SwiftSyntax.ArrayElementListSyntax
  open func visit(_ node: SwiftSyntax.ArrayElementSyntax) -> SwiftSyntax.ArrayElementSyntax
  open func visit(_ node: SwiftSyntax.ArrayExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.ArrayTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.ArrowExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.AsExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.AssignmentExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.AssociatedTypeDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.AttributeListSyntax) -> SwiftSyntax.AttributeListSyntax
  open func visit(_ node: SwiftSyntax.AttributeSyntax) -> SwiftSyntax.AttributeSyntax
  open func visit(_ node: SwiftSyntax.AttributedTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.AvailabilityArgumentListSyntax) -> SwiftSyntax.AvailabilityArgumentListSyntax
  open func visit(_ node: SwiftSyntax.AvailabilityArgumentSyntax) -> SwiftSyntax.AvailabilityArgumentSyntax
  open func visit(_ node: SwiftSyntax.AvailabilityConditionSyntax) -> SwiftSyntax.AvailabilityConditionSyntax
  open func visit(_ node: SwiftSyntax.AvailabilityLabeledArgumentSyntax) -> SwiftSyntax.AvailabilityLabeledArgumentSyntax
  open func visit(_ node: SwiftSyntax.AwaitExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.BackDeployedAttributeArgumentsSyntax) -> SwiftSyntax.BackDeployedAttributeArgumentsSyntax
  open func visit(_ node: SwiftSyntax.BinaryOperatorExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.BooleanLiteralExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.BorrowExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.BreakStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.CanImportExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.CanImportVersionInfoSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.CatchClauseListSyntax) -> SwiftSyntax.CatchClauseListSyntax
  open func visit(_ node: SwiftSyntax.CatchClauseSyntax) -> SwiftSyntax.CatchClauseSyntax
  open func visit(_ node: SwiftSyntax.CatchItemListSyntax) -> SwiftSyntax.CatchItemListSyntax
  open func visit(_ node: SwiftSyntax.CatchItemSyntax) -> SwiftSyntax.CatchItemSyntax
  open func visit(_ node: SwiftSyntax.ClassDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.ClassRestrictionTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.ClosureCaptureClauseSyntax) -> SwiftSyntax.ClosureCaptureClauseSyntax
  open func visit(_ node: SwiftSyntax.ClosureCaptureListSyntax) -> SwiftSyntax.ClosureCaptureListSyntax
  open func visit(_ node: SwiftSyntax.ClosureCaptureSpecifierSyntax) -> SwiftSyntax.ClosureCaptureSpecifierSyntax
  open func visit(_ node: SwiftSyntax.ClosureCaptureSyntax) -> SwiftSyntax.ClosureCaptureSyntax
  open func visit(_ node: SwiftSyntax.ClosureExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.ClosureParameterClauseSyntax) -> SwiftSyntax.ClosureParameterClauseSyntax
  open func visit(_ node: SwiftSyntax.ClosureParameterListSyntax) -> SwiftSyntax.ClosureParameterListSyntax
  open func visit(_ node: SwiftSyntax.ClosureParameterSyntax) -> SwiftSyntax.ClosureParameterSyntax
  open func visit(_ node: SwiftSyntax.ClosureShorthandParameterListSyntax) -> SwiftSyntax.ClosureShorthandParameterListSyntax
  open func visit(_ node: SwiftSyntax.ClosureShorthandParameterSyntax) -> SwiftSyntax.ClosureShorthandParameterSyntax
  open func visit(_ node: SwiftSyntax.ClosureSignatureSyntax) -> SwiftSyntax.ClosureSignatureSyntax
  open func visit(_ node: SwiftSyntax.CodeBlockItemListSyntax) -> SwiftSyntax.CodeBlockItemListSyntax
  open func visit(_ node: SwiftSyntax.CodeBlockItemSyntax) -> SwiftSyntax.CodeBlockItemSyntax
  open func visit(_ node: SwiftSyntax.CodeBlockSyntax) -> SwiftSyntax.CodeBlockSyntax
  open func visit(_ node: SwiftSyntax.CompositionTypeElementListSyntax) -> SwiftSyntax.CompositionTypeElementListSyntax
  open func visit(_ node: SwiftSyntax.CompositionTypeElementSyntax) -> SwiftSyntax.CompositionTypeElementSyntax
  open func visit(_ node: SwiftSyntax.CompositionTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.ConditionElementListSyntax) -> SwiftSyntax.ConditionElementListSyntax
  open func visit(_ node: SwiftSyntax.ConditionElementSyntax) -> SwiftSyntax.ConditionElementSyntax
  open func visit(_ node: SwiftSyntax.ConformanceRequirementSyntax) -> SwiftSyntax.ConformanceRequirementSyntax
  open func visit(_ node: SwiftSyntax.ConsumeExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.ContinueStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.ConventionAttributeArgumentsSyntax) -> SwiftSyntax.ConventionAttributeArgumentsSyntax
  open func visit(_ node: SwiftSyntax.ConventionWitnessMethodAttributeArgumentsSyntax) -> SwiftSyntax.ConventionWitnessMethodAttributeArgumentsSyntax
  open func visit(_ node: SwiftSyntax.CopyExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.DeclModifierDetailSyntax) -> SwiftSyntax.DeclModifierDetailSyntax
  open func visit(_ node: SwiftSyntax.DeclModifierListSyntax) -> SwiftSyntax.DeclModifierListSyntax
  open func visit(_ node: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.DeclModifierSyntax
  open func visit(_ node: SwiftSyntax.DeclNameArgumentListSyntax) -> SwiftSyntax.DeclNameArgumentListSyntax
  open func visit(_ node: SwiftSyntax.DeclNameArgumentSyntax) -> SwiftSyntax.DeclNameArgumentSyntax
  open func visit(_ node: SwiftSyntax.DeclNameArgumentsSyntax) -> SwiftSyntax.DeclNameArgumentsSyntax
  open func visit(_ node: SwiftSyntax.DeclReferenceExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.DeferStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.DeinitializerDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.DeinitializerEffectSpecifiersSyntax) -> SwiftSyntax.DeinitializerEffectSpecifiersSyntax
  open func visit(_ node: SwiftSyntax.DerivativeAttributeArgumentsSyntax) -> SwiftSyntax.DerivativeAttributeArgumentsSyntax
  open func visit(_ node: SwiftSyntax.DesignatedTypeListSyntax) -> SwiftSyntax.DesignatedTypeListSyntax
  open func visit(_ node: SwiftSyntax.DesignatedTypeSyntax) -> SwiftSyntax.DesignatedTypeSyntax
  open func visit(_ node: SwiftSyntax.DictionaryElementListSyntax) -> SwiftSyntax.DictionaryElementListSyntax
  open func visit(_ node: SwiftSyntax.DictionaryElementSyntax) -> SwiftSyntax.DictionaryElementSyntax
  open func visit(_ node: SwiftSyntax.DictionaryExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.DictionaryTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.DifferentiabilityArgumentListSyntax) -> SwiftSyntax.DifferentiabilityArgumentListSyntax
  open func visit(_ node: SwiftSyntax.DifferentiabilityArgumentSyntax) -> SwiftSyntax.DifferentiabilityArgumentSyntax
  open func visit(_ node: SwiftSyntax.DifferentiabilityArgumentsSyntax) -> SwiftSyntax.DifferentiabilityArgumentsSyntax
  open func visit(_ node: SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax) -> SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax
  open func visit(_ node: SwiftSyntax.DifferentiableAttributeArgumentsSyntax) -> SwiftSyntax.DifferentiableAttributeArgumentsSyntax
  open func visit(_ node: SwiftSyntax.DiscardAssignmentExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.DiscardStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.DoStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.DocumentationAttributeArgumentListSyntax) -> SwiftSyntax.DocumentationAttributeArgumentListSyntax
  open func visit(_ node: SwiftSyntax.DocumentationAttributeArgumentSyntax) -> SwiftSyntax.DocumentationAttributeArgumentSyntax
  open func visit(_ node: SwiftSyntax.DynamicReplacementAttributeArgumentsSyntax) -> SwiftSyntax.DynamicReplacementAttributeArgumentsSyntax
  open func visit(_ node: SwiftSyntax.EditorPlaceholderDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.EditorPlaceholderExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.EffectsAttributeArgumentListSyntax) -> SwiftSyntax.EffectsAttributeArgumentListSyntax
  open func visit(_ node: SwiftSyntax.EnumCaseDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.EnumCaseElementListSyntax) -> SwiftSyntax.EnumCaseElementListSyntax
  open func visit(_ node: SwiftSyntax.EnumCaseElementSyntax) -> SwiftSyntax.EnumCaseElementSyntax
  open func visit(_ node: SwiftSyntax.EnumCaseParameterClauseSyntax) -> SwiftSyntax.EnumCaseParameterClauseSyntax
  open func visit(_ node: SwiftSyntax.EnumCaseParameterListSyntax) -> SwiftSyntax.EnumCaseParameterListSyntax
  open func visit(_ node: SwiftSyntax.EnumCaseParameterSyntax) -> SwiftSyntax.EnumCaseParameterSyntax
  open func visit(_ node: SwiftSyntax.EnumDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.ExposeAttributeArgumentsSyntax) -> SwiftSyntax.ExposeAttributeArgumentsSyntax
  open func visit(_ node: SwiftSyntax.ExprListSyntax) -> SwiftSyntax.ExprListSyntax
  open func visit(_ node: SwiftSyntax.ExpressionPatternSyntax) -> SwiftSyntax.PatternSyntax
  open func visit(_ node: SwiftSyntax.ExpressionSegmentSyntax) -> SwiftSyntax.ExpressionSegmentSyntax
  open func visit(_ node: SwiftSyntax.ExpressionStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.ExtensionDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.FallThroughStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.FloatLiteralExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.ForStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.ForceUnwrapExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.FunctionCallExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.FunctionDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.FunctionEffectSpecifiersSyntax) -> SwiftSyntax.FunctionEffectSpecifiersSyntax
  open func visit(_ node: SwiftSyntax.FunctionParameterClauseSyntax) -> SwiftSyntax.FunctionParameterClauseSyntax
  open func visit(_ node: SwiftSyntax.FunctionParameterListSyntax) -> SwiftSyntax.FunctionParameterListSyntax
  open func visit(_ node: SwiftSyntax.FunctionParameterSyntax) -> SwiftSyntax.FunctionParameterSyntax
  open func visit(_ node: SwiftSyntax.FunctionSignatureSyntax) -> SwiftSyntax.FunctionSignatureSyntax
  open func visit(_ node: SwiftSyntax.FunctionTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.GenericArgumentClauseSyntax) -> SwiftSyntax.GenericArgumentClauseSyntax
  open func visit(_ node: SwiftSyntax.GenericArgumentListSyntax) -> SwiftSyntax.GenericArgumentListSyntax
  open func visit(_ node: SwiftSyntax.GenericArgumentSyntax) -> SwiftSyntax.GenericArgumentSyntax
  open func visit(_ node: SwiftSyntax.GenericParameterClauseSyntax) -> SwiftSyntax.GenericParameterClauseSyntax
  open func visit(_ node: SwiftSyntax.GenericParameterListSyntax) -> SwiftSyntax.GenericParameterListSyntax
  open func visit(_ node: SwiftSyntax.GenericParameterSyntax) -> SwiftSyntax.GenericParameterSyntax
  open func visit(_ node: SwiftSyntax.GenericRequirementListSyntax) -> SwiftSyntax.GenericRequirementListSyntax
  open func visit(_ node: SwiftSyntax.GenericRequirementSyntax) -> SwiftSyntax.GenericRequirementSyntax
  open func visit(_ node: SwiftSyntax.GenericSpecializationExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.GenericWhereClauseSyntax) -> SwiftSyntax.GenericWhereClauseSyntax
  open func visit(_ node: SwiftSyntax.GuardStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.IdentifierPatternSyntax) -> SwiftSyntax.PatternSyntax
  open func visit(_ node: SwiftSyntax.IdentifierTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.IfConfigClauseListSyntax) -> SwiftSyntax.IfConfigClauseListSyntax
  open func visit(_ node: SwiftSyntax.IfConfigClauseSyntax) -> SwiftSyntax.IfConfigClauseSyntax
  open func visit(_ node: SwiftSyntax.IfConfigDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.IfExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.ImplementsAttributeArgumentsSyntax) -> SwiftSyntax.ImplementsAttributeArgumentsSyntax
  open func visit(_ node: SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.ImportDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.ImportPathComponentListSyntax) -> SwiftSyntax.ImportPathComponentListSyntax
  open func visit(_ node: SwiftSyntax.ImportPathComponentSyntax) -> SwiftSyntax.ImportPathComponentSyntax
  open func visit(_ node: SwiftSyntax.InOutExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.InfixOperatorExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.InheritanceClauseSyntax) -> SwiftSyntax.InheritanceClauseSyntax
  open func visit(_ node: SwiftSyntax.InheritedTypeListSyntax) -> SwiftSyntax.InheritedTypeListSyntax
  open func visit(_ node: SwiftSyntax.InheritedTypeSyntax) -> SwiftSyntax.InheritedTypeSyntax
  open func visit(_ node: SwiftSyntax.InitializerClauseSyntax) -> SwiftSyntax.InitializerClauseSyntax
  open func visit(_ node: SwiftSyntax.InitializerDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.IntegerLiteralExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.IsExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.IsTypePatternSyntax) -> SwiftSyntax.PatternSyntax
  open func visit(_ node: SwiftSyntax.KeyPathComponentListSyntax) -> SwiftSyntax.KeyPathComponentListSyntax
  open func visit(_ node: SwiftSyntax.KeyPathComponentSyntax) -> SwiftSyntax.KeyPathComponentSyntax
  open func visit(_ node: SwiftSyntax.KeyPathExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.KeyPathOptionalComponentSyntax) -> SwiftSyntax.KeyPathOptionalComponentSyntax
  open func visit(_ node: SwiftSyntax.KeyPathPropertyComponentSyntax) -> SwiftSyntax.KeyPathPropertyComponentSyntax
  open func visit(_ node: SwiftSyntax.KeyPathSubscriptComponentSyntax) -> SwiftSyntax.KeyPathSubscriptComponentSyntax
  open func visit(_ node: SwiftSyntax.LabeledExprListSyntax) -> SwiftSyntax.LabeledExprListSyntax
  open func visit(_ node: SwiftSyntax.LabeledExprSyntax) -> SwiftSyntax.LabeledExprSyntax
  open func visit(_ node: SwiftSyntax.LabeledSpecializeArgumentSyntax) -> SwiftSyntax.LabeledSpecializeArgumentSyntax
  open func visit(_ node: SwiftSyntax.LabeledStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.LayoutRequirementSyntax) -> SwiftSyntax.LayoutRequirementSyntax
  open func visit(_ node: SwiftSyntax.MacroDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.MacroExpansionDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.MacroExpansionExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.MatchingPatternConditionSyntax) -> SwiftSyntax.MatchingPatternConditionSyntax
  open func visit(_ node: SwiftSyntax.MemberAccessExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.MemberBlockItemListSyntax) -> SwiftSyntax.MemberBlockItemListSyntax
  open func visit(_ node: SwiftSyntax.MemberBlockItemSyntax) -> SwiftSyntax.MemberBlockItemSyntax
  open func visit(_ node: SwiftSyntax.MemberBlockSyntax) -> SwiftSyntax.MemberBlockSyntax
  open func visit(_ node: SwiftSyntax.MemberTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.MetatypeTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.MissingDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.MissingExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.MissingPatternSyntax) -> SwiftSyntax.PatternSyntax
  open func visit(_ node: SwiftSyntax.MissingStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.MissingSyntax) -> SwiftSyntax.Syntax
  open func visit(_ node: SwiftSyntax.MissingTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.MultipleTrailingClosureElementListSyntax) -> SwiftSyntax.MultipleTrailingClosureElementListSyntax
  open func visit(_ node: SwiftSyntax.MultipleTrailingClosureElementSyntax) -> SwiftSyntax.MultipleTrailingClosureElementSyntax
  open func visit(_ node: SwiftSyntax.NamedOpaqueReturnTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.NilLiteralExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.ObjCSelectorPieceListSyntax) -> SwiftSyntax.ObjCSelectorPieceListSyntax
  open func visit(_ node: SwiftSyntax.ObjCSelectorPieceSyntax) -> SwiftSyntax.ObjCSelectorPieceSyntax
  open func visit(_ node: SwiftSyntax.OpaqueReturnTypeOfAttributeArgumentsSyntax) -> SwiftSyntax.OpaqueReturnTypeOfAttributeArgumentsSyntax
  open func visit(_ node: SwiftSyntax.OperatorDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.OperatorPrecedenceAndTypesSyntax) -> SwiftSyntax.OperatorPrecedenceAndTypesSyntax
  open func visit(_ node: SwiftSyntax.OptionalBindingConditionSyntax) -> SwiftSyntax.OptionalBindingConditionSyntax
  open func visit(_ node: SwiftSyntax.OptionalChainingExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.OptionalTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.OriginallyDefinedInAttributeArgumentsSyntax) -> SwiftSyntax.OriginallyDefinedInAttributeArgumentsSyntax
  open func visit(_ node: SwiftSyntax.PackElementExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.PackElementTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.PackExpansionExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.PackExpansionTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.PatternBindingListSyntax) -> SwiftSyntax.PatternBindingListSyntax
  open func visit(_ node: SwiftSyntax.PatternBindingSyntax) -> SwiftSyntax.PatternBindingSyntax
  open func visit(_ node: SwiftSyntax.PatternExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.PlatformVersionItemListSyntax) -> SwiftSyntax.PlatformVersionItemListSyntax
  open func visit(_ node: SwiftSyntax.PlatformVersionItemSyntax) -> SwiftSyntax.PlatformVersionItemSyntax
  open func visit(_ node: SwiftSyntax.PlatformVersionSyntax) -> SwiftSyntax.PlatformVersionSyntax
  open func visit(_ node: SwiftSyntax.PostfixIfConfigExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.PostfixOperatorExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.PoundSourceLocationArgumentsSyntax) -> SwiftSyntax.PoundSourceLocationArgumentsSyntax
  open func visit(_ node: SwiftSyntax.PoundSourceLocationSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.PrecedenceGroupAssignmentSyntax) -> SwiftSyntax.PrecedenceGroupAssignmentSyntax
  open func visit(_ node: SwiftSyntax.PrecedenceGroupAssociativitySyntax) -> SwiftSyntax.PrecedenceGroupAssociativitySyntax
  open func visit(_ node: SwiftSyntax.PrecedenceGroupAttributeListSyntax) -> SwiftSyntax.PrecedenceGroupAttributeListSyntax
  open func visit(_ node: SwiftSyntax.PrecedenceGroupDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.PrecedenceGroupNameListSyntax) -> SwiftSyntax.PrecedenceGroupNameListSyntax
  open func visit(_ node: SwiftSyntax.PrecedenceGroupNameSyntax) -> SwiftSyntax.PrecedenceGroupNameSyntax
  open func visit(_ node: SwiftSyntax.PrecedenceGroupRelationSyntax) -> SwiftSyntax.PrecedenceGroupRelationSyntax
  open func visit(_ node: SwiftSyntax.PrefixOperatorExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.PrimaryAssociatedTypeClauseSyntax) -> SwiftSyntax.PrimaryAssociatedTypeClauseSyntax
  open func visit(_ node: SwiftSyntax.PrimaryAssociatedTypeListSyntax) -> SwiftSyntax.PrimaryAssociatedTypeListSyntax
  open func visit(_ node: SwiftSyntax.PrimaryAssociatedTypeSyntax) -> SwiftSyntax.PrimaryAssociatedTypeSyntax
  open func visit(_ node: SwiftSyntax.ProtocolDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.RegexLiteralExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.RepeatStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.ReturnClauseSyntax) -> SwiftSyntax.ReturnClauseSyntax
  open func visit(_ node: SwiftSyntax.ReturnStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.SameTypeRequirementSyntax) -> SwiftSyntax.SameTypeRequirementSyntax
  open func visit(_ node: SwiftSyntax.SequenceExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.SimpleStringLiteralExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.SimpleStringLiteralSegmentListSyntax) -> SwiftSyntax.SimpleStringLiteralSegmentListSyntax
  open func visit(_ node: SwiftSyntax.SomeOrAnyTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.SourceFileSyntax) -> SwiftSyntax.SourceFileSyntax
  open func visit(_ node: SwiftSyntax.SpecializeAttributeArgumentListSyntax) -> SwiftSyntax.SpecializeAttributeArgumentListSyntax
  open func visit(_ node: SwiftSyntax.SpecializeAvailabilityArgumentSyntax) -> SwiftSyntax.SpecializeAvailabilityArgumentSyntax
  open func visit(_ node: SwiftSyntax.SpecializeTargetFunctionArgumentSyntax) -> SwiftSyntax.SpecializeTargetFunctionArgumentSyntax
  open func visit(_ node: SwiftSyntax.StringLiteralExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.StringLiteralSegmentListSyntax) -> SwiftSyntax.StringLiteralSegmentListSyntax
  open func visit(_ node: SwiftSyntax.StringSegmentSyntax) -> SwiftSyntax.StringSegmentSyntax
  open func visit(_ node: SwiftSyntax.StructDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.SubscriptCallExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.SubscriptDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.SuperExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.SuppressedTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.SwitchCaseItemListSyntax) -> SwiftSyntax.SwitchCaseItemListSyntax
  open func visit(_ node: SwiftSyntax.SwitchCaseItemSyntax) -> SwiftSyntax.SwitchCaseItemSyntax
  open func visit(_ node: SwiftSyntax.SwitchCaseLabelSyntax) -> SwiftSyntax.SwitchCaseLabelSyntax
  open func visit(_ node: SwiftSyntax.SwitchCaseListSyntax) -> SwiftSyntax.SwitchCaseListSyntax
  open func visit(_ node: SwiftSyntax.SwitchCaseSyntax) -> SwiftSyntax.SwitchCaseSyntax
  open func visit(_ node: SwiftSyntax.SwitchDefaultLabelSyntax) -> SwiftSyntax.SwitchDefaultLabelSyntax
  open func visit(_ node: SwiftSyntax.SwitchExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.TernaryExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.ThrowStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.TryExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.TupleExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.TuplePatternElementListSyntax) -> SwiftSyntax.TuplePatternElementListSyntax
  open func visit(_ node: SwiftSyntax.TuplePatternElementSyntax) -> SwiftSyntax.TuplePatternElementSyntax
  open func visit(_ node: SwiftSyntax.TuplePatternSyntax) -> SwiftSyntax.PatternSyntax
  open func visit(_ node: SwiftSyntax.TupleTypeElementListSyntax) -> SwiftSyntax.TupleTypeElementListSyntax
  open func visit(_ node: SwiftSyntax.TupleTypeElementSyntax) -> SwiftSyntax.TupleTypeElementSyntax
  open func visit(_ node: SwiftSyntax.TupleTypeSyntax) -> SwiftSyntax.TypeSyntax
  open func visit(_ node: SwiftSyntax.TypeAliasDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.TypeAnnotationSyntax) -> SwiftSyntax.TypeAnnotationSyntax
  open func visit(_ node: SwiftSyntax.TypeEffectSpecifiersSyntax) -> SwiftSyntax.TypeEffectSpecifiersSyntax
  open func visit(_ node: SwiftSyntax.TypeExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.TypeInitializerClauseSyntax) -> SwiftSyntax.TypeInitializerClauseSyntax
  open func visit(_ node: SwiftSyntax.UnavailableFromAsyncAttributeArgumentsSyntax) -> SwiftSyntax.UnavailableFromAsyncAttributeArgumentsSyntax
  open func visit(_ node: SwiftSyntax.UnderscorePrivateAttributeArgumentsSyntax) -> SwiftSyntax.UnderscorePrivateAttributeArgumentsSyntax
  open func visit(_ node: SwiftSyntax.UnexpectedNodesSyntax) -> SwiftSyntax.UnexpectedNodesSyntax
  open func visit(_ node: SwiftSyntax.UnresolvedAsExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.UnresolvedIsExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.UnresolvedTernaryExprSyntax) -> SwiftSyntax.ExprSyntax
  open func visit(_ node: SwiftSyntax.ValueBindingPatternSyntax) -> SwiftSyntax.PatternSyntax
  open func visit(_ node: SwiftSyntax.VariableDeclSyntax) -> SwiftSyntax.DeclSyntax
  open func visit(_ node: SwiftSyntax.VersionComponentListSyntax) -> SwiftSyntax.VersionComponentListSyntax
  open func visit(_ node: SwiftSyntax.VersionComponentSyntax) -> SwiftSyntax.VersionComponentSyntax
  open func visit(_ node: SwiftSyntax.VersionTupleSyntax) -> SwiftSyntax.VersionTupleSyntax
  open func visit(_ node: SwiftSyntax.WhereClauseSyntax) -> SwiftSyntax.WhereClauseSyntax
  open func visit(_ node: SwiftSyntax.WhileStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.WildcardPatternSyntax) -> SwiftSyntax.PatternSyntax
  open func visit(_ node: SwiftSyntax.YieldStmtSyntax) -> SwiftSyntax.StmtSyntax
  open func visit(_ node: SwiftSyntax.YieldedExpressionListSyntax) -> SwiftSyntax.YieldedExpressionListSyntax
  open func visit(_ node: SwiftSyntax.YieldedExpressionSyntax) -> SwiftSyntax.YieldedExpressionSyntax
  open func visit(_ node: SwiftSyntax.YieldedExpressionsClauseSyntax) -> SwiftSyntax.YieldedExpressionsClauseSyntax
  public func visit(_ node: SwiftSyntax.DeclSyntax) -> SwiftSyntax.DeclSyntax
  public func visit(_ node: SwiftSyntax.ExprSyntax) -> SwiftSyntax.ExprSyntax
  public func visit(_ node: SwiftSyntax.PatternSyntax) -> SwiftSyntax.PatternSyntax
  public func visit(_ node: SwiftSyntax.StmtSyntax) -> SwiftSyntax.StmtSyntax
  public func visit(_ node: SwiftSyntax.TypeSyntax) -> SwiftSyntax.TypeSyntax
  @objc deinit
}
public protocol BracedSyntax : SwiftSyntax.SyntaxProtocol {
  var leftBrace: SwiftSyntax.TokenSyntax { get set }
  var rightBrace: SwiftSyntax.TokenSyntax { get set }
}
extension SwiftSyntax.BracedSyntax {
  @_disfavoredOverload public func with<T>(_ keyPath: Swift.WritableKeyPath<any SwiftSyntax.BracedSyntax, T>, _ newChild: T) -> any SwiftSyntax.BracedSyntax
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: (any SwiftSyntax.BracedSyntax).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.BracedSyntax).Type) -> (any SwiftSyntax.BracedSyntax)?
}
public protocol DeclGroupSyntax : SwiftSyntax.SyntaxProtocol {
  var attributes: SwiftSyntax.AttributeListSyntax { get set }
  var modifiers: SwiftSyntax.DeclModifierListSyntax { get set }
  var inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? { get set }
  var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? { get set }
  var memberBlock: SwiftSyntax.MemberBlockSyntax { get set }
}
extension SwiftSyntax.DeclGroupSyntax {
  @_disfavoredOverload public func with<T>(_ keyPath: Swift.WritableKeyPath<any SwiftSyntax.DeclGroupSyntax, T>, _ newChild: T) -> any SwiftSyntax.DeclGroupSyntax
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: (any SwiftSyntax.DeclGroupSyntax).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.DeclGroupSyntax).Type) -> (any SwiftSyntax.DeclGroupSyntax)?
}
public protocol EffectSpecifiersSyntax : SwiftSyntax.SyntaxProtocol {
  var unexpectedBeforeAsyncSpecifier: SwiftSyntax.UnexpectedNodesSyntax? { get set }
  var asyncSpecifier: SwiftSyntax.TokenSyntax? { get set }
  var unexpectedBetweenAsyncSpecifierAndThrowsSpecifier: SwiftSyntax.UnexpectedNodesSyntax? { get set }
  var throwsSpecifier: SwiftSyntax.TokenSyntax? { get set }
  var unexpectedAfterThrowsSpecifier: SwiftSyntax.UnexpectedNodesSyntax? { get set }
}
extension SwiftSyntax.EffectSpecifiersSyntax {
  @_disfavoredOverload public func with<T>(_ keyPath: Swift.WritableKeyPath<any SwiftSyntax.EffectSpecifiersSyntax, T>, _ newChild: T) -> any SwiftSyntax.EffectSpecifiersSyntax
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: (any SwiftSyntax.EffectSpecifiersSyntax).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.EffectSpecifiersSyntax).Type) -> (any SwiftSyntax.EffectSpecifiersSyntax)?
}
public protocol FreestandingMacroExpansionSyntax : SwiftSyntax.SyntaxProtocol {
  var poundToken: SwiftSyntax.TokenSyntax { get set }
  var macro: SwiftSyntax.TokenSyntax { get set }
  var genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? { get set }
  var leftParen: SwiftSyntax.TokenSyntax? { get set }
  var argumentList: SwiftSyntax.LabeledExprListSyntax { get set }
  var rightParen: SwiftSyntax.TokenSyntax? { get set }
  var trailingClosure: SwiftSyntax.ClosureExprSyntax? { get set }
  var additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax { get set }
}
extension SwiftSyntax.FreestandingMacroExpansionSyntax {
  @_disfavoredOverload public func with<T>(_ keyPath: Swift.WritableKeyPath<any SwiftSyntax.FreestandingMacroExpansionSyntax, T>, _ newChild: T) -> any SwiftSyntax.FreestandingMacroExpansionSyntax
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: (any SwiftSyntax.FreestandingMacroExpansionSyntax).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.FreestandingMacroExpansionSyntax).Type) -> (any SwiftSyntax.FreestandingMacroExpansionSyntax)?
}
public protocol NamedDeclSyntax : SwiftSyntax.SyntaxProtocol {
  var name: SwiftSyntax.TokenSyntax { get set }
}
extension SwiftSyntax.NamedDeclSyntax {
  @_disfavoredOverload public func with<T>(_ keyPath: Swift.WritableKeyPath<any SwiftSyntax.NamedDeclSyntax, T>, _ newChild: T) -> any SwiftSyntax.NamedDeclSyntax
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: (any SwiftSyntax.NamedDeclSyntax).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.NamedDeclSyntax).Type) -> (any SwiftSyntax.NamedDeclSyntax)?
}
public protocol MissingNodeSyntax : SwiftSyntax.SyntaxProtocol {
  var placeholder: SwiftSyntax.TokenSyntax { get set }
}
extension SwiftSyntax.MissingNodeSyntax {
  @_disfavoredOverload public func with<T>(_ keyPath: Swift.WritableKeyPath<any SwiftSyntax.MissingNodeSyntax, T>, _ newChild: T) -> any SwiftSyntax.MissingNodeSyntax
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: (any SwiftSyntax.MissingNodeSyntax).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.MissingNodeSyntax).Type) -> (any SwiftSyntax.MissingNodeSyntax)?
}
public protocol ParenthesizedSyntax : SwiftSyntax.SyntaxProtocol {
  var leftParen: SwiftSyntax.TokenSyntax { get set }
  var rightParen: SwiftSyntax.TokenSyntax { get set }
}
extension SwiftSyntax.ParenthesizedSyntax {
  @_disfavoredOverload public func with<T>(_ keyPath: Swift.WritableKeyPath<any SwiftSyntax.ParenthesizedSyntax, T>, _ newChild: T) -> any SwiftSyntax.ParenthesizedSyntax
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: (any SwiftSyntax.ParenthesizedSyntax).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.ParenthesizedSyntax).Type) -> (any SwiftSyntax.ParenthesizedSyntax)?
}
public protocol WithAttributesSyntax : SwiftSyntax.SyntaxProtocol {
  var attributes: SwiftSyntax.AttributeListSyntax { get set }
}
extension SwiftSyntax.WithAttributesSyntax {
  @_disfavoredOverload public func with<T>(_ keyPath: Swift.WritableKeyPath<any SwiftSyntax.WithAttributesSyntax, T>, _ newChild: T) -> any SwiftSyntax.WithAttributesSyntax
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: (any SwiftSyntax.WithAttributesSyntax).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.WithAttributesSyntax).Type) -> (any SwiftSyntax.WithAttributesSyntax)?
}
public protocol WithCodeBlockSyntax : SwiftSyntax.SyntaxProtocol {
  var body: SwiftSyntax.CodeBlockSyntax { get set }
}
extension SwiftSyntax.WithCodeBlockSyntax {
  @_disfavoredOverload public func with<T>(_ keyPath: Swift.WritableKeyPath<any SwiftSyntax.WithCodeBlockSyntax, T>, _ newChild: T) -> any SwiftSyntax.WithCodeBlockSyntax
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: (any SwiftSyntax.WithCodeBlockSyntax).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.WithCodeBlockSyntax).Type) -> (any SwiftSyntax.WithCodeBlockSyntax)?
}
public protocol WithGenericParametersSyntax : SwiftSyntax.SyntaxProtocol {
  var genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? { get set }
  var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? { get set }
}
extension SwiftSyntax.WithGenericParametersSyntax {
  @_disfavoredOverload public func with<T>(_ keyPath: Swift.WritableKeyPath<any SwiftSyntax.WithGenericParametersSyntax, T>, _ newChild: T) -> any SwiftSyntax.WithGenericParametersSyntax
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: (any SwiftSyntax.WithGenericParametersSyntax).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.WithGenericParametersSyntax).Type) -> (any SwiftSyntax.WithGenericParametersSyntax)?
}
public protocol WithModifiersSyntax : SwiftSyntax.SyntaxProtocol {
  var modifiers: SwiftSyntax.DeclModifierListSyntax { get set }
}
extension SwiftSyntax.WithModifiersSyntax {
  @_disfavoredOverload public func with<T>(_ keyPath: Swift.WritableKeyPath<any SwiftSyntax.WithModifiersSyntax, T>, _ newChild: T) -> any SwiftSyntax.WithModifiersSyntax
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: (any SwiftSyntax.WithModifiersSyntax).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.WithModifiersSyntax).Type) -> (any SwiftSyntax.WithModifiersSyntax)?
}
public protocol WithStatementsSyntax : SwiftSyntax.SyntaxProtocol {
  var statements: SwiftSyntax.CodeBlockItemListSyntax { get set }
}
extension SwiftSyntax.WithStatementsSyntax {
  @_disfavoredOverload public func with<T>(_ keyPath: Swift.WritableKeyPath<any SwiftSyntax.WithStatementsSyntax, T>, _ newChild: T) -> any SwiftSyntax.WithStatementsSyntax
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: (any SwiftSyntax.WithStatementsSyntax).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.WithStatementsSyntax).Type) -> (any SwiftSyntax.WithStatementsSyntax)?
}
public protocol WithTrailingCommaSyntax : SwiftSyntax.SyntaxProtocol {
  var trailingComma: SwiftSyntax.TokenSyntax? { get set }
}
extension SwiftSyntax.WithTrailingCommaSyntax {
  @_disfavoredOverload public func with<T>(_ keyPath: Swift.WritableKeyPath<any SwiftSyntax.WithTrailingCommaSyntax, T>, _ newChild: T) -> any SwiftSyntax.WithTrailingCommaSyntax
}
extension SwiftSyntax.SyntaxProtocol {
  public func isProtocol(_: (any SwiftSyntax.WithTrailingCommaSyntax).Type) -> Swift.Bool
  public func asProtocol(_: (any SwiftSyntax.WithTrailingCommaSyntax).Type) -> (any SwiftSyntax.WithTrailingCommaSyntax)?
}
extension SwiftSyntax.AccessorBlockSyntax : SwiftSyntax.BracedSyntax {
}
extension SwiftSyntax.AccessorDeclSyntax : SwiftSyntax.WithAttributesSyntax {
}
extension SwiftSyntax.AccessorEffectSpecifiersSyntax : SwiftSyntax.EffectSpecifiersSyntax {
}
extension SwiftSyntax.AccessorParametersSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.ActorDeclSyntax : SwiftSyntax.DeclGroupSyntax, SwiftSyntax.NamedDeclSyntax, SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithGenericParametersSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.ArrayElementSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.AssociatedTypeDeclSyntax : SwiftSyntax.NamedDeclSyntax, SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.AttributedTypeSyntax : SwiftSyntax.WithAttributesSyntax {
}
extension SwiftSyntax.AvailabilityArgumentSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.CatchClauseSyntax : SwiftSyntax.WithCodeBlockSyntax {
}
extension SwiftSyntax.CatchItemSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.ClassDeclSyntax : SwiftSyntax.DeclGroupSyntax, SwiftSyntax.NamedDeclSyntax, SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithGenericParametersSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.ClosureCaptureSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.ClosureExprSyntax : SwiftSyntax.BracedSyntax, SwiftSyntax.WithStatementsSyntax {
}
extension SwiftSyntax.ClosureParameterClauseSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.ClosureParameterSyntax : SwiftSyntax.WithTrailingCommaSyntax, SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.ClosureShorthandParameterSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.ClosureSignatureSyntax : SwiftSyntax.WithAttributesSyntax {
}
extension SwiftSyntax.CodeBlockSyntax : SwiftSyntax.BracedSyntax, SwiftSyntax.WithStatementsSyntax {
}
extension SwiftSyntax.ConditionElementSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.DeclModifierDetailSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.DeclNameArgumentsSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.DeferStmtSyntax : SwiftSyntax.WithCodeBlockSyntax {
}
extension SwiftSyntax.DeinitializerDeclSyntax : SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.DictionaryElementSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.DifferentiabilityArgumentSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.DoStmtSyntax : SwiftSyntax.WithCodeBlockSyntax {
}
extension SwiftSyntax.DocumentationAttributeArgumentSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.EditorPlaceholderDeclSyntax : SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.EnumCaseDeclSyntax : SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.EnumCaseElementSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.EnumCaseParameterClauseSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.EnumCaseParameterSyntax : SwiftSyntax.WithTrailingCommaSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.EnumDeclSyntax : SwiftSyntax.DeclGroupSyntax, SwiftSyntax.NamedDeclSyntax, SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithGenericParametersSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.ExpressionSegmentSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.ExtensionDeclSyntax : SwiftSyntax.DeclGroupSyntax, SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.ForStmtSyntax : SwiftSyntax.WithCodeBlockSyntax {
}
extension SwiftSyntax.FunctionDeclSyntax : SwiftSyntax.NamedDeclSyntax, SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithGenericParametersSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.FunctionEffectSpecifiersSyntax : SwiftSyntax.EffectSpecifiersSyntax {
}
extension SwiftSyntax.FunctionParameterClauseSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.FunctionParameterSyntax : SwiftSyntax.WithTrailingCommaSyntax, SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.FunctionTypeSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.GenericArgumentSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.GenericParameterSyntax : SwiftSyntax.WithTrailingCommaSyntax, SwiftSyntax.WithAttributesSyntax {
}
extension SwiftSyntax.GenericRequirementSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.GuardStmtSyntax : SwiftSyntax.WithCodeBlockSyntax {
}
extension SwiftSyntax.IfExprSyntax : SwiftSyntax.WithCodeBlockSyntax {
}
extension SwiftSyntax.ImportDeclSyntax : SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.InheritedTypeSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.InitializerDeclSyntax : SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithGenericParametersSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.LabeledExprSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.LabeledSpecializeArgumentSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.MacroDeclSyntax : SwiftSyntax.NamedDeclSyntax, SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithGenericParametersSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.MacroExpansionDeclSyntax : SwiftSyntax.FreestandingMacroExpansionSyntax, SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.MacroExpansionExprSyntax : SwiftSyntax.FreestandingMacroExpansionSyntax {
}
extension SwiftSyntax.MemberBlockSyntax : SwiftSyntax.BracedSyntax {
}
extension SwiftSyntax.MissingDeclSyntax : SwiftSyntax.MissingNodeSyntax, SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.MissingExprSyntax : SwiftSyntax.MissingNodeSyntax {
}
extension SwiftSyntax.MissingPatternSyntax : SwiftSyntax.MissingNodeSyntax {
}
extension SwiftSyntax.MissingStmtSyntax : SwiftSyntax.MissingNodeSyntax {
}
extension SwiftSyntax.MissingSyntax : SwiftSyntax.MissingNodeSyntax {
}
extension SwiftSyntax.MissingTypeSyntax : SwiftSyntax.MissingNodeSyntax {
}
extension SwiftSyntax.OperatorDeclSyntax : SwiftSyntax.NamedDeclSyntax {
}
extension SwiftSyntax.PatternBindingSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.PlatformVersionItemSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.PoundSourceLocationSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.PrecedenceGroupDeclSyntax : SwiftSyntax.NamedDeclSyntax, SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.PrecedenceGroupNameSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.PrimaryAssociatedTypeSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.ProtocolDeclSyntax : SwiftSyntax.DeclGroupSyntax, SwiftSyntax.NamedDeclSyntax, SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.RepeatStmtSyntax : SwiftSyntax.WithCodeBlockSyntax {
}
extension SwiftSyntax.SourceFileSyntax : SwiftSyntax.WithStatementsSyntax {
}
extension SwiftSyntax.SpecializeTargetFunctionArgumentSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.StructDeclSyntax : SwiftSyntax.DeclGroupSyntax, SwiftSyntax.NamedDeclSyntax, SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithGenericParametersSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.SubscriptDeclSyntax : SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithGenericParametersSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.SwitchCaseItemSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.SwitchCaseSyntax : SwiftSyntax.WithStatementsSyntax {
}
extension SwiftSyntax.SwitchExprSyntax : SwiftSyntax.BracedSyntax {
}
extension SwiftSyntax.TupleExprSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.TuplePatternElementSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.TuplePatternSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.TupleTypeElementSyntax : SwiftSyntax.WithTrailingCommaSyntax {
}
extension SwiftSyntax.TupleTypeSyntax : SwiftSyntax.ParenthesizedSyntax {
}
extension SwiftSyntax.TypeAliasDeclSyntax : SwiftSyntax.NamedDeclSyntax, SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithGenericParametersSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.TypeEffectSpecifiersSyntax : SwiftSyntax.EffectSpecifiersSyntax {
}
extension SwiftSyntax.VariableDeclSyntax : SwiftSyntax.WithAttributesSyntax, SwiftSyntax.WithModifiersSyntax {
}
extension SwiftSyntax.WhileStmtSyntax : SwiftSyntax.WithCodeBlockSyntax {
}
public enum SyntaxVisitorContinueKind {
  case visitChildren
  case skipChildren
  public static func == (a: SwiftSyntax.SyntaxVisitorContinueKind, b: SwiftSyntax.SyntaxVisitorContinueKind) -> Swift.Bool
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
open class SyntaxVisitor {
  final public let viewMode: SwiftSyntax.SyntaxTreeViewMode
  public init(viewMode: SwiftSyntax.SyntaxTreeViewMode)
  public func walk(_ node: some SyntaxProtocol)
  open func visit(_ node: SwiftSyntax.AccessorBlockSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AccessorBlockSyntax)
  open func visit(_ node: SwiftSyntax.AccessorDeclListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AccessorDeclListSyntax)
  open func visit(_ node: SwiftSyntax.AccessorDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AccessorDeclSyntax)
  open func visit(_ node: SwiftSyntax.AccessorEffectSpecifiersSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AccessorEffectSpecifiersSyntax)
  open func visit(_ node: SwiftSyntax.AccessorParametersSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AccessorParametersSyntax)
  open func visit(_ node: SwiftSyntax.ActorDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ActorDeclSyntax)
  open func visit(_ node: SwiftSyntax.ArrayElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ArrayElementListSyntax)
  open func visit(_ node: SwiftSyntax.ArrayElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ArrayElementSyntax)
  open func visit(_ node: SwiftSyntax.ArrayExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ArrayExprSyntax)
  open func visit(_ node: SwiftSyntax.ArrayTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ArrayTypeSyntax)
  open func visit(_ node: SwiftSyntax.ArrowExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ArrowExprSyntax)
  open func visit(_ node: SwiftSyntax.AsExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AsExprSyntax)
  open func visit(_ node: SwiftSyntax.AssignmentExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AssignmentExprSyntax)
  open func visit(_ node: SwiftSyntax.AssociatedTypeDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AssociatedTypeDeclSyntax)
  open func visit(_ node: SwiftSyntax.AttributeListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AttributeListSyntax)
  open func visit(_ node: SwiftSyntax.AttributeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AttributeSyntax)
  open func visit(_ node: SwiftSyntax.AttributedTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AttributedTypeSyntax)
  open func visit(_ node: SwiftSyntax.AvailabilityArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AvailabilityArgumentListSyntax)
  open func visit(_ node: SwiftSyntax.AvailabilityArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AvailabilityArgumentSyntax)
  open func visit(_ node: SwiftSyntax.AvailabilityConditionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AvailabilityConditionSyntax)
  open func visit(_ node: SwiftSyntax.AvailabilityLabeledArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AvailabilityLabeledArgumentSyntax)
  open func visit(_ node: SwiftSyntax.AwaitExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.AwaitExprSyntax)
  open func visit(_ node: SwiftSyntax.BackDeployedAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.BackDeployedAttributeArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.BinaryOperatorExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.BinaryOperatorExprSyntax)
  open func visit(_ node: SwiftSyntax.BooleanLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.BooleanLiteralExprSyntax)
  open func visit(_ node: SwiftSyntax.BorrowExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.BorrowExprSyntax)
  open func visit(_ node: SwiftSyntax.BreakStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.BreakStmtSyntax)
  open func visit(_ node: SwiftSyntax.CanImportExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CanImportExprSyntax)
  open func visit(_ node: SwiftSyntax.CanImportVersionInfoSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CanImportVersionInfoSyntax)
  open func visit(_ node: SwiftSyntax.CatchClauseListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CatchClauseListSyntax)
  open func visit(_ node: SwiftSyntax.CatchClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CatchClauseSyntax)
  open func visit(_ node: SwiftSyntax.CatchItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CatchItemListSyntax)
  open func visit(_ node: SwiftSyntax.CatchItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CatchItemSyntax)
  open func visit(_ node: SwiftSyntax.ClassDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClassDeclSyntax)
  open func visit(_ node: SwiftSyntax.ClassRestrictionTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClassRestrictionTypeSyntax)
  open func visit(_ node: SwiftSyntax.ClosureCaptureClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureCaptureClauseSyntax)
  open func visit(_ node: SwiftSyntax.ClosureCaptureListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureCaptureListSyntax)
  open func visit(_ node: SwiftSyntax.ClosureCaptureSpecifierSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureCaptureSpecifierSyntax)
  open func visit(_ node: SwiftSyntax.ClosureCaptureSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureCaptureSyntax)
  open func visit(_ node: SwiftSyntax.ClosureExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureExprSyntax)
  open func visit(_ node: SwiftSyntax.ClosureParameterClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureParameterClauseSyntax)
  open func visit(_ node: SwiftSyntax.ClosureParameterListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureParameterListSyntax)
  open func visit(_ node: SwiftSyntax.ClosureParameterSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureParameterSyntax)
  open func visit(_ node: SwiftSyntax.ClosureShorthandParameterListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureShorthandParameterListSyntax)
  open func visit(_ node: SwiftSyntax.ClosureShorthandParameterSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureShorthandParameterSyntax)
  open func visit(_ node: SwiftSyntax.ClosureSignatureSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ClosureSignatureSyntax)
  open func visit(_ node: SwiftSyntax.CodeBlockItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CodeBlockItemListSyntax)
  open func visit(_ node: SwiftSyntax.CodeBlockItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CodeBlockItemSyntax)
  open func visit(_ node: SwiftSyntax.CodeBlockSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CodeBlockSyntax)
  open func visit(_ node: SwiftSyntax.CompositionTypeElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CompositionTypeElementListSyntax)
  open func visit(_ node: SwiftSyntax.CompositionTypeElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CompositionTypeElementSyntax)
  open func visit(_ node: SwiftSyntax.CompositionTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CompositionTypeSyntax)
  open func visit(_ node: SwiftSyntax.ConditionElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ConditionElementListSyntax)
  open func visit(_ node: SwiftSyntax.ConditionElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ConditionElementSyntax)
  open func visit(_ node: SwiftSyntax.ConformanceRequirementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ConformanceRequirementSyntax)
  open func visit(_ node: SwiftSyntax.ConsumeExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ConsumeExprSyntax)
  open func visit(_ node: SwiftSyntax.ContinueStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ContinueStmtSyntax)
  open func visit(_ node: SwiftSyntax.ConventionAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ConventionAttributeArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.ConventionWitnessMethodAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ConventionWitnessMethodAttributeArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.CopyExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.CopyExprSyntax)
  open func visit(_ node: SwiftSyntax.DeclModifierDetailSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeclModifierDetailSyntax)
  open func visit(_ node: SwiftSyntax.DeclModifierListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeclModifierListSyntax)
  open func visit(_ node: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeclModifierSyntax)
  open func visit(_ node: SwiftSyntax.DeclNameArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeclNameArgumentListSyntax)
  open func visit(_ node: SwiftSyntax.DeclNameArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeclNameArgumentSyntax)
  open func visit(_ node: SwiftSyntax.DeclNameArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeclNameArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.DeclReferenceExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeclReferenceExprSyntax)
  open func visit(_ node: SwiftSyntax.DeferStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeferStmtSyntax)
  open func visit(_ node: SwiftSyntax.DeinitializerDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeinitializerDeclSyntax)
  open func visit(_ node: SwiftSyntax.DeinitializerEffectSpecifiersSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DeinitializerEffectSpecifiersSyntax)
  open func visit(_ node: SwiftSyntax.DerivativeAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DerivativeAttributeArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.DesignatedTypeListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DesignatedTypeListSyntax)
  open func visit(_ node: SwiftSyntax.DesignatedTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DesignatedTypeSyntax)
  open func visit(_ node: SwiftSyntax.DictionaryElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DictionaryElementListSyntax)
  open func visit(_ node: SwiftSyntax.DictionaryElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DictionaryElementSyntax)
  open func visit(_ node: SwiftSyntax.DictionaryExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DictionaryExprSyntax)
  open func visit(_ node: SwiftSyntax.DictionaryTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DictionaryTypeSyntax)
  open func visit(_ node: SwiftSyntax.DifferentiabilityArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DifferentiabilityArgumentListSyntax)
  open func visit(_ node: SwiftSyntax.DifferentiabilityArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DifferentiabilityArgumentSyntax)
  open func visit(_ node: SwiftSyntax.DifferentiabilityArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DifferentiabilityArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax)
  open func visit(_ node: SwiftSyntax.DifferentiableAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DifferentiableAttributeArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.DiscardAssignmentExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DiscardAssignmentExprSyntax)
  open func visit(_ node: SwiftSyntax.DiscardStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DiscardStmtSyntax)
  open func visit(_ node: SwiftSyntax.DoStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DoStmtSyntax)
  open func visit(_ node: SwiftSyntax.DocumentationAttributeArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DocumentationAttributeArgumentListSyntax)
  open func visit(_ node: SwiftSyntax.DocumentationAttributeArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DocumentationAttributeArgumentSyntax)
  open func visit(_ node: SwiftSyntax.DynamicReplacementAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.DynamicReplacementAttributeArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.EditorPlaceholderDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.EditorPlaceholderDeclSyntax)
  open func visit(_ node: SwiftSyntax.EditorPlaceholderExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.EditorPlaceholderExprSyntax)
  open func visit(_ node: SwiftSyntax.EffectsAttributeArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.EffectsAttributeArgumentListSyntax)
  open func visit(_ node: SwiftSyntax.EnumCaseDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.EnumCaseDeclSyntax)
  open func visit(_ node: SwiftSyntax.EnumCaseElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.EnumCaseElementListSyntax)
  open func visit(_ node: SwiftSyntax.EnumCaseElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.EnumCaseElementSyntax)
  open func visit(_ node: SwiftSyntax.EnumCaseParameterClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.EnumCaseParameterClauseSyntax)
  open func visit(_ node: SwiftSyntax.EnumCaseParameterListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.EnumCaseParameterListSyntax)
  open func visit(_ node: SwiftSyntax.EnumCaseParameterSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.EnumCaseParameterSyntax)
  open func visit(_ node: SwiftSyntax.EnumDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.EnumDeclSyntax)
  open func visit(_ node: SwiftSyntax.ExposeAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ExposeAttributeArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.ExprListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ExprListSyntax)
  open func visit(_ node: SwiftSyntax.ExpressionPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ExpressionPatternSyntax)
  open func visit(_ node: SwiftSyntax.ExpressionSegmentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ExpressionSegmentSyntax)
  open func visit(_ node: SwiftSyntax.ExpressionStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ExpressionStmtSyntax)
  open func visit(_ node: SwiftSyntax.ExtensionDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ExtensionDeclSyntax)
  open func visit(_ node: SwiftSyntax.FallThroughStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FallThroughStmtSyntax)
  open func visit(_ node: SwiftSyntax.FloatLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FloatLiteralExprSyntax)
  open func visit(_ node: SwiftSyntax.ForStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ForStmtSyntax)
  open func visit(_ node: SwiftSyntax.ForceUnwrapExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ForceUnwrapExprSyntax)
  open func visit(_ node: SwiftSyntax.FunctionCallExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FunctionCallExprSyntax)
  open func visit(_ node: SwiftSyntax.FunctionDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FunctionDeclSyntax)
  open func visit(_ node: SwiftSyntax.FunctionEffectSpecifiersSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FunctionEffectSpecifiersSyntax)
  open func visit(_ node: SwiftSyntax.FunctionParameterClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FunctionParameterClauseSyntax)
  open func visit(_ node: SwiftSyntax.FunctionParameterListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FunctionParameterListSyntax)
  open func visit(_ node: SwiftSyntax.FunctionParameterSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FunctionParameterSyntax)
  open func visit(_ node: SwiftSyntax.FunctionSignatureSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FunctionSignatureSyntax)
  open func visit(_ node: SwiftSyntax.FunctionTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.FunctionTypeSyntax)
  open func visit(_ node: SwiftSyntax.GenericArgumentClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericArgumentClauseSyntax)
  open func visit(_ node: SwiftSyntax.GenericArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericArgumentListSyntax)
  open func visit(_ node: SwiftSyntax.GenericArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericArgumentSyntax)
  open func visit(_ node: SwiftSyntax.GenericParameterClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericParameterClauseSyntax)
  open func visit(_ node: SwiftSyntax.GenericParameterListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericParameterListSyntax)
  open func visit(_ node: SwiftSyntax.GenericParameterSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericParameterSyntax)
  open func visit(_ node: SwiftSyntax.GenericRequirementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericRequirementListSyntax)
  open func visit(_ node: SwiftSyntax.GenericRequirementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericRequirementSyntax)
  open func visit(_ node: SwiftSyntax.GenericSpecializationExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericSpecializationExprSyntax)
  open func visit(_ node: SwiftSyntax.GenericWhereClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GenericWhereClauseSyntax)
  open func visit(_ node: SwiftSyntax.GuardStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.GuardStmtSyntax)
  open func visit(_ node: SwiftSyntax.IdentifierPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IdentifierPatternSyntax)
  open func visit(_ node: SwiftSyntax.IdentifierTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IdentifierTypeSyntax)
  open func visit(_ node: SwiftSyntax.IfConfigClauseListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IfConfigClauseListSyntax)
  open func visit(_ node: SwiftSyntax.IfConfigClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IfConfigClauseSyntax)
  open func visit(_ node: SwiftSyntax.IfConfigDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IfConfigDeclSyntax)
  open func visit(_ node: SwiftSyntax.IfExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IfExprSyntax)
  open func visit(_ node: SwiftSyntax.ImplementsAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ImplementsAttributeArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ImplicitlyUnwrappedOptionalTypeSyntax)
  open func visit(_ node: SwiftSyntax.ImportDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ImportDeclSyntax)
  open func visit(_ node: SwiftSyntax.ImportPathComponentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ImportPathComponentListSyntax)
  open func visit(_ node: SwiftSyntax.ImportPathComponentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ImportPathComponentSyntax)
  open func visit(_ node: SwiftSyntax.InOutExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.InOutExprSyntax)
  open func visit(_ node: SwiftSyntax.InfixOperatorExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.InfixOperatorExprSyntax)
  open func visit(_ node: SwiftSyntax.InheritanceClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.InheritanceClauseSyntax)
  open func visit(_ node: SwiftSyntax.InheritedTypeListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.InheritedTypeListSyntax)
  open func visit(_ node: SwiftSyntax.InheritedTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.InheritedTypeSyntax)
  open func visit(_ node: SwiftSyntax.InitializerClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.InitializerClauseSyntax)
  open func visit(_ node: SwiftSyntax.InitializerDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.InitializerDeclSyntax)
  open func visit(_ node: SwiftSyntax.IntegerLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IntegerLiteralExprSyntax)
  open func visit(_ node: SwiftSyntax.IsExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IsExprSyntax)
  open func visit(_ node: SwiftSyntax.IsTypePatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.IsTypePatternSyntax)
  open func visit(_ node: SwiftSyntax.KeyPathComponentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.KeyPathComponentListSyntax)
  open func visit(_ node: SwiftSyntax.KeyPathComponentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.KeyPathComponentSyntax)
  open func visit(_ node: SwiftSyntax.KeyPathExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.KeyPathExprSyntax)
  open func visit(_ node: SwiftSyntax.KeyPathOptionalComponentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.KeyPathOptionalComponentSyntax)
  open func visit(_ node: SwiftSyntax.KeyPathPropertyComponentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.KeyPathPropertyComponentSyntax)
  open func visit(_ node: SwiftSyntax.KeyPathSubscriptComponentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.KeyPathSubscriptComponentSyntax)
  open func visit(_ node: SwiftSyntax.LabeledExprListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.LabeledExprListSyntax)
  open func visit(_ node: SwiftSyntax.LabeledExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.LabeledExprSyntax)
  open func visit(_ node: SwiftSyntax.LabeledSpecializeArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.LabeledSpecializeArgumentSyntax)
  open func visit(_ node: SwiftSyntax.LabeledStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.LabeledStmtSyntax)
  open func visit(_ node: SwiftSyntax.LayoutRequirementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.LayoutRequirementSyntax)
  open func visit(_ node: SwiftSyntax.MacroDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MacroDeclSyntax)
  open func visit(_ node: SwiftSyntax.MacroExpansionDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MacroExpansionDeclSyntax)
  open func visit(_ node: SwiftSyntax.MacroExpansionExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MacroExpansionExprSyntax)
  open func visit(_ node: SwiftSyntax.MatchingPatternConditionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MatchingPatternConditionSyntax)
  open func visit(_ node: SwiftSyntax.MemberAccessExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MemberAccessExprSyntax)
  open func visit(_ node: SwiftSyntax.MemberBlockItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MemberBlockItemListSyntax)
  open func visit(_ node: SwiftSyntax.MemberBlockItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MemberBlockItemSyntax)
  open func visit(_ node: SwiftSyntax.MemberBlockSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MemberBlockSyntax)
  open func visit(_ node: SwiftSyntax.MemberTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MemberTypeSyntax)
  open func visit(_ node: SwiftSyntax.MetatypeTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MetatypeTypeSyntax)
  open func visit(_ node: SwiftSyntax.MissingDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MissingDeclSyntax)
  open func visit(_ node: SwiftSyntax.MissingExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MissingExprSyntax)
  open func visit(_ node: SwiftSyntax.MissingPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MissingPatternSyntax)
  open func visit(_ node: SwiftSyntax.MissingStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MissingStmtSyntax)
  open func visit(_ node: SwiftSyntax.MissingSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MissingSyntax)
  open func visit(_ node: SwiftSyntax.MissingTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MissingTypeSyntax)
  open func visit(_ node: SwiftSyntax.MultipleTrailingClosureElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MultipleTrailingClosureElementListSyntax)
  open func visit(_ node: SwiftSyntax.MultipleTrailingClosureElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.MultipleTrailingClosureElementSyntax)
  open func visit(_ node: SwiftSyntax.NamedOpaqueReturnTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.NamedOpaqueReturnTypeSyntax)
  open func visit(_ node: SwiftSyntax.NilLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.NilLiteralExprSyntax)
  open func visit(_ node: SwiftSyntax.ObjCSelectorPieceListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ObjCSelectorPieceListSyntax)
  open func visit(_ node: SwiftSyntax.ObjCSelectorPieceSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ObjCSelectorPieceSyntax)
  open func visit(_ node: SwiftSyntax.OpaqueReturnTypeOfAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.OpaqueReturnTypeOfAttributeArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.OperatorDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.OperatorDeclSyntax)
  open func visit(_ node: SwiftSyntax.OperatorPrecedenceAndTypesSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.OperatorPrecedenceAndTypesSyntax)
  open func visit(_ node: SwiftSyntax.OptionalBindingConditionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.OptionalBindingConditionSyntax)
  open func visit(_ node: SwiftSyntax.OptionalChainingExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.OptionalChainingExprSyntax)
  open func visit(_ node: SwiftSyntax.OptionalTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.OptionalTypeSyntax)
  open func visit(_ node: SwiftSyntax.OriginallyDefinedInAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.OriginallyDefinedInAttributeArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.PackElementExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PackElementExprSyntax)
  open func visit(_ node: SwiftSyntax.PackElementTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PackElementTypeSyntax)
  open func visit(_ node: SwiftSyntax.PackExpansionExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PackExpansionExprSyntax)
  open func visit(_ node: SwiftSyntax.PackExpansionTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PackExpansionTypeSyntax)
  open func visit(_ node: SwiftSyntax.PatternBindingListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PatternBindingListSyntax)
  open func visit(_ node: SwiftSyntax.PatternBindingSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PatternBindingSyntax)
  open func visit(_ node: SwiftSyntax.PatternExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PatternExprSyntax)
  open func visit(_ node: SwiftSyntax.PlatformVersionItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PlatformVersionItemListSyntax)
  open func visit(_ node: SwiftSyntax.PlatformVersionItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PlatformVersionItemSyntax)
  open func visit(_ node: SwiftSyntax.PlatformVersionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PlatformVersionSyntax)
  open func visit(_ node: SwiftSyntax.PostfixIfConfigExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PostfixIfConfigExprSyntax)
  open func visit(_ node: SwiftSyntax.PostfixOperatorExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PostfixOperatorExprSyntax)
  open func visit(_ node: SwiftSyntax.PoundSourceLocationArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PoundSourceLocationArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.PoundSourceLocationSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PoundSourceLocationSyntax)
  open func visit(_ node: SwiftSyntax.PrecedenceGroupAssignmentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrecedenceGroupAssignmentSyntax)
  open func visit(_ node: SwiftSyntax.PrecedenceGroupAssociativitySyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrecedenceGroupAssociativitySyntax)
  open func visit(_ node: SwiftSyntax.PrecedenceGroupAttributeListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrecedenceGroupAttributeListSyntax)
  open func visit(_ node: SwiftSyntax.PrecedenceGroupDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrecedenceGroupDeclSyntax)
  open func visit(_ node: SwiftSyntax.PrecedenceGroupNameListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrecedenceGroupNameListSyntax)
  open func visit(_ node: SwiftSyntax.PrecedenceGroupNameSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrecedenceGroupNameSyntax)
  open func visit(_ node: SwiftSyntax.PrecedenceGroupRelationSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrecedenceGroupRelationSyntax)
  open func visit(_ node: SwiftSyntax.PrefixOperatorExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrefixOperatorExprSyntax)
  open func visit(_ node: SwiftSyntax.PrimaryAssociatedTypeClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrimaryAssociatedTypeClauseSyntax)
  open func visit(_ node: SwiftSyntax.PrimaryAssociatedTypeListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrimaryAssociatedTypeListSyntax)
  open func visit(_ node: SwiftSyntax.PrimaryAssociatedTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.PrimaryAssociatedTypeSyntax)
  open func visit(_ node: SwiftSyntax.ProtocolDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ProtocolDeclSyntax)
  open func visit(_ node: SwiftSyntax.RegexLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.RegexLiteralExprSyntax)
  open func visit(_ node: SwiftSyntax.RepeatStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.RepeatStmtSyntax)
  open func visit(_ node: SwiftSyntax.ReturnClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ReturnClauseSyntax)
  open func visit(_ node: SwiftSyntax.ReturnStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ReturnStmtSyntax)
  open func visit(_ node: SwiftSyntax.SameTypeRequirementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SameTypeRequirementSyntax)
  open func visit(_ node: SwiftSyntax.SequenceExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SequenceExprSyntax)
  open func visit(_ node: SwiftSyntax.SimpleStringLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SimpleStringLiteralExprSyntax)
  open func visit(_ node: SwiftSyntax.SimpleStringLiteralSegmentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SimpleStringLiteralSegmentListSyntax)
  open func visit(_ node: SwiftSyntax.SomeOrAnyTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SomeOrAnyTypeSyntax)
  open func visit(_ node: SwiftSyntax.SourceFileSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SourceFileSyntax)
  open func visit(_ node: SwiftSyntax.SpecializeAttributeArgumentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SpecializeAttributeArgumentListSyntax)
  open func visit(_ node: SwiftSyntax.SpecializeAvailabilityArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SpecializeAvailabilityArgumentSyntax)
  open func visit(_ node: SwiftSyntax.SpecializeTargetFunctionArgumentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SpecializeTargetFunctionArgumentSyntax)
  open func visit(_ node: SwiftSyntax.StringLiteralExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.StringLiteralExprSyntax)
  open func visit(_ node: SwiftSyntax.StringLiteralSegmentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.StringLiteralSegmentListSyntax)
  open func visit(_ node: SwiftSyntax.StringSegmentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.StringSegmentSyntax)
  open func visit(_ node: SwiftSyntax.StructDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.StructDeclSyntax)
  open func visit(_ node: SwiftSyntax.SubscriptCallExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SubscriptCallExprSyntax)
  open func visit(_ node: SwiftSyntax.SubscriptDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SubscriptDeclSyntax)
  open func visit(_ node: SwiftSyntax.SuperExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SuperExprSyntax)
  open func visit(_ node: SwiftSyntax.SuppressedTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SuppressedTypeSyntax)
  open func visit(_ node: SwiftSyntax.SwitchCaseItemListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SwitchCaseItemListSyntax)
  open func visit(_ node: SwiftSyntax.SwitchCaseItemSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SwitchCaseItemSyntax)
  open func visit(_ node: SwiftSyntax.SwitchCaseLabelSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SwitchCaseLabelSyntax)
  open func visit(_ node: SwiftSyntax.SwitchCaseListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SwitchCaseListSyntax)
  open func visit(_ node: SwiftSyntax.SwitchCaseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SwitchCaseSyntax)
  open func visit(_ node: SwiftSyntax.SwitchDefaultLabelSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SwitchDefaultLabelSyntax)
  open func visit(_ node: SwiftSyntax.SwitchExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.SwitchExprSyntax)
  open func visit(_ node: SwiftSyntax.TernaryExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TernaryExprSyntax)
  open func visit(_ node: SwiftSyntax.ThrowStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ThrowStmtSyntax)
  open func visit(_ node: SwiftSyntax.TryExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TryExprSyntax)
  open func visit(_ node: SwiftSyntax.TupleExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TupleExprSyntax)
  open func visit(_ node: SwiftSyntax.TuplePatternElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TuplePatternElementListSyntax)
  open func visit(_ node: SwiftSyntax.TuplePatternElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TuplePatternElementSyntax)
  open func visit(_ node: SwiftSyntax.TuplePatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TuplePatternSyntax)
  open func visit(_ node: SwiftSyntax.TupleTypeElementListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TupleTypeElementListSyntax)
  open func visit(_ node: SwiftSyntax.TupleTypeElementSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TupleTypeElementSyntax)
  open func visit(_ node: SwiftSyntax.TupleTypeSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TupleTypeSyntax)
  open func visit(_ node: SwiftSyntax.TypeAliasDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TypeAliasDeclSyntax)
  open func visit(_ node: SwiftSyntax.TypeAnnotationSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TypeAnnotationSyntax)
  open func visit(_ node: SwiftSyntax.TypeEffectSpecifiersSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TypeEffectSpecifiersSyntax)
  open func visit(_ node: SwiftSyntax.TypeExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TypeExprSyntax)
  open func visit(_ node: SwiftSyntax.TypeInitializerClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TypeInitializerClauseSyntax)
  open func visit(_ node: SwiftSyntax.UnavailableFromAsyncAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.UnavailableFromAsyncAttributeArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.UnderscorePrivateAttributeArgumentsSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.UnderscorePrivateAttributeArgumentsSyntax)
  open func visit(_ node: SwiftSyntax.UnexpectedNodesSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.UnexpectedNodesSyntax)
  open func visit(_ node: SwiftSyntax.UnresolvedAsExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.UnresolvedAsExprSyntax)
  open func visit(_ node: SwiftSyntax.UnresolvedIsExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.UnresolvedIsExprSyntax)
  open func visit(_ node: SwiftSyntax.UnresolvedTernaryExprSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.UnresolvedTernaryExprSyntax)
  open func visit(_ node: SwiftSyntax.ValueBindingPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.ValueBindingPatternSyntax)
  open func visit(_ node: SwiftSyntax.VariableDeclSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.VariableDeclSyntax)
  open func visit(_ node: SwiftSyntax.VersionComponentListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.VersionComponentListSyntax)
  open func visit(_ node: SwiftSyntax.VersionComponentSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.VersionComponentSyntax)
  open func visit(_ node: SwiftSyntax.VersionTupleSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.VersionTupleSyntax)
  open func visit(_ node: SwiftSyntax.WhereClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.WhereClauseSyntax)
  open func visit(_ node: SwiftSyntax.WhileStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.WhileStmtSyntax)
  open func visit(_ node: SwiftSyntax.WildcardPatternSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.WildcardPatternSyntax)
  open func visit(_ node: SwiftSyntax.YieldStmtSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.YieldStmtSyntax)
  open func visit(_ node: SwiftSyntax.YieldedExpressionListSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.YieldedExpressionListSyntax)
  open func visit(_ node: SwiftSyntax.YieldedExpressionSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.YieldedExpressionSyntax)
  open func visit(_ node: SwiftSyntax.YieldedExpressionsClauseSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.YieldedExpressionsClauseSyntax)
  open func visit(_ token: SwiftSyntax.TokenSyntax) -> SwiftSyntax.SyntaxVisitorContinueKind
  open func visitPost(_ node: SwiftSyntax.TokenSyntax)
  @objc deinit
}
public enum TokenKind : Swift.Hashable {
  case arrow
  case atSign
  case backslash
  case backtick
  case binaryOperator(Swift.String)
  case colon
  case comma
  case dollarIdentifier(Swift.String)
  case ellipsis
  case endOfFile
  case equal
  case exclamationMark
  case floatLiteral(Swift.String)
  case identifier(Swift.String)
  case infixQuestionMark
  case integerLiteral(Swift.String)
  case keyword(SwiftSyntax.Keyword)
  case leftAngle
  case leftBrace
  case leftParen
  case leftSquare
  case multilineStringQuote
  case period
  case postfixOperator(Swift.String)
  case postfixQuestionMark
  case pound
  case poundAvailable
  case poundElse
  case poundElseif
  case poundEndif
  case poundIf
  case poundSourceLocation
  case poundUnavailable
  case prefixAmpersand
  case prefixOperator(Swift.String)
  case rawStringPoundDelimiter(Swift.String)
  case regexLiteralPattern(Swift.String)
  case regexPoundDelimiter(Swift.String)
  case regexSlash
  case rightAngle
  case rightBrace
  case rightParen
  case rightSquare
  case semicolon
  case shebang(Swift.String)
  case singleQuote
  case stringQuote
  case stringSegment(Swift.String)
  case unknown(Swift.String)
  case wildcard
  public var isPunctuation: Swift.Bool {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.TokenKind : Swift.Equatable {
  public static func == (lhs: SwiftSyntax.TokenKind, rhs: SwiftSyntax.TokenKind) -> Swift.Bool
}
extension SwiftSyntax.TokenSyntax {
  public static func arrowToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func atSignToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func backslashToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func backtickToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func binaryOperator(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func colonToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func commaToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func dollarIdentifier(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func ellipsisToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func endOfFileToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func equalToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func exclamationMarkToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func floatLiteral(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func identifier(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func infixQuestionMarkToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func integerLiteral(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func keyword(_ value: SwiftSyntax.Keyword, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func leftAngleToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func leftBraceToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func leftParenToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func leftSquareToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func multilineStringQuoteToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func periodToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func postfixOperator(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func postfixQuestionMarkToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func poundToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func poundAvailableToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func poundElseToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func poundElseifToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func poundEndifToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func poundIfToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func poundSourceLocationToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func poundUnavailableToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func prefixAmpersandToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func prefixOperator(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func rawStringPoundDelimiter(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func regexLiteralPattern(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func regexPoundDelimiter(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func regexSlashToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func rightAngleToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func rightBraceToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func rightParenToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func rightSquareToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func semicolonToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func shebang(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func singleQuoteToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func stringQuoteToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func stringSegment(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func unknown(_ text: Swift.String, leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
  public static func wildcardToken(leadingTrivia: SwiftSyntax.Trivia = [], trailingTrivia: SwiftSyntax.Trivia = [], presence: SwiftSyntax.SourcePresence = .present) -> SwiftSyntax.TokenSyntax
}
public enum TriviaPiece {
  case backslashes(Swift.Int)
  case blockComment(Swift.String)
  case carriageReturns(Swift.Int)
  case carriageReturnLineFeeds(Swift.Int)
  case docBlockComment(Swift.String)
  case docLineComment(Swift.String)
  case formfeeds(Swift.Int)
  case lineComment(Swift.String)
  case newlines(Swift.Int)
  case pounds(Swift.Int)
  case spaces(Swift.Int)
  case tabs(Swift.Int)
  case unexpectedText(Swift.String)
  case verticalTabs(Swift.Int)
}
extension SwiftSyntax.TriviaPiece : Swift.TextOutputStreamable {
  public func write(to target: inout some TextOutputStream)
}
extension SwiftSyntax.TriviaPiece : Swift.CustomDebugStringConvertible {
  public var debugDescription: Swift.String {
    get
  }
}
extension SwiftSyntax.Trivia {
  public static func backslashes(_ count: Swift.Int) -> SwiftSyntax.Trivia
  public static var backslash: SwiftSyntax.Trivia {
    get
  }
  public static func blockComment(_ text: Swift.String) -> SwiftSyntax.Trivia
  public static func carriageReturns(_ count: Swift.Int) -> SwiftSyntax.Trivia
  public static var carriageReturn: SwiftSyntax.Trivia {
    get
  }
  public static func carriageReturnLineFeeds(_ count: Swift.Int) -> SwiftSyntax.Trivia
  public static var carriageReturnLineFeed: SwiftSyntax.Trivia {
    get
  }
  public static func docBlockComment(_ text: Swift.String) -> SwiftSyntax.Trivia
  public static func docLineComment(_ text: Swift.String) -> SwiftSyntax.Trivia
  public static func formfeeds(_ count: Swift.Int) -> SwiftSyntax.Trivia
  public static var formfeed: SwiftSyntax.Trivia {
    get
  }
  public static func lineComment(_ text: Swift.String) -> SwiftSyntax.Trivia
  public static func newlines(_ count: Swift.Int) -> SwiftSyntax.Trivia
  public static var newline: SwiftSyntax.Trivia {
    get
  }
  public static func pounds(_ count: Swift.Int) -> SwiftSyntax.Trivia
  public static var pound: SwiftSyntax.Trivia {
    get
  }
  public static func spaces(_ count: Swift.Int) -> SwiftSyntax.Trivia
  public static var space: SwiftSyntax.Trivia {
    get
  }
  public static func tabs(_ count: Swift.Int) -> SwiftSyntax.Trivia
  public static var tab: SwiftSyntax.Trivia {
    get
  }
  public static func unexpectedText(_ text: Swift.String) -> SwiftSyntax.Trivia
  public static func verticalTabs(_ count: Swift.Int) -> SwiftSyntax.Trivia
  public static var verticalTab: SwiftSyntax.Trivia {
    get
  }
}
extension SwiftSyntax.TriviaPiece : Swift.Equatable {
  public static func == (a: SwiftSyntax.TriviaPiece, b: SwiftSyntax.TriviaPiece) -> Swift.Bool
}
extension SwiftSyntax.TriviaPiece {
  public var sourceLength: SwiftSyntax.SourceLength {
    get
  }
}
extension SwiftSyntax.TriviaPiece {
  public var isWhitespace: Swift.Bool {
    get
  }
  public var isNewline: Swift.Bool {
    get
  }
  public var isSpaceOrTab: Swift.Bool {
    get
  }
}
public struct AccessorDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifier: SwiftSyntax.DeclModifierSyntax? = nil, _ unexpectedBetweenModifierAndAccessorSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, accessorSpecifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenAccessorSpecifierAndParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameters: SwiftSyntax.AccessorParametersSyntax? = nil, _ unexpectedBetweenParametersAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, effectSpecifiers: SwiftSyntax.AccessorEffectSpecifiersSyntax? = nil, _ unexpectedBetweenEffectSpecifiersAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, body: SwiftSyntax.CodeBlockSyntax? = nil, _ unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.AccessorDeclSyntax
  public var unexpectedBetweenAttributesAndModifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifier: SwiftSyntax.DeclModifierSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenModifierAndAccessorSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var accessorSpecifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenAccessorSpecifierAndParameters: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var parameters: SwiftSyntax.AccessorParametersSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenParametersAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var effectSpecifiers: SwiftSyntax.AccessorEffectSpecifiersSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenEffectSpecifiersAndBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var body: SwiftSyntax.CodeBlockSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ActorDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndActorKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, actorKeyword: SwiftSyntax.TokenSyntax = .keyword(.actor), _ unexpectedBetweenActorKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, _ unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, memberBlock: SwiftSyntax.MemberBlockSyntax, _ unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.ActorDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.ActorDeclSyntax
  public var unexpectedBetweenModifiersAndActorKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var actorKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenActorKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var memberBlock: SwiftSyntax.MemberBlockSyntax {
    get
    set(value)
  }
  public var unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct AssociatedTypeDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndAssociatedtypeKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, associatedtypeKeyword: SwiftSyntax.TokenSyntax = .keyword(.associatedtype), _ unexpectedBetweenAssociatedtypeKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, _ unexpectedBetweenInheritanceClauseAndInitializer: SwiftSyntax.UnexpectedNodesSyntax? = nil, initializer: SwiftSyntax.TypeInitializerClauseSyntax? = nil, _ unexpectedBetweenInitializerAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedAfterGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.AssociatedTypeDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.AssociatedTypeDeclSyntax
  public var unexpectedBetweenModifiersAndAssociatedtypeKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var associatedtypeKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenAssociatedtypeKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenInheritanceClauseAndInitializer: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var initializer: SwiftSyntax.TypeInitializerClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenInitializerAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ClassDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndClassKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, classKeyword: SwiftSyntax.TokenSyntax = .keyword(.class), _ unexpectedBetweenClassKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, _ unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, memberBlock: SwiftSyntax.MemberBlockSyntax, _ unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.ClassDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.ClassDeclSyntax
  public var unexpectedBetweenModifiersAndClassKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var classKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenClassKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var memberBlock: SwiftSyntax.MemberBlockSyntax {
    get
    set(value)
  }
  public var unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DeinitializerDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndDeinitKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, deinitKeyword: SwiftSyntax.TokenSyntax = .keyword(.deinit), _ unexpectedBetweenDeinitKeywordAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, effectSpecifiers: SwiftSyntax.DeinitializerEffectSpecifiersSyntax? = nil, _ unexpectedBetweenEffectSpecifiersAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, body: SwiftSyntax.CodeBlockSyntax? = nil, _ unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.DeinitializerDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.DeinitializerDeclSyntax
  public var unexpectedBetweenModifiersAndDeinitKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var deinitKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenDeinitKeywordAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var effectSpecifiers: SwiftSyntax.DeinitializerEffectSpecifiersSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenEffectSpecifiersAndBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var body: SwiftSyntax.CodeBlockSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct EditorPlaceholderDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? = nil, placeholder: SwiftSyntax.TokenSyntax, _ unexpectedAfterPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.EditorPlaceholderDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.EditorPlaceholderDeclSyntax
  public var unexpectedBetweenModifiersAndPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var placeholder: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct EnumCaseDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndCaseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, caseKeyword: SwiftSyntax.TokenSyntax = .keyword(.case), _ unexpectedBetweenCaseKeywordAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, elements: SwiftSyntax.EnumCaseElementListSyntax, _ unexpectedAfterElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.EnumCaseDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.EnumCaseDeclSyntax
  public var unexpectedBetweenModifiersAndCaseKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var caseKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenCaseKeywordAndElements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var elements: SwiftSyntax.EnumCaseElementListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.elements.append(newElement) instead")
  public func addElement(_ element: SwiftSyntax.EnumCaseElementSyntax) -> SwiftSyntax.EnumCaseDeclSyntax
  public var unexpectedAfterElements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct EnumDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndEnumKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, enumKeyword: SwiftSyntax.TokenSyntax = .keyword(.enum), _ unexpectedBetweenEnumKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, _ unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, memberBlock: SwiftSyntax.MemberBlockSyntax, _ unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.EnumDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.EnumDeclSyntax
  public var unexpectedBetweenModifiersAndEnumKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var enumKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenEnumKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var memberBlock: SwiftSyntax.MemberBlockSyntax {
    get
    set(value)
  }
  public var unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ExtensionDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndExtensionKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, extensionKeyword: SwiftSyntax.TokenSyntax = .keyword(.extension), _ unexpectedBetweenExtensionKeywordAndExtendedType: SwiftSyntax.UnexpectedNodesSyntax? = nil, extendedType: some TypeSyntaxProtocol, _ unexpectedBetweenExtendedTypeAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, memberBlock: SwiftSyntax.MemberBlockSyntax, _ unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.ExtensionDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.ExtensionDeclSyntax
  public var unexpectedBetweenModifiersAndExtensionKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var extensionKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenExtensionKeywordAndExtendedType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var extendedType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenExtendedTypeAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var memberBlock: SwiftSyntax.MemberBlockSyntax {
    get
    set(value)
  }
  public var unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct FunctionDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndFuncKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, funcKeyword: SwiftSyntax.TokenSyntax = .keyword(.func), _ unexpectedBetweenFuncKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, _ unexpectedBetweenGenericParameterClauseAndSignature: SwiftSyntax.UnexpectedNodesSyntax? = nil, signature: SwiftSyntax.FunctionSignatureSyntax, _ unexpectedBetweenSignatureAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, body: SwiftSyntax.CodeBlockSyntax? = nil, _ unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.FunctionDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.FunctionDeclSyntax
  public var unexpectedBetweenModifiersAndFuncKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var funcKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenFuncKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericParameterClauseAndSignature: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var signature: SwiftSyntax.FunctionSignatureSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenSignatureAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var body: SwiftSyntax.CodeBlockSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct IfConfigDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeClauses: SwiftSyntax.UnexpectedNodesSyntax? = nil, clauses: SwiftSyntax.IfConfigClauseListSyntax, _ unexpectedBetweenClausesAndPoundEndif: SwiftSyntax.UnexpectedNodesSyntax? = nil, poundEndif: SwiftSyntax.TokenSyntax = .poundEndifToken(), _ unexpectedAfterPoundEndif: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeClauses: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var clauses: SwiftSyntax.IfConfigClauseListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.clauses.append(newElement) instead")
  public func addClause(_ element: SwiftSyntax.IfConfigClauseSyntax) -> SwiftSyntax.IfConfigDeclSyntax
  public var unexpectedBetweenClausesAndPoundEndif: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var poundEndif: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterPoundEndif: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ImportDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndImportKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, importKeyword: SwiftSyntax.TokenSyntax = .keyword(.import), _ unexpectedBetweenImportKeywordAndImportKindSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, importKindSpecifier: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenImportKindSpecifierAndPath: SwiftSyntax.UnexpectedNodesSyntax? = nil, path: SwiftSyntax.ImportPathComponentListSyntax, _ unexpectedAfterPath: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.ImportDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.ImportDeclSyntax
  public var unexpectedBetweenModifiersAndImportKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var importKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenImportKeywordAndImportKindSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var importKindSpecifier: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenImportKindSpecifierAndPath: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var path: SwiftSyntax.ImportPathComponentListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.path.append(newElement) instead")
  public func addPathComponent(_ element: SwiftSyntax.ImportPathComponentSyntax) -> SwiftSyntax.ImportDeclSyntax
  public var unexpectedAfterPath: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct InitializerDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndInitKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, initKeyword: SwiftSyntax.TokenSyntax = .keyword(.`init`), _ unexpectedBetweenInitKeywordAndOptionalMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, optionalMark: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenOptionalMarkAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, _ unexpectedBetweenGenericParameterClauseAndSignature: SwiftSyntax.UnexpectedNodesSyntax? = nil, signature: SwiftSyntax.FunctionSignatureSyntax, _ unexpectedBetweenSignatureAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, body: SwiftSyntax.CodeBlockSyntax? = nil, _ unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.InitializerDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.InitializerDeclSyntax
  public var unexpectedBetweenModifiersAndInitKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var initKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenInitKeywordAndOptionalMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var optionalMark: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenOptionalMarkAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericParameterClauseAndSignature: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var signature: SwiftSyntax.FunctionSignatureSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenSignatureAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var body: SwiftSyntax.CodeBlockSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MacroDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndMacroKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, macroKeyword: SwiftSyntax.TokenSyntax = .keyword(.macro), _ unexpectedBetweenMacroKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, _ unexpectedBetweenGenericParameterClauseAndSignature: SwiftSyntax.UnexpectedNodesSyntax? = nil, signature: SwiftSyntax.FunctionSignatureSyntax, _ unexpectedBetweenSignatureAndDefinition: SwiftSyntax.UnexpectedNodesSyntax? = nil, definition: SwiftSyntax.InitializerClauseSyntax? = nil, _ unexpectedBetweenDefinitionAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedAfterGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.MacroDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.MacroDeclSyntax
  public var unexpectedBetweenModifiersAndMacroKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var macroKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenMacroKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericParameterClauseAndSignature: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var signature: SwiftSyntax.FunctionSignatureSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenSignatureAndDefinition: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var definition: SwiftSyntax.InitializerClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenDefinitionAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MacroExpansionDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndPound: SwiftSyntax.UnexpectedNodesSyntax? = nil, pound: SwiftSyntax.TokenSyntax = .poundToken(), _ unexpectedBetweenPoundAndMacroName: SwiftSyntax.UnexpectedNodesSyntax? = nil, macroName: SwiftSyntax.TokenSyntax, _ unexpectedBetweenMacroNameAndGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? = nil, _ unexpectedBetweenGenericArgumentClauseAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, arguments: SwiftSyntax.LabeledExprListSyntax, _ unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], _ unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.MacroExpansionDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.MacroExpansionDeclSyntax
  public var unexpectedBetweenModifiersAndPound: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var pound: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPoundAndMacroName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var macroName: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenMacroNameAndGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericArgumentClauseAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var arguments: SwiftSyntax.LabeledExprListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.arguments.append(newElement) instead")
  public func addArgument(_ element: SwiftSyntax.LabeledExprSyntax) -> SwiftSyntax.MacroExpansionDeclSyntax
  public var unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingClosure: SwiftSyntax.ClosureExprSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.additionalTrailingClosures.append(newElement) instead")
  public func addAdditionalTrailingClosure(_ element: SwiftSyntax.MultipleTrailingClosureElementSyntax) -> SwiftSyntax.MacroExpansionDeclSyntax
  public var unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MissingDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? = nil, placeholder: SwiftSyntax.TokenSyntax, _ unexpectedAfterPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.MissingDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.MissingDeclSyntax
  public var unexpectedBetweenModifiersAndPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var placeholder: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct OperatorDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeFixitySpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, fixitySpecifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenFixitySpecifierAndOperatorKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, operatorKeyword: SwiftSyntax.TokenSyntax = .keyword(.operator), _ unexpectedBetweenOperatorKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndOperatorPrecedenceAndTypes: SwiftSyntax.UnexpectedNodesSyntax? = nil, operatorPrecedenceAndTypes: SwiftSyntax.OperatorPrecedenceAndTypesSyntax? = nil, _ unexpectedAfterOperatorPrecedenceAndTypes: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeFixitySpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var fixitySpecifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenFixitySpecifierAndOperatorKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var operatorKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenOperatorKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndOperatorPrecedenceAndTypes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var operatorPrecedenceAndTypes: SwiftSyntax.OperatorPrecedenceAndTypesSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterOperatorPrecedenceAndTypes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PoundSourceLocationSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePoundSourceLocation: SwiftSyntax.UnexpectedNodesSyntax? = nil, poundSourceLocation: SwiftSyntax.TokenSyntax = .poundSourceLocationToken(), _ unexpectedBetweenPoundSourceLocationAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, arguments: SwiftSyntax.PoundSourceLocationArgumentsSyntax? = nil, _ unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforePoundSourceLocation: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var poundSourceLocation: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPoundSourceLocationAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var arguments: SwiftSyntax.PoundSourceLocationArgumentsSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PrecedenceGroupDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndPrecedencegroupKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, precedencegroupKeyword: SwiftSyntax.TokenSyntax = .keyword(.precedencegroup), _ unexpectedBetweenPrecedencegroupKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), _ unexpectedBetweenLeftBraceAndGroupAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, groupAttributes: SwiftSyntax.PrecedenceGroupAttributeListSyntax, _ unexpectedBetweenGroupAttributesAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), _ unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.PrecedenceGroupDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.PrecedenceGroupDeclSyntax
  public var unexpectedBetweenModifiersAndPrecedencegroupKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var precedencegroupKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPrecedencegroupKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftBraceAndGroupAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var groupAttributes: SwiftSyntax.PrecedenceGroupAttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.groupAttributes.append(newElement) instead")
  public func addGroupAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.PrecedenceGroupDeclSyntax
  public var unexpectedBetweenGroupAttributesAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ProtocolDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndProtocolKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, protocolKeyword: SwiftSyntax.TokenSyntax = .keyword(.protocol), _ unexpectedBetweenProtocolKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndPrimaryAssociatedTypeClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, primaryAssociatedTypeClause: SwiftSyntax.PrimaryAssociatedTypeClauseSyntax? = nil, _ unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, memberBlock: SwiftSyntax.MemberBlockSyntax, _ unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.ProtocolDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.ProtocolDeclSyntax
  public var unexpectedBetweenModifiersAndProtocolKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var protocolKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenProtocolKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndPrimaryAssociatedTypeClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var primaryAssociatedTypeClause: SwiftSyntax.PrimaryAssociatedTypeClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var memberBlock: SwiftSyntax.MemberBlockSyntax {
    get
    set(value)
  }
  public var unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct StructDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndStructKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, structKeyword: SwiftSyntax.TokenSyntax = .keyword(.struct), _ unexpectedBetweenStructKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, _ unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, _ unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, memberBlock: SwiftSyntax.MemberBlockSyntax, _ unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.StructDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.StructDeclSyntax
  public var unexpectedBetweenModifiersAndStructKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var structKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenStructKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var memberBlock: SwiftSyntax.MemberBlockSyntax {
    get
    set(value)
  }
  public var unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SubscriptDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndSubscriptKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, subscriptKeyword: SwiftSyntax.TokenSyntax = .keyword(.subscript), _ unexpectedBetweenSubscriptKeywordAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, _ unexpectedBetweenGenericParameterClauseAndParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameterClause: SwiftSyntax.FunctionParameterClauseSyntax, _ unexpectedBetweenParameterClauseAndReturnClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, returnClause: SwiftSyntax.ReturnClauseSyntax, _ unexpectedBetweenReturnClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndAccessorBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, accessorBlock: SwiftSyntax.AccessorBlockSyntax? = nil, _ unexpectedAfterAccessorBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.SubscriptDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.SubscriptDeclSyntax
  public var unexpectedBetweenModifiersAndSubscriptKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var subscriptKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenSubscriptKeywordAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericParameterClauseAndParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var parameterClause: SwiftSyntax.FunctionParameterClauseSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenParameterClauseAndReturnClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var returnClause: SwiftSyntax.ReturnClauseSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenReturnClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericWhereClauseAndAccessorBlock: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var accessorBlock: SwiftSyntax.AccessorBlockSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterAccessorBlock: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct TypeAliasDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndTypealiasKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, typealiasKeyword: SwiftSyntax.TokenSyntax = .keyword(.typealias), _ unexpectedBetweenTypealiasKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, _ unexpectedBetweenGenericParameterClauseAndInitializer: SwiftSyntax.UnexpectedNodesSyntax? = nil, initializer: SwiftSyntax.TypeInitializerClauseSyntax, _ unexpectedBetweenInitializerAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedAfterGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.TypeAliasDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.TypeAliasDeclSyntax
  public var unexpectedBetweenModifiersAndTypealiasKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var typealiasKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenTypealiasKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericParameterClauseAndInitializer: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var initializer: SwiftSyntax.TypeInitializerClauseSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenInitializerAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct VariableDeclSyntax : SwiftSyntax.DeclSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndBindingSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, bindingSpecifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenBindingSpecifierAndBindings: SwiftSyntax.UnexpectedNodesSyntax? = nil, bindings: SwiftSyntax.PatternBindingListSyntax, _ unexpectedAfterBindings: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.VariableDeclSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.VariableDeclSyntax
  public var unexpectedBetweenModifiersAndBindingSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var bindingSpecifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenBindingSpecifierAndBindings: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var bindings: SwiftSyntax.PatternBindingListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.bindings.append(newElement) instead")
  public func addBinding(_ element: SwiftSyntax.PatternBindingSyntax) -> SwiftSyntax.VariableDeclSyntax
  public var unexpectedAfterBindings: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ArrayExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquare: SwiftSyntax.TokenSyntax = .leftSquareToken(), _ unexpectedBetweenLeftSquareAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, elements: SwiftSyntax.ArrayElementListSyntax, _ unexpectedBetweenElementsAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquare: SwiftSyntax.TokenSyntax = .rightSquareToken(), _ unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftSquareAndElements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var elements: SwiftSyntax.ArrayElementListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.elements.append(newElement) instead")
  public func addElement(_ element: SwiftSyntax.ArrayElementSyntax) -> SwiftSyntax.ArrayExprSyntax
  public var unexpectedBetweenElementsAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ArrowExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, effectSpecifiers: SwiftSyntax.TypeEffectSpecifiersSyntax? = nil, _ unexpectedBetweenEffectSpecifiersAndArrow: SwiftSyntax.UnexpectedNodesSyntax? = nil, arrow: SwiftSyntax.TokenSyntax = .arrowToken(), _ unexpectedAfterArrow: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var effectSpecifiers: SwiftSyntax.TypeEffectSpecifiersSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenEffectSpecifiersAndArrow: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var arrow: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterArrow: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct AsExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedBetweenExpressionAndAsKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, asKeyword: SwiftSyntax.TokenSyntax = .keyword(.as), _ unexpectedBetweenAsKeywordAndQuestionOrExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, questionOrExclamationMark: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenQuestionOrExclamationMarkAndType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedAfterType: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenExpressionAndAsKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var asKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenAsKeywordAndQuestionOrExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var questionOrExclamationMark: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenQuestionOrExclamationMarkAndType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedAfterType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct AssignmentExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeEqual: SwiftSyntax.UnexpectedNodesSyntax? = nil, equal: SwiftSyntax.TokenSyntax = .equalToken(), _ unexpectedAfterEqual: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeEqual: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var equal: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterEqual: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct AwaitExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAwaitKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, awaitKeyword: SwiftSyntax.TokenSyntax = .keyword(.await), _ unexpectedBetweenAwaitKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAwaitKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var awaitKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenAwaitKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct BinaryOperatorExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeOperator: SwiftSyntax.UnexpectedNodesSyntax? = nil, operator: SwiftSyntax.TokenSyntax, _ unexpectedAfterOperator: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeOperator: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var `operator`: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterOperator: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct BooleanLiteralExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLiteral: SwiftSyntax.UnexpectedNodesSyntax? = nil, literal: SwiftSyntax.TokenSyntax, _ unexpectedAfterLiteral: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLiteral: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var literal: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterLiteral: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct BorrowExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBorrowKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, borrowKeyword: SwiftSyntax.TokenSyntax = .keyword(._borrow), _ unexpectedBetweenBorrowKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeBorrowKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var borrowKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenBorrowKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct CanImportExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeCanImportKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, canImportKeyword: SwiftSyntax.TokenSyntax = .keyword(.canImport), _ unexpectedBetweenCanImportKeywordAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndImportPath: SwiftSyntax.UnexpectedNodesSyntax? = nil, importPath: SwiftSyntax.TokenSyntax, _ unexpectedBetweenImportPathAndVersionInfo: SwiftSyntax.UnexpectedNodesSyntax? = nil, versionInfo: SwiftSyntax.CanImportVersionInfoSyntax? = nil, _ unexpectedBetweenVersionInfoAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeCanImportKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var canImportKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenCanImportKeywordAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndImportPath: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var importPath: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenImportPathAndVersionInfo: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var versionInfo: SwiftSyntax.CanImportVersionInfoSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenVersionInfoAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct CanImportVersionInfoSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, comma: SwiftSyntax.TokenSyntax = .commaToken(), _ unexpectedBetweenCommaAndLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.TokenSyntax, _ unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndVersion: SwiftSyntax.UnexpectedNodesSyntax? = nil, version: SwiftSyntax.VersionTupleSyntax, _ unexpectedAfterVersion: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var comma: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenCommaAndLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var label: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndVersion: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var version: SwiftSyntax.VersionTupleSyntax {
    get
    set(value)
  }
  public var unexpectedAfterVersion: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ClosureExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), _ unexpectedBetweenLeftBraceAndSignature: SwiftSyntax.UnexpectedNodesSyntax? = nil, signature: SwiftSyntax.ClosureSignatureSyntax? = nil, _ unexpectedBetweenSignatureAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, statements: SwiftSyntax.CodeBlockItemListSyntax, _ unexpectedBetweenStatementsAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), _ unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftBraceAndSignature: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var signature: SwiftSyntax.ClosureSignatureSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenSignatureAndStatements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var statements: SwiftSyntax.CodeBlockItemListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.statements.append(newElement) instead")
  public func addStatement(_ element: SwiftSyntax.CodeBlockItemSyntax) -> SwiftSyntax.ClosureExprSyntax
  public var unexpectedBetweenStatementsAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ConsumeExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeConsumeKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, consumeKeyword: SwiftSyntax.TokenSyntax, _ unexpectedBetweenConsumeKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeConsumeKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var consumeKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenConsumeKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct CopyExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeCopyKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, copyKeyword: SwiftSyntax.TokenSyntax = .keyword(.copy), _ unexpectedBetweenCopyKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeCopyKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var copyKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenCopyKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DeclReferenceExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBaseName: SwiftSyntax.UnexpectedNodesSyntax? = nil, baseName: SwiftSyntax.TokenSyntax, _ unexpectedBetweenBaseNameAndArgumentNames: SwiftSyntax.UnexpectedNodesSyntax? = nil, argumentNames: SwiftSyntax.DeclNameArgumentsSyntax? = nil, _ unexpectedAfterArgumentNames: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeBaseName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var baseName: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenBaseNameAndArgumentNames: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var argumentNames: SwiftSyntax.DeclNameArgumentsSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterArgumentNames: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DictionaryExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public enum Content : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case colon(SwiftSyntax.TokenSyntax)
    case elements(SwiftSyntax.DictionaryElementListSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.TokenSyntax)
    public init(_ node: SwiftSyntax.DictionaryElementListSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquare: SwiftSyntax.TokenSyntax = .leftSquareToken(), _ unexpectedBetweenLeftSquareAndContent: SwiftSyntax.UnexpectedNodesSyntax? = nil, content: SwiftSyntax.DictionaryExprSyntax.Content, _ unexpectedBetweenContentAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquare: SwiftSyntax.TokenSyntax = .rightSquareToken(), _ unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftSquareAndContent: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var content: SwiftSyntax.DictionaryExprSyntax.Content {
    get
    set(value)
  }
  public var unexpectedBetweenContentAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DiscardAssignmentExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeWildcard: SwiftSyntax.UnexpectedNodesSyntax? = nil, wildcard: SwiftSyntax.TokenSyntax = .wildcardToken(), _ unexpectedAfterWildcard: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeWildcard: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var wildcard: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterWildcard: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct EditorPlaceholderExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePlaceholder: SwiftSyntax.UnexpectedNodesSyntax? = nil, placeholder: SwiftSyntax.TokenSyntax, _ unexpectedAfterPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforePlaceholder: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var placeholder: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct FloatLiteralExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLiteral: SwiftSyntax.UnexpectedNodesSyntax? = nil, literal: SwiftSyntax.TokenSyntax, _ unexpectedAfterLiteral: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLiteral: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var literal: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterLiteral: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ForceUnwrapExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedBetweenExpressionAndExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, exclamationMark: SwiftSyntax.TokenSyntax = .exclamationMarkToken(), _ unexpectedAfterExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenExpressionAndExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var exclamationMark: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct FunctionCallExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeCalledExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, calledExpression: some ExprSyntaxProtocol, _ unexpectedBetweenCalledExpressionAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, arguments: SwiftSyntax.LabeledExprListSyntax, _ unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], _ unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeCalledExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var calledExpression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenCalledExpressionAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var arguments: SwiftSyntax.LabeledExprListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.arguments.append(newElement) instead")
  public func addArgument(_ element: SwiftSyntax.LabeledExprSyntax) -> SwiftSyntax.FunctionCallExprSyntax
  public var unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingClosure: SwiftSyntax.ClosureExprSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.additionalTrailingClosures.append(newElement) instead")
  public func addAdditionalTrailingClosure(_ element: SwiftSyntax.MultipleTrailingClosureElementSyntax) -> SwiftSyntax.FunctionCallExprSyntax
  public var unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GenericSpecializationExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedBetweenExpressionAndGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax, _ unexpectedAfterGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenExpressionAndGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax {
    get
    set(value)
  }
  public var unexpectedAfterGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct IfExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public enum ElseBody : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case ifExpr(SwiftSyntax.IfExprSyntax)
    case codeBlock(SwiftSyntax.CodeBlockSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.IfExprSyntax)
    public init(_ node: SwiftSyntax.CodeBlockSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeIfKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, ifKeyword: SwiftSyntax.TokenSyntax = .keyword(.if), _ unexpectedBetweenIfKeywordAndConditions: SwiftSyntax.UnexpectedNodesSyntax? = nil, conditions: SwiftSyntax.ConditionElementListSyntax, _ unexpectedBetweenConditionsAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, body: SwiftSyntax.CodeBlockSyntax, _ unexpectedBetweenBodyAndElseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, elseKeyword: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenElseKeywordAndElseBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, elseBody: SwiftSyntax.IfExprSyntax.ElseBody? = nil, _ unexpectedAfterElseBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeIfKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var ifKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenIfKeywordAndConditions: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var conditions: SwiftSyntax.ConditionElementListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.conditions.append(newElement) instead")
  public func addCondition(_ element: SwiftSyntax.ConditionElementSyntax) -> SwiftSyntax.IfExprSyntax
  public var unexpectedBetweenConditionsAndBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenBodyAndElseKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var elseKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenElseKeywordAndElseBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var elseBody: SwiftSyntax.IfExprSyntax.ElseBody? {
    get
    set(value)
  }
  public var unexpectedAfterElseBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct InOutExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAmpersand: SwiftSyntax.UnexpectedNodesSyntax? = nil, ampersand: SwiftSyntax.TokenSyntax = .prefixAmpersandToken(), _ unexpectedBetweenAmpersandAndExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAmpersand: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var ampersand: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenAmpersandAndExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct InfixOperatorExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftOperand: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftOperand: some ExprSyntaxProtocol, _ unexpectedBetweenLeftOperandAndOperator: SwiftSyntax.UnexpectedNodesSyntax? = nil, operator: some ExprSyntaxProtocol, _ unexpectedBetweenOperatorAndRightOperand: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightOperand: some ExprSyntaxProtocol, _ unexpectedAfterRightOperand: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftOperand: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftOperand: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftOperandAndOperator: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var `operator`: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenOperatorAndRightOperand: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightOperand: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightOperand: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct IntegerLiteralExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLiteral: SwiftSyntax.UnexpectedNodesSyntax? = nil, literal: SwiftSyntax.TokenSyntax, _ unexpectedAfterLiteral: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLiteral: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var literal: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterLiteral: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct IsExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedBetweenExpressionAndIsKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, isKeyword: SwiftSyntax.TokenSyntax = .keyword(.is), _ unexpectedBetweenIsKeywordAndType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedAfterType: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenExpressionAndIsKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var isKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenIsKeywordAndType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedAfterType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct KeyPathExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBackslash: SwiftSyntax.UnexpectedNodesSyntax? = nil, backslash: SwiftSyntax.TokenSyntax = .backslashToken(), _ unexpectedBetweenBackslashAndRoot: SwiftSyntax.UnexpectedNodesSyntax? = nil, root: (some TypeSyntaxProtocol)? = TypeSyntax?.none, _ unexpectedBetweenRootAndComponents: SwiftSyntax.UnexpectedNodesSyntax? = nil, components: SwiftSyntax.KeyPathComponentListSyntax, _ unexpectedAfterComponents: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeBackslash: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var backslash: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenBackslashAndRoot: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var root: SwiftSyntax.TypeSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenRootAndComponents: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var components: SwiftSyntax.KeyPathComponentListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.components.append(newElement) instead")
  public func addKeyPathComponent(_ element: SwiftSyntax.KeyPathComponentSyntax) -> SwiftSyntax.KeyPathExprSyntax
  public var unexpectedAfterComponents: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MacroExpansionExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePound: SwiftSyntax.UnexpectedNodesSyntax? = nil, pound: SwiftSyntax.TokenSyntax = .poundToken(), _ unexpectedBetweenPoundAndMacroName: SwiftSyntax.UnexpectedNodesSyntax? = nil, macroName: SwiftSyntax.TokenSyntax, _ unexpectedBetweenMacroNameAndGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? = nil, _ unexpectedBetweenGenericArgumentClauseAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, arguments: SwiftSyntax.LabeledExprListSyntax, _ unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], _ unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforePound: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var pound: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPoundAndMacroName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var macroName: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenMacroNameAndGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericArgumentClauseAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var arguments: SwiftSyntax.LabeledExprListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.arguments.append(newElement) instead")
  public func addArgument(_ element: SwiftSyntax.LabeledExprSyntax) -> SwiftSyntax.MacroExpansionExprSyntax
  public var unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingClosure: SwiftSyntax.ClosureExprSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.additionalTrailingClosures.append(newElement) instead")
  public func addAdditionalTrailingClosure(_ element: SwiftSyntax.MultipleTrailingClosureElementSyntax) -> SwiftSyntax.MacroExpansionExprSyntax
  public var unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MemberAccessExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBase: SwiftSyntax.UnexpectedNodesSyntax? = nil, base: (some ExprSyntaxProtocol)? = ExprSyntax?.none, _ unexpectedBetweenBaseAndPeriod: SwiftSyntax.UnexpectedNodesSyntax? = nil, period: SwiftSyntax.TokenSyntax = .periodToken(), _ unexpectedBetweenPeriodAndDeclName: SwiftSyntax.UnexpectedNodesSyntax? = nil, declName: SwiftSyntax.DeclReferenceExprSyntax, _ unexpectedAfterDeclName: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeBase: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var base: SwiftSyntax.ExprSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenBaseAndPeriod: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var period: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPeriodAndDeclName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var declName: SwiftSyntax.DeclReferenceExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterDeclName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MissingExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePlaceholder: SwiftSyntax.UnexpectedNodesSyntax? = nil, placeholder: SwiftSyntax.TokenSyntax, _ unexpectedAfterPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforePlaceholder: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var placeholder: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct NilLiteralExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeNilKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, nilKeyword: SwiftSyntax.TokenSyntax = .keyword(.nil), _ unexpectedAfterNilKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeNilKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var nilKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterNilKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct OptionalChainingExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedBetweenExpressionAndQuestionMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, questionMark: SwiftSyntax.TokenSyntax = .postfixQuestionMarkToken(), _ unexpectedAfterQuestionMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenExpressionAndQuestionMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var questionMark: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterQuestionMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PackElementExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeEachKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, eachKeyword: SwiftSyntax.TokenSyntax = .keyword(.each), _ unexpectedBetweenEachKeywordAndPack: SwiftSyntax.UnexpectedNodesSyntax? = nil, pack: some ExprSyntaxProtocol, _ unexpectedAfterPack: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeEachKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var eachKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenEachKeywordAndPack: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var pack: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterPack: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PackExpansionExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeRepeatKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, repeatKeyword: SwiftSyntax.TokenSyntax = .keyword(.repeat), _ unexpectedBetweenRepeatKeywordAndRepetitionPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, repetitionPattern: some ExprSyntaxProtocol, _ unexpectedAfterRepetitionPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeRepeatKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var repeatKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenRepeatKeywordAndRepetitionPattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var repetitionPattern: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRepetitionPattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PatternExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, pattern: some PatternSyntaxProtocol, _ unexpectedAfterPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforePattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var pattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public var unexpectedAfterPattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PostfixIfConfigExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBase: SwiftSyntax.UnexpectedNodesSyntax? = nil, base: (some ExprSyntaxProtocol)? = ExprSyntax?.none, _ unexpectedBetweenBaseAndConfig: SwiftSyntax.UnexpectedNodesSyntax? = nil, config: SwiftSyntax.IfConfigDeclSyntax, _ unexpectedAfterConfig: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeBase: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var base: SwiftSyntax.ExprSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenBaseAndConfig: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var config: SwiftSyntax.IfConfigDeclSyntax {
    get
    set(value)
  }
  public var unexpectedAfterConfig: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PostfixOperatorExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedBetweenExpressionAndOperator: SwiftSyntax.UnexpectedNodesSyntax? = nil, operator: SwiftSyntax.TokenSyntax, _ unexpectedAfterOperator: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenExpressionAndOperator: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var `operator`: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterOperator: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PrefixOperatorExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeOperator: SwiftSyntax.UnexpectedNodesSyntax? = nil, operator: SwiftSyntax.TokenSyntax, _ unexpectedBetweenOperatorAndExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeOperator: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var `operator`: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenOperatorAndExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct RegexLiteralExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeOpeningPounds: SwiftSyntax.UnexpectedNodesSyntax? = nil, openingPounds: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenOpeningPoundsAndOpeningSlash: SwiftSyntax.UnexpectedNodesSyntax? = nil, openingSlash: SwiftSyntax.TokenSyntax = .regexSlashToken(), _ unexpectedBetweenOpeningSlashAndRegex: SwiftSyntax.UnexpectedNodesSyntax? = nil, regex: SwiftSyntax.TokenSyntax, _ unexpectedBetweenRegexAndClosingSlash: SwiftSyntax.UnexpectedNodesSyntax? = nil, closingSlash: SwiftSyntax.TokenSyntax = .regexSlashToken(), _ unexpectedBetweenClosingSlashAndClosingPounds: SwiftSyntax.UnexpectedNodesSyntax? = nil, closingPounds: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterClosingPounds: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeOpeningPounds: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var openingPounds: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenOpeningPoundsAndOpeningSlash: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var openingSlash: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenOpeningSlashAndRegex: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var regex: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenRegexAndClosingSlash: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var closingSlash: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenClosingSlashAndClosingPounds: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var closingPounds: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterClosingPounds: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SequenceExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, elements: SwiftSyntax.ExprListSyntax, _ unexpectedAfterElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeElements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var elements: SwiftSyntax.ExprListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.elements.append(newElement) instead")
  public func addElement(_ element: SwiftSyntax.ExprSyntax) -> SwiftSyntax.SequenceExprSyntax
  public var unexpectedAfterElements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SimpleStringLiteralExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeOpeningQuote: SwiftSyntax.UnexpectedNodesSyntax? = nil, openingQuote: SwiftSyntax.TokenSyntax, _ unexpectedBetweenOpeningQuoteAndSegments: SwiftSyntax.UnexpectedNodesSyntax? = nil, segments: SwiftSyntax.SimpleStringLiteralSegmentListSyntax, _ unexpectedBetweenSegmentsAndClosingQuote: SwiftSyntax.UnexpectedNodesSyntax? = nil, closingQuote: SwiftSyntax.TokenSyntax, _ unexpectedAfterClosingQuote: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeOpeningQuote: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var openingQuote: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenOpeningQuoteAndSegments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var segments: SwiftSyntax.SimpleStringLiteralSegmentListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.segments.append(newElement) instead")
  public func addSegment(_ element: SwiftSyntax.StringSegmentSyntax) -> SwiftSyntax.SimpleStringLiteralExprSyntax
  public var unexpectedBetweenSegmentsAndClosingQuote: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var closingQuote: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterClosingQuote: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct StringLiteralExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeOpeningPounds: SwiftSyntax.UnexpectedNodesSyntax? = nil, openingPounds: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenOpeningPoundsAndOpeningQuote: SwiftSyntax.UnexpectedNodesSyntax? = nil, openingQuote: SwiftSyntax.TokenSyntax, _ unexpectedBetweenOpeningQuoteAndSegments: SwiftSyntax.UnexpectedNodesSyntax? = nil, segments: SwiftSyntax.StringLiteralSegmentListSyntax, _ unexpectedBetweenSegmentsAndClosingQuote: SwiftSyntax.UnexpectedNodesSyntax? = nil, closingQuote: SwiftSyntax.TokenSyntax, _ unexpectedBetweenClosingQuoteAndClosingPounds: SwiftSyntax.UnexpectedNodesSyntax? = nil, closingPounds: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterClosingPounds: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeOpeningPounds: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var openingPounds: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenOpeningPoundsAndOpeningQuote: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var openingQuote: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenOpeningQuoteAndSegments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var segments: SwiftSyntax.StringLiteralSegmentListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.segments.append(newElement) instead")
  public func addSegment(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.StringLiteralExprSyntax
  public var unexpectedBetweenSegmentsAndClosingQuote: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var closingQuote: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenClosingQuoteAndClosingPounds: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var closingPounds: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterClosingPounds: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SubscriptCallExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeCalledExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, calledExpression: some ExprSyntaxProtocol, _ unexpectedBetweenCalledExpressionAndLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquare: SwiftSyntax.TokenSyntax = .leftSquareToken(), _ unexpectedBetweenLeftSquareAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, arguments: SwiftSyntax.LabeledExprListSyntax, _ unexpectedBetweenArgumentsAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquare: SwiftSyntax.TokenSyntax = .rightSquareToken(), _ unexpectedBetweenRightSquareAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, _ unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], _ unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeCalledExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var calledExpression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenCalledExpressionAndLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftSquareAndArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var arguments: SwiftSyntax.LabeledExprListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.arguments.append(newElement) instead")
  public func addArgument(_ element: SwiftSyntax.LabeledExprSyntax) -> SwiftSyntax.SubscriptCallExprSyntax
  public var unexpectedBetweenArgumentsAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenRightSquareAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingClosure: SwiftSyntax.ClosureExprSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.additionalTrailingClosures.append(newElement) instead")
  public func addAdditionalTrailingClosure(_ element: SwiftSyntax.MultipleTrailingClosureElementSyntax) -> SwiftSyntax.SubscriptCallExprSyntax
  public var unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SuperExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeSuperKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, superKeyword: SwiftSyntax.TokenSyntax = .keyword(.super), _ unexpectedAfterSuperKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeSuperKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var superKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterSuperKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SwitchExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeSwitchKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, switchKeyword: SwiftSyntax.TokenSyntax = .keyword(.switch), _ unexpectedBetweenSwitchKeywordAndSubject: SwiftSyntax.UnexpectedNodesSyntax? = nil, subject: some ExprSyntaxProtocol, _ unexpectedBetweenSubjectAndLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), _ unexpectedBetweenLeftBraceAndCases: SwiftSyntax.UnexpectedNodesSyntax? = nil, cases: SwiftSyntax.SwitchCaseListSyntax, _ unexpectedBetweenCasesAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), _ unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeSwitchKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var switchKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenSwitchKeywordAndSubject: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var subject: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenSubjectAndLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftBraceAndCases: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var cases: SwiftSyntax.SwitchCaseListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.cases.append(newElement) instead")
  public func addCase(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.SwitchExprSyntax
  public var unexpectedBetweenCasesAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct TernaryExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeCondition: SwiftSyntax.UnexpectedNodesSyntax? = nil, condition: some ExprSyntaxProtocol, _ unexpectedBetweenConditionAndQuestionMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, questionMark: SwiftSyntax.TokenSyntax = .infixQuestionMarkToken(), _ unexpectedBetweenQuestionMarkAndThenExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, thenExpression: some ExprSyntaxProtocol, _ unexpectedBetweenThenExpressionAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndElseExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, elseExpression: some ExprSyntaxProtocol, _ unexpectedAfterElseExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeCondition: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var condition: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenConditionAndQuestionMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var questionMark: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenQuestionMarkAndThenExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var thenExpression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenThenExpressionAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndElseExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var elseExpression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterElseExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct TryExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeTryKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, tryKeyword: SwiftSyntax.TokenSyntax = .keyword(.try), _ unexpectedBetweenTryKeywordAndQuestionOrExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, questionOrExclamationMark: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenQuestionOrExclamationMarkAndExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeTryKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var tryKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenTryKeywordAndQuestionOrExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var questionOrExclamationMark: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenQuestionOrExclamationMarkAndExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct TupleExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, elements: SwiftSyntax.LabeledExprListSyntax, _ unexpectedBetweenElementsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndElements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var elements: SwiftSyntax.LabeledExprListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.elements.append(newElement) instead")
  public func addElement(_ element: SwiftSyntax.LabeledExprSyntax) -> SwiftSyntax.TupleExprSyntax
  public var unexpectedBetweenElementsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct TypeExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedAfterType: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedAfterType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct UnresolvedAsExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAsKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, asKeyword: SwiftSyntax.TokenSyntax = .keyword(.as), _ unexpectedBetweenAsKeywordAndQuestionOrExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, questionOrExclamationMark: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterQuestionOrExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAsKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var asKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenAsKeywordAndQuestionOrExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var questionOrExclamationMark: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterQuestionOrExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct UnresolvedIsExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeIsKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, isKeyword: SwiftSyntax.TokenSyntax = .keyword(.is), _ unexpectedAfterIsKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeIsKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var isKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterIsKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct UnresolvedTernaryExprSyntax : SwiftSyntax.ExprSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeQuestionMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, questionMark: SwiftSyntax.TokenSyntax = .infixQuestionMarkToken(), _ unexpectedBetweenQuestionMarkAndThenExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, thenExpression: some ExprSyntaxProtocol, _ unexpectedBetweenThenExpressionAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedAfterColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeQuestionMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var questionMark: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenQuestionMarkAndThenExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var thenExpression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenThenExpressionAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct AccessorBlockSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public enum Accessors : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case accessors(SwiftSyntax.AccessorDeclListSyntax)
    case getter(SwiftSyntax.CodeBlockItemListSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.AccessorDeclListSyntax)
    public init(_ node: SwiftSyntax.CodeBlockItemListSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), _ unexpectedBetweenLeftBraceAndAccessors: SwiftSyntax.UnexpectedNodesSyntax? = nil, accessors: SwiftSyntax.AccessorBlockSyntax.Accessors, _ unexpectedBetweenAccessorsAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), _ unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftBraceAndAccessors: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var accessors: SwiftSyntax.AccessorBlockSyntax.Accessors {
    get
    set(value)
  }
  public var unexpectedBetweenAccessorsAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct AccessorEffectSpecifiersSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAsyncSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, asyncSpecifier: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenAsyncSpecifierAndThrowsSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, throwsSpecifier: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterThrowsSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAsyncSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var asyncSpecifier: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenAsyncSpecifierAndThrowsSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var throwsSpecifier: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterThrowsSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct AccessorParametersSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ArrayElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedBetweenExpressionAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenExpressionAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct AttributeSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public enum Arguments : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case argumentList(SwiftSyntax.LabeledExprListSyntax)
    case token(SwiftSyntax.TokenSyntax)
    case string(SwiftSyntax.StringLiteralExprSyntax)
    case availability(SwiftSyntax.AvailabilityArgumentListSyntax)
    case specializeArguments(SwiftSyntax.SpecializeAttributeArgumentListSyntax)
    case objCName(SwiftSyntax.ObjCSelectorPieceListSyntax)
    case implementsArguments(SwiftSyntax.ImplementsAttributeArgumentsSyntax)
    case differentiableArguments(SwiftSyntax.DifferentiableAttributeArgumentsSyntax)
    case derivativeRegistrationArguments(SwiftSyntax.DerivativeAttributeArgumentsSyntax)
    case backDeployedArguments(SwiftSyntax.BackDeployedAttributeArgumentsSyntax)
    case conventionArguments(SwiftSyntax.ConventionAttributeArgumentsSyntax)
    case conventionWitnessMethodArguments(SwiftSyntax.ConventionWitnessMethodAttributeArgumentsSyntax)
    case opaqueReturnTypeOfAttributeArguments(SwiftSyntax.OpaqueReturnTypeOfAttributeArgumentsSyntax)
    case exposeAttributeArguments(SwiftSyntax.ExposeAttributeArgumentsSyntax)
    case originallyDefinedInArguments(SwiftSyntax.OriginallyDefinedInAttributeArgumentsSyntax)
    case underscorePrivateAttributeArguments(SwiftSyntax.UnderscorePrivateAttributeArgumentsSyntax)
    case dynamicReplacementArguments(SwiftSyntax.DynamicReplacementAttributeArgumentsSyntax)
    case unavailableFromAsyncArguments(SwiftSyntax.UnavailableFromAsyncAttributeArgumentsSyntax)
    case effectsArguments(SwiftSyntax.EffectsAttributeArgumentListSyntax)
    case documentationArguments(SwiftSyntax.DocumentationAttributeArgumentListSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.LabeledExprListSyntax)
    public init(_ node: SwiftSyntax.TokenSyntax)
    public init(_ node: SwiftSyntax.StringLiteralExprSyntax)
    public init(_ node: SwiftSyntax.AvailabilityArgumentListSyntax)
    public init(_ node: SwiftSyntax.SpecializeAttributeArgumentListSyntax)
    public init(_ node: SwiftSyntax.ObjCSelectorPieceListSyntax)
    public init(_ node: SwiftSyntax.ImplementsAttributeArgumentsSyntax)
    public init(_ node: SwiftSyntax.DifferentiableAttributeArgumentsSyntax)
    public init(_ node: SwiftSyntax.DerivativeAttributeArgumentsSyntax)
    public init(_ node: SwiftSyntax.BackDeployedAttributeArgumentsSyntax)
    public init(_ node: SwiftSyntax.ConventionAttributeArgumentsSyntax)
    public init(_ node: SwiftSyntax.ConventionWitnessMethodAttributeArgumentsSyntax)
    public init(_ node: SwiftSyntax.OpaqueReturnTypeOfAttributeArgumentsSyntax)
    public init(_ node: SwiftSyntax.ExposeAttributeArgumentsSyntax)
    public init(_ node: SwiftSyntax.OriginallyDefinedInAttributeArgumentsSyntax)
    public init(_ node: SwiftSyntax.UnderscorePrivateAttributeArgumentsSyntax)
    public init(_ node: SwiftSyntax.DynamicReplacementAttributeArgumentsSyntax)
    public init(_ node: SwiftSyntax.UnavailableFromAsyncAttributeArgumentsSyntax)
    public init(_ node: SwiftSyntax.EffectsAttributeArgumentListSyntax)
    public init(_ node: SwiftSyntax.DocumentationAttributeArgumentListSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAtSign: SwiftSyntax.UnexpectedNodesSyntax? = nil, atSign: SwiftSyntax.TokenSyntax = .atSignToken(), _ unexpectedBetweenAtSignAndAttributeName: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributeName: some TypeSyntaxProtocol, _ unexpectedBetweenAttributeNameAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, arguments: SwiftSyntax.AttributeSyntax.Arguments? = nil, _ unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAtSign: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var atSign: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenAtSignAndAttributeName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributeName: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenAttributeNameAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var arguments: SwiftSyntax.AttributeSyntax.Arguments? {
    get
    set(value)
  }
  public var unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct AvailabilityArgumentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public enum Argument : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case token(SwiftSyntax.TokenSyntax)
    case availabilityVersionRestriction(SwiftSyntax.PlatformVersionSyntax)
    case availabilityLabeledArgument(SwiftSyntax.AvailabilityLabeledArgumentSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.TokenSyntax)
    public init(_ node: SwiftSyntax.PlatformVersionSyntax)
    public init(_ node: SwiftSyntax.AvailabilityLabeledArgumentSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeArgument: SwiftSyntax.UnexpectedNodesSyntax? = nil, argument: SwiftSyntax.AvailabilityArgumentSyntax.Argument, _ unexpectedBetweenArgumentAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeArgument: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var argument: SwiftSyntax.AvailabilityArgumentSyntax.Argument {
    get
    set(value)
  }
  public var unexpectedBetweenArgumentAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct AvailabilityConditionSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAvailabilityKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, availabilityKeyword: SwiftSyntax.TokenSyntax, _ unexpectedBetweenAvailabilityKeywordAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndAvailabilityArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, availabilityArguments: SwiftSyntax.AvailabilityArgumentListSyntax, _ unexpectedBetweenAvailabilityArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAvailabilityKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var availabilityKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenAvailabilityKeywordAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndAvailabilityArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var availabilityArguments: SwiftSyntax.AvailabilityArgumentListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.availabilityArguments.append(newElement) instead")
  public func addAvailabilityArgument(_ element: SwiftSyntax.AvailabilityArgumentSyntax) -> SwiftSyntax.AvailabilityConditionSyntax
  public var unexpectedBetweenAvailabilityArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct AvailabilityLabeledArgumentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public enum Value : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case string(SwiftSyntax.SimpleStringLiteralExprSyntax)
    case version(SwiftSyntax.VersionTupleSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.SimpleStringLiteralExprSyntax)
    public init(_ node: SwiftSyntax.VersionTupleSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.TokenSyntax, _ unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, value: SwiftSyntax.AvailabilityLabeledArgumentSyntax.Value, _ unexpectedAfterValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var label: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var value: SwiftSyntax.AvailabilityLabeledArgumentSyntax.Value {
    get
    set(value)
  }
  public var unexpectedAfterValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct BackDeployedAttributeArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, beforeLabel: SwiftSyntax.TokenSyntax = .keyword(.before), _ unexpectedBetweenBeforeLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndPlatforms: SwiftSyntax.UnexpectedNodesSyntax? = nil, platforms: SwiftSyntax.PlatformVersionItemListSyntax, _ unexpectedAfterPlatforms: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var beforeLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenBeforeLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndPlatforms: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var platforms: SwiftSyntax.PlatformVersionItemListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.platforms.append(newElement) instead")
  public func addPlatform(_ element: SwiftSyntax.PlatformVersionItemSyntax) -> SwiftSyntax.BackDeployedAttributeArgumentsSyntax
  public var unexpectedAfterPlatforms: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct CatchClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeCatchKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, catchKeyword: SwiftSyntax.TokenSyntax = .keyword(.catch), _ unexpectedBetweenCatchKeywordAndCatchItems: SwiftSyntax.UnexpectedNodesSyntax? = nil, catchItems: SwiftSyntax.CatchItemListSyntax = [], _ unexpectedBetweenCatchItemsAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, body: SwiftSyntax.CodeBlockSyntax, _ unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeCatchKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var catchKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenCatchKeywordAndCatchItems: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var catchItems: SwiftSyntax.CatchItemListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.catchItems.append(newElement) instead")
  public func addCatchItem(_ element: SwiftSyntax.CatchItemSyntax) -> SwiftSyntax.CatchClauseSyntax
  public var unexpectedBetweenCatchItemsAndBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public var unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct CatchItemSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, pattern: (some PatternSyntaxProtocol)? = PatternSyntax?.none, _ unexpectedBetweenPatternAndWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, whereClause: SwiftSyntax.WhereClauseSyntax? = nil, _ unexpectedBetweenWhereClauseAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforePattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var pattern: SwiftSyntax.PatternSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenPatternAndWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var whereClause: SwiftSyntax.WhereClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenWhereClauseAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ClosureCaptureClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquare: SwiftSyntax.TokenSyntax = .leftSquareToken(), _ unexpectedBetweenLeftSquareAndItems: SwiftSyntax.UnexpectedNodesSyntax? = nil, items: SwiftSyntax.ClosureCaptureListSyntax, _ unexpectedBetweenItemsAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquare: SwiftSyntax.TokenSyntax = .rightSquareToken(), _ unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftSquareAndItems: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var items: SwiftSyntax.ClosureCaptureListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.items.append(newElement) instead")
  public func addItem(_ element: SwiftSyntax.ClosureCaptureSyntax) -> SwiftSyntax.ClosureCaptureClauseSyntax
  public var unexpectedBetweenItemsAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ClosureCaptureSpecifierSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, specifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenSpecifierAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenLeftParenAndDetail: SwiftSyntax.UnexpectedNodesSyntax? = nil, detail: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenDetailAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var specifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenSpecifierAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndDetail: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var detail: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenDetailAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ClosureCaptureSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, specifier: SwiftSyntax.ClosureCaptureSpecifierSyntax? = nil, _ unexpectedBetweenSpecifierAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenNameAndEqual: SwiftSyntax.UnexpectedNodesSyntax? = nil, equal: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenEqualAndExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedBetweenExpressionAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var specifier: SwiftSyntax.ClosureCaptureSpecifierSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenSpecifierAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndEqual: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var equal: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenEqualAndExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenExpressionAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ClosureParameterClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameters: SwiftSyntax.ClosureParameterListSyntax, _ unexpectedBetweenParametersAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndParameters: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var parameters: SwiftSyntax.ClosureParameterListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.parameters.append(newElement) instead")
  public func addParameter(_ element: SwiftSyntax.ClosureParameterSyntax) -> SwiftSyntax.ClosureParameterClauseSyntax
  public var unexpectedBetweenParametersAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ClosureParameterSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndFirstName: SwiftSyntax.UnexpectedNodesSyntax? = nil, firstName: SwiftSyntax.TokenSyntax, _ unexpectedBetweenFirstNameAndSecondName: SwiftSyntax.UnexpectedNodesSyntax? = nil, secondName: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenSecondNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenColonAndType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: (some TypeSyntaxProtocol)? = TypeSyntax?.none, _ unexpectedBetweenTypeAndEllipsis: SwiftSyntax.UnexpectedNodesSyntax? = nil, ellipsis: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenEllipsisAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.ClosureParameterSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.ClosureParameterSyntax
  public var unexpectedBetweenModifiersAndFirstName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var firstName: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenFirstNameAndSecondName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var secondName: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenSecondNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var type: SwiftSyntax.TypeSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenTypeAndEllipsis: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var ellipsis: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenEllipsisAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ClosureShorthandParameterSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ClosureSignatureSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public enum ParameterClause : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case simpleInput(SwiftSyntax.ClosureShorthandParameterListSyntax)
    case parameterClause(SwiftSyntax.ClosureParameterClauseSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.ClosureShorthandParameterListSyntax)
    public init(_ node: SwiftSyntax.ClosureParameterClauseSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndCapture: SwiftSyntax.UnexpectedNodesSyntax? = nil, capture: SwiftSyntax.ClosureCaptureClauseSyntax? = nil, _ unexpectedBetweenCaptureAndParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameterClause: SwiftSyntax.ClosureSignatureSyntax.ParameterClause? = nil, _ unexpectedBetweenParameterClauseAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, effectSpecifiers: SwiftSyntax.TypeEffectSpecifiersSyntax? = nil, _ unexpectedBetweenEffectSpecifiersAndReturnClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, returnClause: SwiftSyntax.ReturnClauseSyntax? = nil, _ unexpectedBetweenReturnClauseAndInKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, inKeyword: SwiftSyntax.TokenSyntax = .keyword(.in), _ unexpectedAfterInKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.ClosureSignatureSyntax
  public var unexpectedBetweenAttributesAndCapture: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var capture: SwiftSyntax.ClosureCaptureClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenCaptureAndParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var parameterClause: SwiftSyntax.ClosureSignatureSyntax.ParameterClause? {
    get
    set(value)
  }
  public var unexpectedBetweenParameterClauseAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var effectSpecifiers: SwiftSyntax.TypeEffectSpecifiersSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenEffectSpecifiersAndReturnClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var returnClause: SwiftSyntax.ReturnClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenReturnClauseAndInKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var inKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterInKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct CodeBlockItemSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public enum Item : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case decl(SwiftSyntax.DeclSyntax)
    case stmt(SwiftSyntax.StmtSyntax)
    case expr(SwiftSyntax.ExprSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: some DeclSyntaxProtocol)
    public init(_ node: some StmtSyntaxProtocol)
    public init(_ node: some ExprSyntaxProtocol)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeItem: SwiftSyntax.UnexpectedNodesSyntax? = nil, item: SwiftSyntax.CodeBlockItemSyntax.Item, _ unexpectedBetweenItemAndSemicolon: SwiftSyntax.UnexpectedNodesSyntax? = nil, semicolon: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterSemicolon: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeItem: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var item: SwiftSyntax.CodeBlockItemSyntax.Item {
    get
    set(value)
  }
  public var unexpectedBetweenItemAndSemicolon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var semicolon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterSemicolon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct CodeBlockSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), _ unexpectedBetweenLeftBraceAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, statements: SwiftSyntax.CodeBlockItemListSyntax, _ unexpectedBetweenStatementsAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), _ unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftBraceAndStatements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var statements: SwiftSyntax.CodeBlockItemListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.statements.append(newElement) instead")
  public func addStatement(_ element: SwiftSyntax.CodeBlockItemSyntax) -> SwiftSyntax.CodeBlockSyntax
  public var unexpectedBetweenStatementsAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct CompositionTypeElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedBetweenTypeAndAmpersand: SwiftSyntax.UnexpectedNodesSyntax? = nil, ampersand: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterAmpersand: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenTypeAndAmpersand: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var ampersand: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterAmpersand: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ConditionElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public enum Condition : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case expression(SwiftSyntax.ExprSyntax)
    case availability(SwiftSyntax.AvailabilityConditionSyntax)
    case matchingPattern(SwiftSyntax.MatchingPatternConditionSyntax)
    case optionalBinding(SwiftSyntax.OptionalBindingConditionSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: some ExprSyntaxProtocol)
    public init(_ node: SwiftSyntax.AvailabilityConditionSyntax)
    public init(_ node: SwiftSyntax.MatchingPatternConditionSyntax)
    public init(_ node: SwiftSyntax.OptionalBindingConditionSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeCondition: SwiftSyntax.UnexpectedNodesSyntax? = nil, condition: SwiftSyntax.ConditionElementSyntax.Condition, _ unexpectedBetweenConditionAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeCondition: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var condition: SwiftSyntax.ConditionElementSyntax.Condition {
    get
    set(value)
  }
  public var unexpectedBetweenConditionAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ConformanceRequirementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftType: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftType: some TypeSyntaxProtocol, _ unexpectedBetweenLeftTypeAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndRightType: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightType: some TypeSyntaxProtocol, _ unexpectedAfterRightType: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftTypeAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndRightType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ConventionAttributeArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeConventionLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, conventionLabel: SwiftSyntax.TokenSyntax, _ unexpectedBetweenConventionLabelAndComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, comma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenCommaAndCTypeLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, cTypeLabel: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenCTypeLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenColonAndCTypeString: SwiftSyntax.UnexpectedNodesSyntax? = nil, cTypeString: SwiftSyntax.StringLiteralExprSyntax? = nil, _ unexpectedAfterCTypeString: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeConventionLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var conventionLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenConventionLabelAndComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var comma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenCommaAndCTypeLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var cTypeLabel: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenCTypeLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndCTypeString: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var cTypeString: SwiftSyntax.StringLiteralExprSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterCTypeString: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ConventionWitnessMethodAttributeArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeWitnessMethodLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, witnessMethodLabel: SwiftSyntax.TokenSyntax = .keyword(.witness_method), _ unexpectedBetweenWitnessMethodLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndProtocolName: SwiftSyntax.UnexpectedNodesSyntax? = nil, protocolName: SwiftSyntax.TokenSyntax, _ unexpectedAfterProtocolName: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeWitnessMethodLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var witnessMethodLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenWitnessMethodLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndProtocolName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var protocolName: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterProtocolName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DeclModifierDetailSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndDetail: SwiftSyntax.UnexpectedNodesSyntax? = nil, detail: SwiftSyntax.TokenSyntax, _ unexpectedBetweenDetailAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndDetail: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var detail: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenDetailAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DeclModifierSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndDetail: SwiftSyntax.UnexpectedNodesSyntax? = nil, detail: SwiftSyntax.DeclModifierDetailSyntax? = nil, _ unexpectedAfterDetail: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndDetail: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var detail: SwiftSyntax.DeclModifierDetailSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterDetail: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DeclNameArgumentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedAfterColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DeclNameArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, arguments: SwiftSyntax.DeclNameArgumentListSyntax, _ unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var arguments: SwiftSyntax.DeclNameArgumentListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.arguments.append(newElement) instead")
  public func addArgument(_ element: SwiftSyntax.DeclNameArgumentSyntax) -> SwiftSyntax.DeclNameArgumentsSyntax
  public var unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DeinitializerEffectSpecifiersSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAsyncSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, asyncSpecifier: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterAsyncSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAsyncSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var asyncSpecifier: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterAsyncSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DerivativeAttributeArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeOfLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, ofLabel: SwiftSyntax.TokenSyntax = .keyword(.of), _ unexpectedBetweenOfLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndOriginalDeclName: SwiftSyntax.UnexpectedNodesSyntax? = nil, originalDeclName: some ExprSyntaxProtocol, _ unexpectedBetweenOriginalDeclNameAndPeriod: SwiftSyntax.UnexpectedNodesSyntax? = nil, period: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenPeriodAndAccessorSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, accessorSpecifier: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenAccessorSpecifierAndComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, comma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenCommaAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, arguments: SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax? = nil, _ unexpectedAfterArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeOfLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var ofLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenOfLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndOriginalDeclName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var originalDeclName: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenOriginalDeclNameAndPeriod: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var period: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenPeriodAndAccessorSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var accessorSpecifier: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenAccessorSpecifierAndComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var comma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenCommaAndArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var arguments: SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DesignatedTypeSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeadingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, leadingComma: SwiftSyntax.TokenSyntax = .commaToken(), _ unexpectedBetweenLeadingCommaAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedAfterName: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeadingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leadingComma: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeadingCommaAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DictionaryElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeKey: SwiftSyntax.UnexpectedNodesSyntax? = nil, key: some ExprSyntaxProtocol, _ unexpectedBetweenKeyAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, value: some ExprSyntaxProtocol, _ unexpectedBetweenValueAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeKey: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var key: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenKeyAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var value: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenValueAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DifferentiabilityArgumentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeArgument: SwiftSyntax.UnexpectedNodesSyntax? = nil, argument: SwiftSyntax.TokenSyntax, _ unexpectedBetweenArgumentAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeArgument: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var argument: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenArgumentAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DifferentiabilityArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, arguments: SwiftSyntax.DifferentiabilityArgumentListSyntax, _ unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var arguments: SwiftSyntax.DifferentiabilityArgumentListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.arguments.append(newElement) instead")
  public func addArgument(_ element: SwiftSyntax.DifferentiabilityArgumentSyntax) -> SwiftSyntax.DifferentiabilityArgumentsSyntax
  public var unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DifferentiabilityWithRespectToArgumentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public enum Arguments : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case argument(SwiftSyntax.DifferentiabilityArgumentSyntax)
    case argumentList(SwiftSyntax.DifferentiabilityArgumentsSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.DifferentiabilityArgumentSyntax)
    public init(_ node: SwiftSyntax.DifferentiabilityArgumentsSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeWrtLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, wrtLabel: SwiftSyntax.TokenSyntax = .keyword(.wrt), _ unexpectedBetweenWrtLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, arguments: SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax.Arguments, _ unexpectedAfterArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeWrtLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var wrtLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenWrtLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var arguments: SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax.Arguments {
    get
    set(value)
  }
  public var unexpectedAfterArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DifferentiableAttributeArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeKindSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, kindSpecifier: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenKindSpecifierAndKindSpecifierComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, kindSpecifierComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenKindSpecifierCommaAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, arguments: SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax? = nil, _ unexpectedBetweenArgumentsAndArgumentsComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, argumentsComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenArgumentsCommaAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedAfterGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeKindSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var kindSpecifier: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenKindSpecifierAndKindSpecifierComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var kindSpecifierComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenKindSpecifierCommaAndArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var arguments: SwiftSyntax.DifferentiabilityWithRespectToArgumentSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenArgumentsAndArgumentsComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var argumentsComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenArgumentsCommaAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DocumentationAttributeArgumentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public enum Value : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case token(SwiftSyntax.TokenSyntax)
    case string(SwiftSyntax.StringLiteralExprSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.TokenSyntax)
    public init(_ node: SwiftSyntax.StringLiteralExprSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.TokenSyntax, _ unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, value: SwiftSyntax.DocumentationAttributeArgumentSyntax.Value, _ unexpectedBetweenValueAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var label: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var value: SwiftSyntax.DocumentationAttributeArgumentSyntax.Value {
    get
    set(value)
  }
  public var unexpectedBetweenValueAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DynamicReplacementAttributeArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeForLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, forLabel: SwiftSyntax.TokenSyntax = .keyword(.for), _ unexpectedBetweenForLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndDeclName: SwiftSyntax.UnexpectedNodesSyntax? = nil, declName: SwiftSyntax.DeclReferenceExprSyntax, _ unexpectedAfterDeclName: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeForLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var forLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenForLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndDeclName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var declName: SwiftSyntax.DeclReferenceExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterDeclName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct EnumCaseElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameterClause: SwiftSyntax.EnumCaseParameterClauseSyntax? = nil, _ unexpectedBetweenParameterClauseAndRawValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, rawValue: SwiftSyntax.InitializerClauseSyntax? = nil, _ unexpectedBetweenRawValueAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var parameterClause: SwiftSyntax.EnumCaseParameterClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenParameterClauseAndRawValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rawValue: SwiftSyntax.InitializerClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenRawValueAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct EnumCaseParameterClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameters: SwiftSyntax.EnumCaseParameterListSyntax, _ unexpectedBetweenParametersAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndParameters: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var parameters: SwiftSyntax.EnumCaseParameterListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.parameters.append(newElement) instead")
  public func addParameter(_ element: SwiftSyntax.EnumCaseParameterSyntax) -> SwiftSyntax.EnumCaseParameterClauseSyntax
  public var unexpectedBetweenParametersAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct EnumCaseParameterSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndFirstName: SwiftSyntax.UnexpectedNodesSyntax? = nil, firstName: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenFirstNameAndSecondName: SwiftSyntax.UnexpectedNodesSyntax? = nil, secondName: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenSecondNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenColonAndType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedBetweenTypeAndDefaultValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, defaultValue: SwiftSyntax.InitializerClauseSyntax? = nil, _ unexpectedBetweenDefaultValueAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.EnumCaseParameterSyntax
  public var unexpectedBetweenModifiersAndFirstName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var firstName: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenFirstNameAndSecondName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var secondName: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenSecondNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenTypeAndDefaultValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var defaultValue: SwiftSyntax.InitializerClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenDefaultValueAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ExposeAttributeArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLanguage: SwiftSyntax.UnexpectedNodesSyntax? = nil, language: SwiftSyntax.TokenSyntax, _ unexpectedBetweenLanguageAndComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, comma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenCommaAndCxxName: SwiftSyntax.UnexpectedNodesSyntax? = nil, cxxName: SwiftSyntax.StringLiteralExprSyntax? = nil, _ unexpectedAfterCxxName: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLanguage: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var language: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLanguageAndComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var comma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenCommaAndCxxName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var cxxName: SwiftSyntax.StringLiteralExprSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterCxxName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ExpressionSegmentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBackslash: SwiftSyntax.UnexpectedNodesSyntax? = nil, backslash: SwiftSyntax.TokenSyntax = .backslashToken(), _ unexpectedBetweenBackslashAndPounds: SwiftSyntax.UnexpectedNodesSyntax? = nil, pounds: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenPoundsAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndExpressions: SwiftSyntax.UnexpectedNodesSyntax? = nil, expressions: SwiftSyntax.LabeledExprListSyntax, _ unexpectedBetweenExpressionsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeBackslash: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var backslash: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenBackslashAndPounds: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var pounds: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenPoundsAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndExpressions: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expressions: SwiftSyntax.LabeledExprListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.expressions.append(newElement) instead")
  public func addExpression(_ element: SwiftSyntax.LabeledExprSyntax) -> SwiftSyntax.ExpressionSegmentSyntax
  public var unexpectedBetweenExpressionsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct FunctionEffectSpecifiersSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAsyncSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, asyncSpecifier: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenAsyncSpecifierAndThrowsSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, throwsSpecifier: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterThrowsSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAsyncSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var asyncSpecifier: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenAsyncSpecifierAndThrowsSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var throwsSpecifier: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterThrowsSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct FunctionParameterClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameters: SwiftSyntax.FunctionParameterListSyntax, _ unexpectedBetweenParametersAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndParameters: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var parameters: SwiftSyntax.FunctionParameterListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.parameters.append(newElement) instead")
  public func addParameter(_ element: SwiftSyntax.FunctionParameterSyntax) -> SwiftSyntax.FunctionParameterClauseSyntax
  public var unexpectedBetweenParametersAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct FunctionParameterSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ unexpectedBetweenModifiersAndFirstName: SwiftSyntax.UnexpectedNodesSyntax? = nil, firstName: SwiftSyntax.TokenSyntax, _ unexpectedBetweenFirstNameAndSecondName: SwiftSyntax.UnexpectedNodesSyntax? = nil, secondName: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenSecondNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedBetweenTypeAndEllipsis: SwiftSyntax.UnexpectedNodesSyntax? = nil, ellipsis: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenEllipsisAndDefaultValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, defaultValue: SwiftSyntax.InitializerClauseSyntax? = nil, _ unexpectedBetweenDefaultValueAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.FunctionParameterSyntax
  public var unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var modifiers: SwiftSyntax.DeclModifierListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.modifiers.append(newElement) instead")
  public func addModifier(_ element: SwiftSyntax.DeclModifierSyntax) -> SwiftSyntax.FunctionParameterSyntax
  public var unexpectedBetweenModifiersAndFirstName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var firstName: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenFirstNameAndSecondName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var secondName: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenSecondNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenTypeAndEllipsis: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var ellipsis: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenEllipsisAndDefaultValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var defaultValue: SwiftSyntax.InitializerClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenDefaultValueAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct FunctionSignatureSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameterClause: SwiftSyntax.FunctionParameterClauseSyntax, _ unexpectedBetweenParameterClauseAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, effectSpecifiers: SwiftSyntax.FunctionEffectSpecifiersSyntax? = nil, _ unexpectedBetweenEffectSpecifiersAndReturnClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, returnClause: SwiftSyntax.ReturnClauseSyntax? = nil, _ unexpectedAfterReturnClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var parameterClause: SwiftSyntax.FunctionParameterClauseSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenParameterClauseAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var effectSpecifiers: SwiftSyntax.FunctionEffectSpecifiersSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenEffectSpecifiersAndReturnClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var returnClause: SwiftSyntax.ReturnClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterReturnClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GenericArgumentClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftAngle: SwiftSyntax.TokenSyntax = .leftAngleToken(), _ unexpectedBetweenLeftAngleAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, arguments: SwiftSyntax.GenericArgumentListSyntax, _ unexpectedBetweenArgumentsAndRightAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightAngle: SwiftSyntax.TokenSyntax = .rightAngleToken(), _ unexpectedAfterRightAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftAngle: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftAngle: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftAngleAndArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var arguments: SwiftSyntax.GenericArgumentListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.arguments.append(newElement) instead")
  public func addArgument(_ element: SwiftSyntax.GenericArgumentSyntax) -> SwiftSyntax.GenericArgumentClauseSyntax
  public var unexpectedBetweenArgumentsAndRightAngle: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightAngle: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightAngle: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GenericArgumentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeArgument: SwiftSyntax.UnexpectedNodesSyntax? = nil, argument: some TypeSyntaxProtocol, _ unexpectedBetweenArgumentAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeArgument: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var argument: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenArgumentAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GenericParameterClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftAngle: SwiftSyntax.TokenSyntax = .leftAngleToken(), _ unexpectedBetweenLeftAngleAndParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameters: SwiftSyntax.GenericParameterListSyntax, _ unexpectedBetweenParametersAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, _ unexpectedBetweenGenericWhereClauseAndRightAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightAngle: SwiftSyntax.TokenSyntax = .rightAngleToken(), _ unexpectedAfterRightAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftAngle: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftAngle: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftAngleAndParameters: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var parameters: SwiftSyntax.GenericParameterListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.parameters.append(newElement) instead")
  public func addParameter(_ element: SwiftSyntax.GenericParameterSyntax) -> SwiftSyntax.GenericParameterClauseSyntax
  public var unexpectedBetweenParametersAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenGenericWhereClauseAndRightAngle: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightAngle: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightAngle: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GenericParameterSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndEachKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, eachKeyword: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenEachKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenColonAndInheritedType: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritedType: (some TypeSyntaxProtocol)? = TypeSyntax?.none, _ unexpectedBetweenInheritedTypeAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.GenericParameterSyntax
  public var unexpectedBetweenAttributesAndEachKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var eachKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenEachKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndInheritedType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var inheritedType: SwiftSyntax.TypeSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenInheritedTypeAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GenericRequirementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public enum Requirement : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case sameTypeRequirement(SwiftSyntax.SameTypeRequirementSyntax)
    case conformanceRequirement(SwiftSyntax.ConformanceRequirementSyntax)
    case layoutRequirement(SwiftSyntax.LayoutRequirementSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.SameTypeRequirementSyntax)
    public init(_ node: SwiftSyntax.ConformanceRequirementSyntax)
    public init(_ node: SwiftSyntax.LayoutRequirementSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeRequirement: SwiftSyntax.UnexpectedNodesSyntax? = nil, requirement: SwiftSyntax.GenericRequirementSyntax.Requirement, _ unexpectedBetweenRequirementAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeRequirement: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var requirement: SwiftSyntax.GenericRequirementSyntax.Requirement {
    get
    set(value)
  }
  public var unexpectedBetweenRequirementAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GenericWhereClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeWhereKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, whereKeyword: SwiftSyntax.TokenSyntax = .keyword(.where), _ unexpectedBetweenWhereKeywordAndRequirements: SwiftSyntax.UnexpectedNodesSyntax? = nil, requirements: SwiftSyntax.GenericRequirementListSyntax, _ unexpectedAfterRequirements: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeWhereKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var whereKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenWhereKeywordAndRequirements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var requirements: SwiftSyntax.GenericRequirementListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.requirements.append(newElement) instead")
  public func addRequirement(_ element: SwiftSyntax.GenericRequirementSyntax) -> SwiftSyntax.GenericWhereClauseSyntax
  public var unexpectedAfterRequirements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct IfConfigClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public enum Elements : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case statements(SwiftSyntax.CodeBlockItemListSyntax)
    case switchCases(SwiftSyntax.SwitchCaseListSyntax)
    case decls(SwiftSyntax.MemberBlockItemListSyntax)
    case postfixExpression(SwiftSyntax.ExprSyntax)
    case attributes(SwiftSyntax.AttributeListSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.CodeBlockItemListSyntax)
    public init(_ node: SwiftSyntax.SwitchCaseListSyntax)
    public init(_ node: SwiftSyntax.MemberBlockItemListSyntax)
    public init(_ node: some ExprSyntaxProtocol)
    public init(_ node: SwiftSyntax.AttributeListSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePoundKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, poundKeyword: SwiftSyntax.TokenSyntax, _ unexpectedBetweenPoundKeywordAndCondition: SwiftSyntax.UnexpectedNodesSyntax? = nil, condition: (some ExprSyntaxProtocol)? = ExprSyntax?.none, _ unexpectedBetweenConditionAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, elements: SwiftSyntax.IfConfigClauseSyntax.Elements? = nil, _ unexpectedAfterElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforePoundKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var poundKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPoundKeywordAndCondition: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var condition: SwiftSyntax.ExprSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenConditionAndElements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var elements: SwiftSyntax.IfConfigClauseSyntax.Elements? {
    get
    set(value)
  }
  public var unexpectedAfterElements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ImplementsAttributeArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedBetweenTypeAndComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, comma: SwiftSyntax.TokenSyntax = .commaToken(), _ unexpectedBetweenCommaAndDeclName: SwiftSyntax.UnexpectedNodesSyntax? = nil, declName: SwiftSyntax.DeclReferenceExprSyntax, _ unexpectedAfterDeclName: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenTypeAndComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var comma: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenCommaAndDeclName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var declName: SwiftSyntax.DeclReferenceExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterDeclName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ImportPathComponentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndTrailingPeriod: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingPeriod: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingPeriod: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndTrailingPeriod: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingPeriod: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingPeriod: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct InheritanceClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndInheritedTypes: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritedTypes: SwiftSyntax.InheritedTypeListSyntax, _ unexpectedAfterInheritedTypes: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndInheritedTypes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var inheritedTypes: SwiftSyntax.InheritedTypeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.inheritedTypes.append(newElement) instead")
  public func addInheritedType(_ element: SwiftSyntax.InheritedTypeSyntax) -> SwiftSyntax.InheritanceClauseSyntax
  public var unexpectedAfterInheritedTypes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct InheritedTypeSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedBetweenTypeAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenTypeAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct InitializerClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeEqual: SwiftSyntax.UnexpectedNodesSyntax? = nil, equal: SwiftSyntax.TokenSyntax = .equalToken(), _ unexpectedBetweenEqualAndValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, value: some ExprSyntaxProtocol, _ unexpectedAfterValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeEqual: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var equal: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenEqualAndValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var value: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct KeyPathComponentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public enum Component : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case property(SwiftSyntax.KeyPathPropertyComponentSyntax)
    case `subscript`(SwiftSyntax.KeyPathSubscriptComponentSyntax)
    case optional(SwiftSyntax.KeyPathOptionalComponentSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.KeyPathPropertyComponentSyntax)
    public init(_ node: SwiftSyntax.KeyPathSubscriptComponentSyntax)
    public init(_ node: SwiftSyntax.KeyPathOptionalComponentSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePeriod: SwiftSyntax.UnexpectedNodesSyntax? = nil, period: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenPeriodAndComponent: SwiftSyntax.UnexpectedNodesSyntax? = nil, component: SwiftSyntax.KeyPathComponentSyntax.Component, _ unexpectedAfterComponent: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforePeriod: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var period: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenPeriodAndComponent: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var component: SwiftSyntax.KeyPathComponentSyntax.Component {
    get
    set(value)
  }
  public var unexpectedAfterComponent: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct KeyPathOptionalComponentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeQuestionOrExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, questionOrExclamationMark: SwiftSyntax.TokenSyntax, _ unexpectedAfterQuestionOrExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeQuestionOrExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var questionOrExclamationMark: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterQuestionOrExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct KeyPathPropertyComponentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeDeclName: SwiftSyntax.UnexpectedNodesSyntax? = nil, declName: SwiftSyntax.DeclReferenceExprSyntax, _ unexpectedBetweenDeclNameAndGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? = nil, _ unexpectedAfterGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeDeclName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var declName: SwiftSyntax.DeclReferenceExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenDeclNameAndGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct KeyPathSubscriptComponentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquare: SwiftSyntax.TokenSyntax = .leftSquareToken(), _ unexpectedBetweenLeftSquareAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, arguments: SwiftSyntax.LabeledExprListSyntax, _ unexpectedBetweenArgumentsAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquare: SwiftSyntax.TokenSyntax = .rightSquareToken(), _ unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftSquareAndArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var arguments: SwiftSyntax.LabeledExprListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.arguments.append(newElement) instead")
  public func addArgument(_ element: SwiftSyntax.LabeledExprSyntax) -> SwiftSyntax.KeyPathSubscriptComponentSyntax
  public var unexpectedBetweenArgumentsAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct LabeledExprSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenColonAndExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedBetweenExpressionAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var label: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenExpressionAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct LabeledSpecializeArgumentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.TokenSyntax, _ unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, value: SwiftSyntax.TokenSyntax, _ unexpectedBetweenValueAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var label: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var value: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenValueAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct LayoutRequirementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedBetweenTypeAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndLayoutSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, layoutSpecifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenLayoutSpecifierAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenLeftParenAndSize: SwiftSyntax.UnexpectedNodesSyntax? = nil, size: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenSizeAndComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, comma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenCommaAndAlignment: SwiftSyntax.UnexpectedNodesSyntax? = nil, alignment: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenAlignmentAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenTypeAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndLayoutSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var layoutSpecifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLayoutSpecifierAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndSize: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var size: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenSizeAndComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var comma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenCommaAndAlignment: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var alignment: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenAlignmentAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MatchingPatternConditionSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeCaseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, caseKeyword: SwiftSyntax.TokenSyntax = .keyword(.case), _ unexpectedBetweenCaseKeywordAndPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, pattern: some PatternSyntaxProtocol, _ unexpectedBetweenPatternAndTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? = nil, typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? = nil, _ unexpectedBetweenTypeAnnotationAndInitializer: SwiftSyntax.UnexpectedNodesSyntax? = nil, initializer: SwiftSyntax.InitializerClauseSyntax, _ unexpectedAfterInitializer: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeCaseKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var caseKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenCaseKeywordAndPattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var pattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPatternAndTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenTypeAnnotationAndInitializer: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var initializer: SwiftSyntax.InitializerClauseSyntax {
    get
    set(value)
  }
  public var unexpectedAfterInitializer: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MemberBlockItemSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeDecl: SwiftSyntax.UnexpectedNodesSyntax? = nil, decl: some DeclSyntaxProtocol, _ unexpectedBetweenDeclAndSemicolon: SwiftSyntax.UnexpectedNodesSyntax? = nil, semicolon: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterSemicolon: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeDecl: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var decl: SwiftSyntax.DeclSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenDeclAndSemicolon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var semicolon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterSemicolon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MemberBlockSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), _ unexpectedBetweenLeftBraceAndMembers: SwiftSyntax.UnexpectedNodesSyntax? = nil, members: SwiftSyntax.MemberBlockItemListSyntax, _ unexpectedBetweenMembersAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), _ unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftBraceAndMembers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var members: SwiftSyntax.MemberBlockItemListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.members.append(newElement) instead")
  public func addMember(_ element: SwiftSyntax.MemberBlockItemSyntax) -> SwiftSyntax.MemberBlockSyntax
  public var unexpectedBetweenMembersAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightBrace: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MissingSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePlaceholder: SwiftSyntax.UnexpectedNodesSyntax? = nil, placeholder: SwiftSyntax.TokenSyntax, _ unexpectedAfterPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforePlaceholder: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var placeholder: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MultipleTrailingClosureElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.TokenSyntax, _ unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, closure: SwiftSyntax.ClosureExprSyntax, _ unexpectedAfterClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var label: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndClosure: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var closure: SwiftSyntax.ClosureExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterClosure: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ObjCSelectorPieceSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct OpaqueReturnTypeOfAttributeArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeMangledName: SwiftSyntax.UnexpectedNodesSyntax? = nil, mangledName: SwiftSyntax.StringLiteralExprSyntax, _ unexpectedBetweenMangledNameAndComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, comma: SwiftSyntax.TokenSyntax = .commaToken(), _ unexpectedBetweenCommaAndOrdinal: SwiftSyntax.UnexpectedNodesSyntax? = nil, ordinal: SwiftSyntax.TokenSyntax, _ unexpectedAfterOrdinal: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeMangledName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var mangledName: SwiftSyntax.StringLiteralExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenMangledNameAndComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var comma: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenCommaAndOrdinal: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var ordinal: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterOrdinal: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct OperatorPrecedenceAndTypesSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndPrecedenceGroup: SwiftSyntax.UnexpectedNodesSyntax? = nil, precedenceGroup: SwiftSyntax.TokenSyntax, _ unexpectedBetweenPrecedenceGroupAndDesignatedTypes: SwiftSyntax.UnexpectedNodesSyntax? = nil, designatedTypes: SwiftSyntax.DesignatedTypeListSyntax, _ unexpectedAfterDesignatedTypes: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndPrecedenceGroup: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var precedenceGroup: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPrecedenceGroupAndDesignatedTypes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var designatedTypes: SwiftSyntax.DesignatedTypeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.designatedTypes.append(newElement) instead")
  public func addDesignatedTypeElement(_ element: SwiftSyntax.DesignatedTypeSyntax) -> SwiftSyntax.OperatorPrecedenceAndTypesSyntax
  public var unexpectedAfterDesignatedTypes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct OptionalBindingConditionSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBindingSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, bindingSpecifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenBindingSpecifierAndPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, pattern: some PatternSyntaxProtocol, _ unexpectedBetweenPatternAndTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? = nil, typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? = nil, _ unexpectedBetweenTypeAnnotationAndInitializer: SwiftSyntax.UnexpectedNodesSyntax? = nil, initializer: SwiftSyntax.InitializerClauseSyntax? = nil, _ unexpectedAfterInitializer: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeBindingSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var bindingSpecifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenBindingSpecifierAndPattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var pattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPatternAndTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenTypeAnnotationAndInitializer: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var initializer: SwiftSyntax.InitializerClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterInitializer: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct OriginallyDefinedInAttributeArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeModuleLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, moduleLabel: SwiftSyntax.TokenSyntax = .keyword(.module), _ unexpectedBetweenModuleLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndModuleName: SwiftSyntax.UnexpectedNodesSyntax? = nil, moduleName: SwiftSyntax.StringLiteralExprSyntax, _ unexpectedBetweenModuleNameAndComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, comma: SwiftSyntax.TokenSyntax = .commaToken(), _ unexpectedBetweenCommaAndPlatforms: SwiftSyntax.UnexpectedNodesSyntax? = nil, platforms: SwiftSyntax.PlatformVersionItemListSyntax, _ unexpectedAfterPlatforms: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeModuleLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var moduleLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenModuleLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndModuleName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var moduleName: SwiftSyntax.StringLiteralExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenModuleNameAndComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var comma: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenCommaAndPlatforms: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var platforms: SwiftSyntax.PlatformVersionItemListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.platforms.append(newElement) instead")
  public func addPlatform(_ element: SwiftSyntax.PlatformVersionItemSyntax) -> SwiftSyntax.OriginallyDefinedInAttributeArgumentsSyntax
  public var unexpectedAfterPlatforms: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PatternBindingSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, pattern: some PatternSyntaxProtocol, _ unexpectedBetweenPatternAndTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? = nil, typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? = nil, _ unexpectedBetweenTypeAnnotationAndInitializer: SwiftSyntax.UnexpectedNodesSyntax? = nil, initializer: SwiftSyntax.InitializerClauseSyntax? = nil, _ unexpectedBetweenInitializerAndAccessorBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, accessorBlock: SwiftSyntax.AccessorBlockSyntax? = nil, _ unexpectedBetweenAccessorBlockAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforePattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var pattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPatternAndTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenTypeAnnotationAndInitializer: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var initializer: SwiftSyntax.InitializerClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenInitializerAndAccessorBlock: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var accessorBlock: SwiftSyntax.AccessorBlockSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenAccessorBlockAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PlatformVersionItemSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePlatformVersion: SwiftSyntax.UnexpectedNodesSyntax? = nil, platformVersion: SwiftSyntax.PlatformVersionSyntax, _ unexpectedBetweenPlatformVersionAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforePlatformVersion: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var platformVersion: SwiftSyntax.PlatformVersionSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPlatformVersionAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PlatformVersionSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePlatform: SwiftSyntax.UnexpectedNodesSyntax? = nil, platform: SwiftSyntax.TokenSyntax, _ unexpectedBetweenPlatformAndVersion: SwiftSyntax.UnexpectedNodesSyntax? = nil, version: SwiftSyntax.VersionTupleSyntax? = nil, _ unexpectedAfterVersion: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforePlatform: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var platform: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPlatformAndVersion: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var version: SwiftSyntax.VersionTupleSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterVersion: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PoundSourceLocationArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeFileLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, fileLabel: SwiftSyntax.TokenSyntax = .keyword(.file), _ unexpectedBetweenFileLabelAndFileColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, fileColon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenFileColonAndFileName: SwiftSyntax.UnexpectedNodesSyntax? = nil, fileName: SwiftSyntax.SimpleStringLiteralExprSyntax, _ unexpectedBetweenFileNameAndComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, comma: SwiftSyntax.TokenSyntax = .commaToken(), _ unexpectedBetweenCommaAndLineLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, lineLabel: SwiftSyntax.TokenSyntax = .keyword(.line), _ unexpectedBetweenLineLabelAndLineColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, lineColon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenLineColonAndLineNumber: SwiftSyntax.UnexpectedNodesSyntax? = nil, lineNumber: SwiftSyntax.TokenSyntax, _ unexpectedAfterLineNumber: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeFileLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var fileLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenFileLabelAndFileColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var fileColon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenFileColonAndFileName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var fileName: SwiftSyntax.SimpleStringLiteralExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenFileNameAndComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var comma: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenCommaAndLineLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var lineLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLineLabelAndLineColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var lineColon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLineColonAndLineNumber: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var lineNumber: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterLineNumber: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PrecedenceGroupAssignmentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAssignmentLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, assignmentLabel: SwiftSyntax.TokenSyntax = .keyword(.assignment), _ unexpectedBetweenAssignmentLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, value: SwiftSyntax.TokenSyntax, _ unexpectedAfterValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAssignmentLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var assignmentLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenAssignmentLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var value: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PrecedenceGroupAssociativitySyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAssociativityLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, associativityLabel: SwiftSyntax.TokenSyntax = .keyword(.associativity), _ unexpectedBetweenAssociativityLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, value: SwiftSyntax.TokenSyntax, _ unexpectedAfterValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAssociativityLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var associativityLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenAssociativityLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var value: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PrecedenceGroupNameSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PrecedenceGroupRelationSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeHigherThanOrLowerThanLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, higherThanOrLowerThanLabel: SwiftSyntax.TokenSyntax, _ unexpectedBetweenHigherThanOrLowerThanLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndPrecedenceGroups: SwiftSyntax.UnexpectedNodesSyntax? = nil, precedenceGroups: SwiftSyntax.PrecedenceGroupNameListSyntax, _ unexpectedAfterPrecedenceGroups: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeHigherThanOrLowerThanLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var higherThanOrLowerThanLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenHigherThanOrLowerThanLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndPrecedenceGroups: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var precedenceGroups: SwiftSyntax.PrecedenceGroupNameListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.precedenceGroups.append(newElement) instead")
  public func addOtherName(_ element: SwiftSyntax.PrecedenceGroupNameSyntax) -> SwiftSyntax.PrecedenceGroupRelationSyntax
  public var unexpectedAfterPrecedenceGroups: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PrimaryAssociatedTypeClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftAngle: SwiftSyntax.TokenSyntax = .leftAngleToken(), _ unexpectedBetweenLeftAngleAndPrimaryAssociatedTypes: SwiftSyntax.UnexpectedNodesSyntax? = nil, primaryAssociatedTypes: SwiftSyntax.PrimaryAssociatedTypeListSyntax, _ unexpectedBetweenPrimaryAssociatedTypesAndRightAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightAngle: SwiftSyntax.TokenSyntax = .rightAngleToken(), _ unexpectedAfterRightAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftAngle: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftAngle: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftAngleAndPrimaryAssociatedTypes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var primaryAssociatedTypes: SwiftSyntax.PrimaryAssociatedTypeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.primaryAssociatedTypes.append(newElement) instead")
  public func addPrimaryAssociatedType(_ element: SwiftSyntax.PrimaryAssociatedTypeSyntax) -> SwiftSyntax.PrimaryAssociatedTypeClauseSyntax
  public var unexpectedBetweenPrimaryAssociatedTypesAndRightAngle: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightAngle: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightAngle: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PrimaryAssociatedTypeSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ReturnClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeArrow: SwiftSyntax.UnexpectedNodesSyntax? = nil, arrow: SwiftSyntax.TokenSyntax = .arrowToken(), _ unexpectedBetweenArrowAndType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedAfterType: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeArrow: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var arrow: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenArrowAndType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedAfterType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SameTypeRequirementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftType: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftType: some TypeSyntaxProtocol, _ unexpectedBetweenLeftTypeAndEqual: SwiftSyntax.UnexpectedNodesSyntax? = nil, equal: SwiftSyntax.TokenSyntax, _ unexpectedBetweenEqualAndRightType: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightType: some TypeSyntaxProtocol, _ unexpectedAfterRightType: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftTypeAndEqual: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var equal: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenEqualAndRightType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SourceFileSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeShebang: SwiftSyntax.UnexpectedNodesSyntax? = nil, shebang: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenShebangAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, statements: SwiftSyntax.CodeBlockItemListSyntax, _ unexpectedBetweenStatementsAndEndOfFileToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, endOfFileToken: SwiftSyntax.TokenSyntax = .endOfFileToken(), _ unexpectedAfterEndOfFileToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeShebang: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var shebang: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenShebangAndStatements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var statements: SwiftSyntax.CodeBlockItemListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.statements.append(newElement) instead")
  public func addStatement(_ element: SwiftSyntax.CodeBlockItemSyntax) -> SwiftSyntax.SourceFileSyntax
  public var unexpectedBetweenStatementsAndEndOfFileToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var endOfFileToken: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterEndOfFileToken: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SpecializeAvailabilityArgumentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAvailabilityLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, availabilityLabel: SwiftSyntax.TokenSyntax = .keyword(.availability), _ unexpectedBetweenAvailabilityLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndAvailabilityArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, availabilityArguments: SwiftSyntax.AvailabilityArgumentListSyntax, _ unexpectedBetweenAvailabilityArgumentsAndSemicolon: SwiftSyntax.UnexpectedNodesSyntax? = nil, semicolon: SwiftSyntax.TokenSyntax = .semicolonToken(), _ unexpectedAfterSemicolon: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAvailabilityLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var availabilityLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenAvailabilityLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndAvailabilityArguments: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var availabilityArguments: SwiftSyntax.AvailabilityArgumentListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.availabilityArguments.append(newElement) instead")
  public func addAvailabilityArgument(_ element: SwiftSyntax.AvailabilityArgumentSyntax) -> SwiftSyntax.SpecializeAvailabilityArgumentSyntax
  public var unexpectedBetweenAvailabilityArgumentsAndSemicolon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var semicolon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterSemicolon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SpecializeTargetFunctionArgumentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeTargetLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, targetLabel: SwiftSyntax.TokenSyntax = .keyword(.target), _ unexpectedBetweenTargetLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndDeclName: SwiftSyntax.UnexpectedNodesSyntax? = nil, declName: SwiftSyntax.DeclReferenceExprSyntax, _ unexpectedBetweenDeclNameAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeTargetLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var targetLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenTargetLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndDeclName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var declName: SwiftSyntax.DeclReferenceExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenDeclNameAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct StringSegmentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeContent: SwiftSyntax.UnexpectedNodesSyntax? = nil, content: SwiftSyntax.TokenSyntax, _ unexpectedAfterContent: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeContent: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var content: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterContent: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SwitchCaseItemSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, pattern: some PatternSyntaxProtocol, _ unexpectedBetweenPatternAndWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, whereClause: SwiftSyntax.WhereClauseSyntax? = nil, _ unexpectedBetweenWhereClauseAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforePattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var pattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPatternAndWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var whereClause: SwiftSyntax.WhereClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenWhereClauseAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SwitchCaseLabelSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeCaseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, caseKeyword: SwiftSyntax.TokenSyntax = .keyword(.case), _ unexpectedBetweenCaseKeywordAndCaseItems: SwiftSyntax.UnexpectedNodesSyntax? = nil, caseItems: SwiftSyntax.SwitchCaseItemListSyntax, _ unexpectedBetweenCaseItemsAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedAfterColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeCaseKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var caseKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenCaseKeywordAndCaseItems: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var caseItems: SwiftSyntax.SwitchCaseItemListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.caseItems.append(newElement) instead")
  public func addCaseItem(_ element: SwiftSyntax.SwitchCaseItemSyntax) -> SwiftSyntax.SwitchCaseLabelSyntax
  public var unexpectedBetweenCaseItemsAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SwitchCaseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public enum Label : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case `default`(SwiftSyntax.SwitchDefaultLabelSyntax)
    case `case`(SwiftSyntax.SwitchCaseLabelSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.SwitchDefaultLabelSyntax)
    public init(_ node: SwiftSyntax.SwitchCaseLabelSyntax)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAttribute: SwiftSyntax.UnexpectedNodesSyntax? = nil, attribute: SwiftSyntax.AttributeSyntax? = nil, _ unexpectedBetweenAttributeAndLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.SwitchCaseSyntax.Label, _ unexpectedBetweenLabelAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, statements: SwiftSyntax.CodeBlockItemListSyntax, _ unexpectedAfterStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAttribute: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attribute: SwiftSyntax.AttributeSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenAttributeAndLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var label: SwiftSyntax.SwitchCaseSyntax.Label {
    get
    set(value)
  }
  public var unexpectedBetweenLabelAndStatements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var statements: SwiftSyntax.CodeBlockItemListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.statements.append(newElement) instead")
  public func addStatement(_ element: SwiftSyntax.CodeBlockItemSyntax) -> SwiftSyntax.SwitchCaseSyntax
  public var unexpectedAfterStatements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SwitchDefaultLabelSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeDefaultKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, defaultKeyword: SwiftSyntax.TokenSyntax = .keyword(.default), _ unexpectedBetweenDefaultKeywordAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedAfterColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeDefaultKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var defaultKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenDefaultKeywordAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct TuplePatternElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenColonAndPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, pattern: some PatternSyntaxProtocol, _ unexpectedBetweenPatternAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var label: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndPattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var pattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPatternAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct TupleTypeElementSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeInoutKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, inoutKeyword: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenInoutKeywordAndFirstName: SwiftSyntax.UnexpectedNodesSyntax? = nil, firstName: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenFirstNameAndSecondName: SwiftSyntax.UnexpectedNodesSyntax? = nil, secondName: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenSecondNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenColonAndType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedBetweenTypeAndEllipsis: SwiftSyntax.UnexpectedNodesSyntax? = nil, ellipsis: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenEllipsisAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingComma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeInoutKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var inoutKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenInoutKeywordAndFirstName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var firstName: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenFirstNameAndSecondName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var secondName: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenSecondNameAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenTypeAndEllipsis: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var ellipsis: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenEllipsisAndTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var trailingComma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTrailingComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct TypeAnnotationSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedAfterType: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedAfterType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct TypeEffectSpecifiersSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeAsyncSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, asyncSpecifier: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenAsyncSpecifierAndThrowsSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, throwsSpecifier: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterThrowsSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeAsyncSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var asyncSpecifier: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenAsyncSpecifierAndThrowsSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var throwsSpecifier: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterThrowsSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct TypeInitializerClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeEqual: SwiftSyntax.UnexpectedNodesSyntax? = nil, equal: SwiftSyntax.TokenSyntax = .equalToken(), _ unexpectedBetweenEqualAndValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, value: some TypeSyntaxProtocol, _ unexpectedAfterValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeEqual: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var equal: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenEqualAndValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var value: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedAfterValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct UnavailableFromAsyncAttributeArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeMessageLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, messageLabel: SwiftSyntax.TokenSyntax = .keyword(.message), _ unexpectedBetweenMessageLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndMessage: SwiftSyntax.UnexpectedNodesSyntax? = nil, message: SwiftSyntax.StringLiteralExprSyntax, _ unexpectedAfterMessage: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeMessageLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var messageLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenMessageLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndMessage: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var message: SwiftSyntax.StringLiteralExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterMessage: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct UnderscorePrivateAttributeArgumentsSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeSourceFileLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, sourceFileLabel: SwiftSyntax.TokenSyntax = .keyword(.sourceFile), _ unexpectedBetweenSourceFileLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndFilename: SwiftSyntax.UnexpectedNodesSyntax? = nil, filename: SwiftSyntax.StringLiteralExprSyntax, _ unexpectedAfterFilename: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeSourceFileLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var sourceFileLabel: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenSourceFileLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndFilename: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var filename: SwiftSyntax.StringLiteralExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterFilename: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct VersionComponentSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePeriod: SwiftSyntax.UnexpectedNodesSyntax? = nil, period: SwiftSyntax.TokenSyntax = .periodToken(), _ unexpectedBetweenPeriodAndNumber: SwiftSyntax.UnexpectedNodesSyntax? = nil, number: SwiftSyntax.TokenSyntax, _ unexpectedAfterNumber: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforePeriod: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var period: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPeriodAndNumber: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var number: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterNumber: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct VersionTupleSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeMajor: SwiftSyntax.UnexpectedNodesSyntax? = nil, major: SwiftSyntax.TokenSyntax, _ unexpectedBetweenMajorAndComponents: SwiftSyntax.UnexpectedNodesSyntax? = nil, components: SwiftSyntax.VersionComponentListSyntax, _ unexpectedAfterComponents: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeMajor: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var major: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenMajorAndComponents: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var components: SwiftSyntax.VersionComponentListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.components.append(newElement) instead")
  public func addVersionComponent(_ element: SwiftSyntax.VersionComponentSyntax) -> SwiftSyntax.VersionTupleSyntax
  public var unexpectedAfterComponents: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct WhereClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeWhereKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, whereKeyword: SwiftSyntax.TokenSyntax = .keyword(.where), _ unexpectedBetweenWhereKeywordAndCondition: SwiftSyntax.UnexpectedNodesSyntax? = nil, condition: some ExprSyntaxProtocol, _ unexpectedAfterCondition: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeWhereKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var whereKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenWhereKeywordAndCondition: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var condition: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterCondition: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct YieldedExpressionSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedBetweenExpressionAndComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, comma: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterComma: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenExpressionAndComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var comma: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterComma: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct YieldedExpressionsClauseSyntax : SwiftSyntax.SyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, elements: SwiftSyntax.YieldedExpressionListSyntax, _ unexpectedBetweenElementsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndElements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var elements: SwiftSyntax.YieldedExpressionListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.elements.append(newElement) instead")
  public func addElement(_ element: SwiftSyntax.YieldedExpressionSyntax) -> SwiftSyntax.YieldedExpressionsClauseSyntax
  public var unexpectedBetweenElementsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ExpressionPatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct IdentifierPatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, _ unexpectedAfterIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var identifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterIdentifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct IsTypePatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeIsKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, isKeyword: SwiftSyntax.TokenSyntax = .keyword(.is), _ unexpectedBetweenIsKeywordAndType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedAfterType: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeIsKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var isKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenIsKeywordAndType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedAfterType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MissingPatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePlaceholder: SwiftSyntax.UnexpectedNodesSyntax? = nil, placeholder: SwiftSyntax.TokenSyntax, _ unexpectedAfterPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforePlaceholder: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var placeholder: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct TuplePatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, elements: SwiftSyntax.TuplePatternElementListSyntax, _ unexpectedBetweenElementsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndElements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var elements: SwiftSyntax.TuplePatternElementListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.elements.append(newElement) instead")
  public func addElement(_ element: SwiftSyntax.TuplePatternElementSyntax) -> SwiftSyntax.TuplePatternSyntax
  public var unexpectedBetweenElementsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ValueBindingPatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBindingSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, bindingSpecifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenBindingSpecifierAndPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, pattern: some PatternSyntaxProtocol, _ unexpectedAfterPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeBindingSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var bindingSpecifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenBindingSpecifierAndPattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var pattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public var unexpectedAfterPattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct WildcardPatternSyntax : SwiftSyntax.PatternSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeWildcard: SwiftSyntax.UnexpectedNodesSyntax? = nil, wildcard: SwiftSyntax.TokenSyntax = .wildcardToken(), _ unexpectedBetweenWildcardAndTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? = nil, typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? = nil, _ unexpectedAfterTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeWildcard: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var wildcard: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenWildcardAndTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct BreakStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBreakKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, breakKeyword: SwiftSyntax.TokenSyntax = .keyword(.break), _ unexpectedBetweenBreakKeywordAndLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeBreakKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var breakKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenBreakKeywordAndLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var label: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ContinueStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeContinueKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, continueKeyword: SwiftSyntax.TokenSyntax = .keyword(.continue), _ unexpectedBetweenContinueKeywordAndLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.TokenSyntax? = nil, _ unexpectedAfterLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeContinueKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var continueKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenContinueKeywordAndLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var label: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DeferStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeDeferKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, deferKeyword: SwiftSyntax.TokenSyntax = .keyword(.defer), _ unexpectedBetweenDeferKeywordAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, body: SwiftSyntax.CodeBlockSyntax, _ unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeDeferKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var deferKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenDeferKeywordAndBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public var unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DiscardStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeDiscardKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, discardKeyword: SwiftSyntax.TokenSyntax = .keyword(.discard), _ unexpectedBetweenDiscardKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeDiscardKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var discardKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenDiscardKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DoStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeDoKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, doKeyword: SwiftSyntax.TokenSyntax = .keyword(.do), _ unexpectedBetweenDoKeywordAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, body: SwiftSyntax.CodeBlockSyntax, _ unexpectedBetweenBodyAndCatchClauses: SwiftSyntax.UnexpectedNodesSyntax? = nil, catchClauses: SwiftSyntax.CatchClauseListSyntax = [], _ unexpectedAfterCatchClauses: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeDoKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var doKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenDoKeywordAndBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenBodyAndCatchClauses: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var catchClauses: SwiftSyntax.CatchClauseListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.catchClauses.append(newElement) instead")
  public func addCatchClause(_ element: SwiftSyntax.CatchClauseSyntax) -> SwiftSyntax.DoStmtSyntax
  public var unexpectedAfterCatchClauses: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ExpressionStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct FallThroughStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeFallthroughKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, fallthroughKeyword: SwiftSyntax.TokenSyntax = .keyword(.fallthrough), _ unexpectedAfterFallthroughKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeFallthroughKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var fallthroughKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterFallthroughKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ForStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeForKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, forKeyword: SwiftSyntax.TokenSyntax = .keyword(.for), _ unexpectedBetweenForKeywordAndTryKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, tryKeyword: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenTryKeywordAndAwaitKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, awaitKeyword: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenAwaitKeywordAndCaseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, caseKeyword: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenCaseKeywordAndPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, pattern: some PatternSyntaxProtocol, _ unexpectedBetweenPatternAndTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? = nil, typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? = nil, _ unexpectedBetweenTypeAnnotationAndInKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, inKeyword: SwiftSyntax.TokenSyntax = .keyword(.in), _ unexpectedBetweenInKeywordAndSequence: SwiftSyntax.UnexpectedNodesSyntax? = nil, sequence: some ExprSyntaxProtocol, _ unexpectedBetweenSequenceAndWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, whereClause: SwiftSyntax.WhereClauseSyntax? = nil, _ unexpectedBetweenWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, body: SwiftSyntax.CodeBlockSyntax, _ unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeForKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var forKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenForKeywordAndTryKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var tryKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenTryKeywordAndAwaitKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var awaitKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenAwaitKeywordAndCaseKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var caseKeyword: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenCaseKeywordAndPattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var pattern: SwiftSyntax.PatternSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPatternAndTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenTypeAnnotationAndInKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var inKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenInKeywordAndSequence: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var sequence: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenSequenceAndWhereClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var whereClause: SwiftSyntax.WhereClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public var unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct GuardStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeGuardKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, guardKeyword: SwiftSyntax.TokenSyntax = .keyword(.guard), _ unexpectedBetweenGuardKeywordAndConditions: SwiftSyntax.UnexpectedNodesSyntax? = nil, conditions: SwiftSyntax.ConditionElementListSyntax, _ unexpectedBetweenConditionsAndElseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, elseKeyword: SwiftSyntax.TokenSyntax = .keyword(.else), _ unexpectedBetweenElseKeywordAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, body: SwiftSyntax.CodeBlockSyntax, _ unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeGuardKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var guardKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenGuardKeywordAndConditions: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var conditions: SwiftSyntax.ConditionElementListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.conditions.append(newElement) instead")
  public func addCondition(_ element: SwiftSyntax.ConditionElementSyntax) -> SwiftSyntax.GuardStmtSyntax
  public var unexpectedBetweenConditionsAndElseKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var elseKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenElseKeywordAndBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public var unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct LabeledStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.TokenSyntax, _ unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndStatement: SwiftSyntax.UnexpectedNodesSyntax? = nil, statement: some StmtSyntaxProtocol, _ unexpectedAfterStatement: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLabel: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var label: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLabelAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndStatement: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var statement: SwiftSyntax.StmtSyntax {
    get
    set(value)
  }
  public var unexpectedAfterStatement: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MissingStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePlaceholder: SwiftSyntax.UnexpectedNodesSyntax? = nil, placeholder: SwiftSyntax.TokenSyntax, _ unexpectedAfterPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforePlaceholder: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var placeholder: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct RepeatStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeRepeatKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, repeatKeyword: SwiftSyntax.TokenSyntax = .keyword(.repeat), _ unexpectedBetweenRepeatKeywordAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, body: SwiftSyntax.CodeBlockSyntax, _ unexpectedBetweenBodyAndWhileKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, whileKeyword: SwiftSyntax.TokenSyntax = .keyword(.while), _ unexpectedBetweenWhileKeywordAndCondition: SwiftSyntax.UnexpectedNodesSyntax? = nil, condition: some ExprSyntaxProtocol, _ unexpectedAfterCondition: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeRepeatKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var repeatKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenRepeatKeywordAndBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenBodyAndWhileKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var whileKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenWhileKeywordAndCondition: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var condition: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterCondition: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ReturnStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeReturnKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, returnKeyword: SwiftSyntax.TokenSyntax = .keyword(.return), _ unexpectedBetweenReturnKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: (some ExprSyntaxProtocol)? = ExprSyntax?.none, _ unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeReturnKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var returnKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenReturnKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ThrowStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeThrowKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, throwKeyword: SwiftSyntax.TokenSyntax = .keyword(.throw), _ unexpectedBetweenThrowKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: some ExprSyntaxProtocol, _ unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeThrowKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var throwKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenThrowKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var expression: SwiftSyntax.ExprSyntax {
    get
    set(value)
  }
  public var unexpectedAfterExpression: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct WhileStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeWhileKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, whileKeyword: SwiftSyntax.TokenSyntax = .keyword(.while), _ unexpectedBetweenWhileKeywordAndConditions: SwiftSyntax.UnexpectedNodesSyntax? = nil, conditions: SwiftSyntax.ConditionElementListSyntax, _ unexpectedBetweenConditionsAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, body: SwiftSyntax.CodeBlockSyntax, _ unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeWhileKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var whileKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenWhileKeywordAndConditions: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var conditions: SwiftSyntax.ConditionElementListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.conditions.append(newElement) instead")
  public func addCondition(_ element: SwiftSyntax.ConditionElementSyntax) -> SwiftSyntax.WhileStmtSyntax
  public var unexpectedBetweenConditionsAndBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var body: SwiftSyntax.CodeBlockSyntax {
    get
    set(value)
  }
  public var unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct YieldStmtSyntax : SwiftSyntax.StmtSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public enum YieldedExpressions : SwiftSyntax.SyntaxChildChoices, SwiftSyntax.SyntaxHashable {
    case multiple(SwiftSyntax.YieldedExpressionsClauseSyntax)
    case single(SwiftSyntax.ExprSyntax)
    public var _syntaxNode: SwiftSyntax.Syntax {
      get
    }
    public init(_ node: SwiftSyntax.YieldedExpressionsClauseSyntax)
    public init(_ node: some ExprSyntaxProtocol)
    public init?(_ node: some SyntaxProtocol)
    public static var structure: SwiftSyntax.SyntaxNodeStructure {
      get
    }
    public var hashValue: Swift.Int {
      get
    }
  }
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeYieldKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, yieldKeyword: SwiftSyntax.TokenSyntax = .keyword(.yield), _ unexpectedBetweenYieldKeywordAndYieldedExpressions: SwiftSyntax.UnexpectedNodesSyntax? = nil, yieldedExpressions: SwiftSyntax.YieldStmtSyntax.YieldedExpressions, _ unexpectedAfterYieldedExpressions: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeYieldKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var yieldKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenYieldKeywordAndYieldedExpressions: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var yieldedExpressions: SwiftSyntax.YieldStmtSyntax.YieldedExpressions {
    get
    set(value)
  }
  public var unexpectedAfterYieldedExpressions: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ArrayTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquare: SwiftSyntax.TokenSyntax = .leftSquareToken(), _ unexpectedBetweenLeftSquareAndElement: SwiftSyntax.UnexpectedNodesSyntax? = nil, element: some TypeSyntaxProtocol, _ unexpectedBetweenElementAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquare: SwiftSyntax.TokenSyntax = .rightSquareToken(), _ unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftSquareAndElement: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var element: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenElementAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct AttributedTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, specifier: SwiftSyntax.TokenSyntax? = nil, _ unexpectedBetweenSpecifierAndAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], _ unexpectedBetweenAttributesAndBaseType: SwiftSyntax.UnexpectedNodesSyntax? = nil, baseType: some TypeSyntaxProtocol, _ unexpectedAfterBaseType: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var specifier: SwiftSyntax.TokenSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenSpecifierAndAttributes: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var attributes: SwiftSyntax.AttributeListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.attributes.append(newElement) instead")
  public func addAttribute(_ element: SwiftSyntax.Syntax) -> SwiftSyntax.AttributedTypeSyntax
  public var unexpectedBetweenAttributesAndBaseType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var baseType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedAfterBaseType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ClassRestrictionTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeClassKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, classKeyword: SwiftSyntax.TokenSyntax = .keyword(.class), _ unexpectedAfterClassKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeClassKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var classKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterClassKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct CompositionTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, elements: SwiftSyntax.CompositionTypeElementListSyntax, _ unexpectedAfterElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeElements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var elements: SwiftSyntax.CompositionTypeElementListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.elements.append(newElement) instead")
  public func addElement(_ element: SwiftSyntax.CompositionTypeElementSyntax) -> SwiftSyntax.CompositionTypeSyntax
  public var unexpectedAfterElements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct DictionaryTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquare: SwiftSyntax.TokenSyntax = .leftSquareToken(), _ unexpectedBetweenLeftSquareAndKey: SwiftSyntax.UnexpectedNodesSyntax? = nil, key: some TypeSyntaxProtocol, _ unexpectedBetweenKeyAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), _ unexpectedBetweenColonAndValue: SwiftSyntax.UnexpectedNodesSyntax? = nil, value: some TypeSyntaxProtocol, _ unexpectedBetweenValueAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquare: SwiftSyntax.TokenSyntax = .rightSquareToken(), _ unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftSquareAndKey: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var key: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenKeyAndColon: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var colon: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenColonAndValue: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var value: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenValueAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightSquare: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct FunctionTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameters: SwiftSyntax.TupleTypeElementListSyntax, _ unexpectedBetweenParametersAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedBetweenRightParenAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, effectSpecifiers: SwiftSyntax.TypeEffectSpecifiersSyntax? = nil, _ unexpectedBetweenEffectSpecifiersAndReturnClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, returnClause: SwiftSyntax.ReturnClauseSyntax, _ unexpectedAfterReturnClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndParameters: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var parameters: SwiftSyntax.TupleTypeElementListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.parameters.append(newElement) instead")
  public func addParameter(_ element: SwiftSyntax.TupleTypeElementSyntax) -> SwiftSyntax.FunctionTypeSyntax
  public var unexpectedBetweenParametersAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenRightParenAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var effectSpecifiers: SwiftSyntax.TypeEffectSpecifiersSyntax? {
    get
    set(value)
  }
  public var unexpectedBetweenEffectSpecifiersAndReturnClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var returnClause: SwiftSyntax.ReturnClauseSyntax {
    get
    set(value)
  }
  public var unexpectedAfterReturnClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct IdentifierTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? = nil, _ unexpectedAfterGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct ImplicitlyUnwrappedOptionalTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeWrappedType: SwiftSyntax.UnexpectedNodesSyntax? = nil, wrappedType: some TypeSyntaxProtocol, _ unexpectedBetweenWrappedTypeAndExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, exclamationMark: SwiftSyntax.TokenSyntax = .exclamationMarkToken(), _ unexpectedAfterExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeWrappedType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var wrappedType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenWrappedTypeAndExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var exclamationMark: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterExclamationMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MemberTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBaseType: SwiftSyntax.UnexpectedNodesSyntax? = nil, baseType: some TypeSyntaxProtocol, _ unexpectedBetweenBaseTypeAndPeriod: SwiftSyntax.UnexpectedNodesSyntax? = nil, period: SwiftSyntax.TokenSyntax = .periodToken(), _ unexpectedBetweenPeriodAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, _ unexpectedBetweenNameAndGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? = nil, _ unexpectedAfterGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeBaseType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var baseType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenBaseTypeAndPeriod: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var period: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPeriodAndName: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var name: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenNameAndGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? {
    get
    set(value)
  }
  public var unexpectedAfterGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MetatypeTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeBaseType: SwiftSyntax.UnexpectedNodesSyntax? = nil, baseType: some TypeSyntaxProtocol, _ unexpectedBetweenBaseTypeAndPeriod: SwiftSyntax.UnexpectedNodesSyntax? = nil, period: SwiftSyntax.TokenSyntax = .periodToken(), _ unexpectedBetweenPeriodAndMetatypeSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, metatypeSpecifier: SwiftSyntax.TokenSyntax, _ unexpectedAfterMetatypeSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeBaseType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var baseType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenBaseTypeAndPeriod: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var period: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenPeriodAndMetatypeSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var metatypeSpecifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterMetatypeSpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct MissingTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforePlaceholder: SwiftSyntax.UnexpectedNodesSyntax? = nil, placeholder: SwiftSyntax.TokenSyntax, _ unexpectedAfterPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforePlaceholder: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var placeholder: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterPlaceholder: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct NamedOpaqueReturnTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax, _ unexpectedBetweenGenericParameterClauseAndType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedAfterType: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenGenericParameterClauseAndType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedAfterType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct OptionalTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeWrappedType: SwiftSyntax.UnexpectedNodesSyntax? = nil, wrappedType: some TypeSyntaxProtocol, _ unexpectedBetweenWrappedTypeAndQuestionMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, questionMark: SwiftSyntax.TokenSyntax = .postfixQuestionMarkToken(), _ unexpectedAfterQuestionMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeWrappedType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var wrappedType: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenWrappedTypeAndQuestionMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var questionMark: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterQuestionMark: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PackElementTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeEachKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, eachKeyword: SwiftSyntax.TokenSyntax = .keyword(.each), _ unexpectedBetweenEachKeywordAndPack: SwiftSyntax.UnexpectedNodesSyntax? = nil, pack: some TypeSyntaxProtocol, _ unexpectedAfterPack: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeEachKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var eachKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenEachKeywordAndPack: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var pack: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedAfterPack: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct PackExpansionTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeRepeatKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, repeatKeyword: SwiftSyntax.TokenSyntax = .keyword(.repeat), _ unexpectedBetweenRepeatKeywordAndRepetitionPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, repetitionPattern: some TypeSyntaxProtocol, _ unexpectedAfterRepetitionPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeRepeatKeyword: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var repeatKeyword: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenRepeatKeywordAndRepetitionPattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var repetitionPattern: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRepetitionPattern: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SomeOrAnyTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeSomeOrAnySpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, someOrAnySpecifier: SwiftSyntax.TokenSyntax, _ unexpectedBetweenSomeOrAnySpecifierAndConstraint: SwiftSyntax.UnexpectedNodesSyntax? = nil, constraint: some TypeSyntaxProtocol, _ unexpectedAfterConstraint: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeSomeOrAnySpecifier: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var someOrAnySpecifier: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenSomeOrAnySpecifierAndConstraint: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var constraint: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedAfterConstraint: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct SuppressedTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeWithoutTilde: SwiftSyntax.UnexpectedNodesSyntax? = nil, withoutTilde: SwiftSyntax.TokenSyntax, _ unexpectedBetweenWithoutTildeAndType: SwiftSyntax.UnexpectedNodesSyntax? = nil, type: some TypeSyntaxProtocol, _ unexpectedAfterType: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeWithoutTilde: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var withoutTilde: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenWithoutTildeAndType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var type: SwiftSyntax.TypeSyntax {
    get
    set(value)
  }
  public var unexpectedAfterType: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
public struct TupleTypeSyntax : SwiftSyntax.TypeSyntaxProtocol, SwiftSyntax.SyntaxHashable {
  public let _syntaxNode: SwiftSyntax.Syntax
  public init?(_ node: some SyntaxProtocol)
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, _ unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), _ unexpectedBetweenLeftParenAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, elements: SwiftSyntax.TupleTypeElementListSyntax, _ unexpectedBetweenElementsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), _ unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingTrivia: SwiftSyntax.Trivia? = nil)
  public var unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var leftParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedBetweenLeftParenAndElements: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var elements: SwiftSyntax.TupleTypeElementListSyntax {
    get
    set(value)
  }
  @available(*, deprecated, message: "Use node.elements.append(newElement) instead")
  public func addElement(_ element: SwiftSyntax.TupleTypeElementSyntax) -> SwiftSyntax.TupleTypeSyntax
  public var unexpectedBetweenElementsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public var rightParen: SwiftSyntax.TokenSyntax {
    get
    set(value)
  }
  public var unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? {
    get
    set(value)
  }
  public static var structure: SwiftSyntax.SyntaxNodeStructure {
    get
  }
  public var hashValue: Swift.Int {
    get
  }
}
extension SwiftSyntax.SyntaxKind : Swift.Equatable {}
extension SwiftSyntax.SyntaxKind : Swift.Hashable {}
extension SwiftSyntax.SourcePresence : Swift.Equatable {}
extension SwiftSyntax.SourcePresence : Swift.Hashable {}
extension SwiftSyntax.SyntaxTreeViewMode : Swift.Equatable {}
extension SwiftSyntax.SyntaxTreeViewMode : Swift.Hashable {}
extension SwiftSyntax.TokenDiagnostic.Severity : Swift.Hashable {}
extension SwiftSyntax.TokenDiagnostic.Kind : Swift.Equatable {}
extension SwiftSyntax.TokenDiagnostic.Kind : Swift.Hashable {}
extension SwiftSyntax.TriviaPosition : Swift.Equatable {}
extension SwiftSyntax.TriviaPosition : Swift.Hashable {}
extension SwiftSyntax.Keyword : Swift.RawRepresentable {}
extension SwiftSyntax.SyntaxVisitorContinueKind : Swift.Equatable {}
extension SwiftSyntax.SyntaxVisitorContinueKind : Swift.Hashable {}
