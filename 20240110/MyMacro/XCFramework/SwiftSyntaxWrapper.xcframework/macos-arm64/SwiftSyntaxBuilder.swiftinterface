// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-macosx10.15 -enable-objc-interop -enable-library-evolution -swift-version 5 -Onone -module-name SwiftSyntaxBuilder
import OSLog
import Swift
import SwiftBasicFormat
import SwiftDiagnostics
import SwiftParser
import SwiftParserDiagnostics
import SwiftSyntax
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
extension SwiftSyntax.ArrayElementListSyntax {
  public init(expressions: [SwiftSyntax.ExprSyntax])
}
extension SwiftSyntax.ArrayExprSyntax {
  public init(expressions: [SwiftSyntax.ExprSyntax])
}
extension SwiftSyntax.AttributeSyntax {
  public init(_ attributeName: SwiftSyntax.TypeSyntax, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentList: () -> SwiftSyntax.LabeledExprListSyntax? = { nil })
}
extension SwiftSyntax.BinaryOperatorExprSyntax {
  public init(text: Swift.String)
}
extension SwiftSyntax.BooleanLiteralExprSyntax : Swift.ExpressibleByBooleanLiteral {
  public init(_ value: Swift.Bool)
  public init(booleanLiteral value: Swift.Bool)
  public typealias BooleanLiteralType = Swift.Bool
}
extension SwiftSyntax.CatchClauseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia = [], _ catchItems: SwiftSyntax.CatchItemListSyntax, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () -> SwiftSyntax.CodeBlockItemListSyntax)
}
extension SwiftSyntax.DictionaryExprSyntax {
  public init(leftSquare: SwiftSyntax.TokenSyntax = .leftSquareToken(), rightSquare: SwiftSyntax.TokenSyntax = .rightSquareToken(), @SwiftSyntaxBuilder.DictionaryElementListBuilder contentBuilder: () -> SwiftSyntax.DictionaryElementListSyntax = { DictionaryElementListSyntax([]) })
}
extension SwiftSyntax.ExprSyntax {
  public init(literal: some ExpressibleByLiteralSyntax)
}
extension SwiftSyntax.FloatLiteralExprSyntax : Swift.ExpressibleByFloatLiteral {
  public init(_ value: Swift.Float)
  public init(floatLiteral value: Swift.Float)
  public typealias FloatLiteralType = Swift.Float
}
extension SwiftSyntax.FunctionCallExprSyntax {
  public init(callee: some ExprSyntaxProtocol, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], @SwiftSyntaxBuilder.LabeledExprListBuilder argumentList: () -> SwiftSyntax.LabeledExprListSyntax = { [] })
}
extension SwiftSyntax.IntegerLiteralExprSyntax : Swift.ExpressibleByIntegerLiteral {
  public init(_ value: Swift.Int)
  public init(integerLiteral value: Swift.Int)
  public typealias IntegerLiteralType = Swift.Int
}
extension SwiftSyntax.StringLiteralExprSyntax {
  public init(openDelimiter: SwiftSyntax.TokenSyntax? = nil, openingQuote: SwiftSyntax.TokenSyntax = .stringQuoteToken(), content: Swift.String, closingQuote: SwiftSyntax.TokenSyntax = .stringQuoteToken(), closeDelimiter: SwiftSyntax.TokenSyntax? = nil)
}
extension SwiftSyntax.LabeledExprSyntax {
  public init(label: Swift.String? = nil, expression: some ExprSyntaxProtocol)
}
extension SwiftSyntax.VariableDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia = [], attributes: SwiftSyntax.AttributeListSyntax = [], modifiers: SwiftSyntax.DeclModifierListSyntax = [], _ bindingSpecifier: SwiftSyntax.Keyword, name: SwiftSyntax.PatternSyntax, type: SwiftSyntax.TypeAnnotationSyntax? = nil, initializer: SwiftSyntax.InitializerClauseSyntax? = nil)
}
public protocol DeclSyntaxParseable : SwiftSyntax.DeclSyntaxProtocol {
}
extension SwiftSyntaxBuilder.DeclSyntaxParseable {
  public init(_ stringInterpolation: SwiftSyntaxBuilder.SyntaxNodeString) throws
}
extension SwiftSyntax.ActorDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.AssociatedTypeDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.EnumCaseDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.ClassDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.DeinitializerDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.EnumDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.ExtensionDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.FunctionDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.ImportDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.VariableDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.MacroDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.OperatorDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.MacroExpansionDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.PrecedenceGroupDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.ProtocolDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.StructDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.SubscriptDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
extension SwiftSyntax.TypeAliasDeclSyntax : SwiftSyntaxBuilder.DeclSyntaxParseable {
}
@_hasMissingDesignatedInitializers public class Indenter : SwiftSyntax.SyntaxRewriter {
  public static func indent<SyntaxType>(_ node: SyntaxType, indentation: SwiftSyntax.Trivia) -> SyntaxType where SyntaxType : SwiftSyntax.SyntaxProtocol
  override public func visit(_ token: SwiftSyntax.TokenSyntax) -> SwiftSyntax.TokenSyntax
  @objc deinit
}
extension SwiftSyntaxBuilder.CodeBlockItemListBuilder {
  public static func buildExpression(_ expression: some ExprSyntaxProtocol) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component
  public static func buildExpression(_ expression: some StmtSyntaxProtocol) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component
  public static func buildExpression(_ expression: some DeclSyntaxProtocol) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component
}
extension SwiftSyntaxBuilder.ConditionElementListBuilder {
  public static func buildExpression(_ expression: some ExprSyntaxProtocol) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.AvailabilityConditionSyntax) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.MatchingPatternConditionSyntax) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.OptionalBindingConditionSyntax) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
}
extension SwiftSyntaxBuilder.MemberBlockItemListBuilder {
  public static func buildExpression(_ expression: some DeclSyntaxProtocol) -> SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component
}
extension SwiftSyntax.UnexpectedNodesSyntax {
  public init(_ elements: [any SwiftSyntax.SyntaxProtocol])
}
@available(*, deprecated, renamed: "ImportPathComponentListBuilder")
public typealias AccessPathBuilder = SwiftSyntaxBuilder.ImportPathComponentListBuilder
@available(*, deprecated, renamed: "LabeledExprListBuilder")
public typealias TupleExprElementListBuilder = SwiftSyntaxBuilder.LabeledExprListBuilder
public struct SyntaxStringInterpolation {
}
extension SwiftSyntaxBuilder.SyntaxStringInterpolation : Swift.StringInterpolationProtocol {
  public init(literalCapacity: Swift.Int, interpolationCount: Swift.Int)
  public mutating func appendLiteral(_ text: Swift.String)
  public mutating func appendInterpolation<Node>(_ node: Node) where Node : SwiftSyntax.SyntaxProtocol
  public mutating func appendInterpolation<T>(raw value: T)
  public mutating func appendInterpolation<T>(_ type: T.Type)
  public mutating func appendInterpolation(_ buildable: some SyntaxProtocol, format: SwiftBasicFormat.BasicFormat = BasicFormat())
  public mutating func appendInterpolation(_ trivia: SwiftSyntax.Trivia)
  public mutating func appendInterpolation(literal value: some ExpressibleByLiteralSyntax, format: SwiftBasicFormat.BasicFormat = BasicFormat())
  public mutating func appendInterpolation<Literal>(literal value: Literal?, format: SwiftBasicFormat.BasicFormat = BasicFormat()) where Literal : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax
  public typealias StringLiteralType = Swift.String
}
public protocol SyntaxExpressibleByStringInterpolation : Swift.ExpressibleByStringInterpolation where Self.StringInterpolation == SwiftSyntaxBuilder.SyntaxStringInterpolation {
  init(stringInterpolation: SwiftSyntaxBuilder.SyntaxStringInterpolation)
}
public protocol ExpressibleByLiteralSyntax {
  associatedtype LiteralType : SwiftSyntax.ExprSyntaxProtocol
  func makeLiteralSyntax() -> Self.LiteralType
}
extension SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public init(stringLiteral value: Swift.String)
}
extension Swift.Substring : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.StringLiteralExprSyntax
  public typealias LiteralType = SwiftSyntax.StringLiteralExprSyntax
}
extension Swift.String : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.StringLiteralExprSyntax
  public typealias LiteralType = SwiftSyntax.StringLiteralExprSyntax
}
extension SwiftSyntaxBuilder.ExpressibleByLiteralSyntax where Self : Swift.BinaryInteger {
  public func makeLiteralSyntax() -> SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.Int : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.Int8 : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.Int16 : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.Int32 : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.Int64 : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.UInt : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.UInt8 : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.UInt16 : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.UInt32 : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension Swift.UInt64 : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.IntegerLiteralExprSyntax
}
extension SwiftSyntaxBuilder.ExpressibleByLiteralSyntax where Self : Swift.FloatingPoint, Self : Swift.LosslessStringConvertible {
  public func makeLiteralSyntax() -> SwiftSyntax.ExprSyntax
}
extension Swift.Float : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.ExprSyntax
}
extension Swift.Double : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.ExprSyntax
}
@available(macOS 11.0, iOS 14.0, watchOS 7.0, tvOS 14.0, *)
extension Swift.Float16 : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public typealias LiteralType = SwiftSyntax.ExprSyntax
}
extension Swift.Bool : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.BooleanLiteralExprSyntax
  public typealias LiteralType = SwiftSyntax.BooleanLiteralExprSyntax
}
extension Swift.ArraySlice : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax where Element : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.ArrayExprSyntax
  public typealias LiteralType = SwiftSyntax.ArrayExprSyntax
}
extension Swift.Array : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax where Element : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.ArrayExprSyntax
  public typealias LiteralType = SwiftSyntax.ArrayExprSyntax
}
extension Swift.Set : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax where Element : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.ArrayExprSyntax
  public typealias LiteralType = SwiftSyntax.ArrayExprSyntax
}
extension Swift.KeyValuePairs : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax where Key : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax, Value : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.DictionaryExprSyntax
  public typealias LiteralType = SwiftSyntax.DictionaryExprSyntax
}
extension Swift.Dictionary : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax where Key : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax, Value : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.DictionaryExprSyntax
  public typealias LiteralType = SwiftSyntax.DictionaryExprSyntax
}
extension Swift.Optional : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax where Wrapped : SwiftSyntaxBuilder.ExpressibleByLiteralSyntax {
  public func makeLiteralSyntax() -> SwiftSyntax.ExprSyntax
  public typealias LiteralType = SwiftSyntax.ExprSyntax
}
extension SwiftSyntax.TokenSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public init(stringInterpolation: SwiftSyntaxBuilder.SyntaxStringInterpolation)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringInterpolation = SwiftSyntaxBuilder.SyntaxStringInterpolation
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.Trivia : Swift.ExpressibleByStringInterpolation {
  public init(stringInterpolation: Swift.String.StringInterpolation)
  public init(stringLiteral value: Swift.String)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringInterpolation = Swift.String.StringInterpolation
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
@available(*, deprecated, renamed: "SyntaxNodeString")
public typealias PartialSyntaxNodeString = SwiftSyntaxBuilder.SyntaxNodeString
public struct SyntaxNodeString : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public init(stringInterpolation: SwiftSyntaxBuilder.SyntaxStringInterpolation)
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringInterpolation = SwiftSyntaxBuilder.SyntaxStringInterpolation
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntaxBuilder.SyntaxStringInterpolation {
  public mutating func appendInterpolation(_ value: SwiftSyntaxBuilder.SyntaxNodeString)
}
public protocol HasTrailingCodeBlock {
  var body: SwiftSyntax.CodeBlockSyntax { get set }
  init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax) rethrows
}
extension SwiftSyntaxBuilder.HasTrailingCodeBlock where Self : SwiftSyntax.StmtSyntaxProtocol {
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax) throws
}
extension SwiftSyntax.CatchClauseSyntax : SwiftSyntaxBuilder.HasTrailingCodeBlock {
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax) rethrows
}
extension SwiftSyntax.DeferStmtSyntax : SwiftSyntaxBuilder.HasTrailingCodeBlock {
}
extension SwiftSyntax.DoStmtSyntax : SwiftSyntaxBuilder.HasTrailingCodeBlock {
}
extension SwiftSyntax.ForStmtSyntax : SwiftSyntaxBuilder.HasTrailingCodeBlock {
}
extension SwiftSyntax.GuardStmtSyntax : SwiftSyntaxBuilder.HasTrailingCodeBlock {
}
extension SwiftSyntax.WhileStmtSyntax : SwiftSyntaxBuilder.HasTrailingCodeBlock {
}
public protocol HasTrailingOptionalCodeBlock {
  var body: SwiftSyntax.CodeBlockSyntax? { get set }
  init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax) throws
}
extension SwiftSyntaxBuilder.HasTrailingOptionalCodeBlock where Self : SwiftSyntax.DeclSyntaxProtocol {
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax) throws
}
extension SwiftSyntax.AccessorDeclSyntax : SwiftSyntaxBuilder.HasTrailingOptionalCodeBlock {
}
extension SwiftSyntax.DeinitializerDeclSyntax : SwiftSyntaxBuilder.HasTrailingOptionalCodeBlock {
}
extension SwiftSyntax.FunctionDeclSyntax : SwiftSyntaxBuilder.HasTrailingOptionalCodeBlock {
}
extension SwiftSyntax.InitializerDeclSyntax : SwiftSyntaxBuilder.HasTrailingOptionalCodeBlock {
}
public protocol HasTrailingMemberDeclBlock {
  var memberBlock: SwiftSyntax.MemberBlockSyntax { get set }
  init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.MemberBlockItemListBuilder membersBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax) throws
}
extension SwiftSyntaxBuilder.HasTrailingMemberDeclBlock where Self : SwiftSyntax.DeclSyntaxProtocol {
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.MemberBlockItemListBuilder membersBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax) throws
}
extension SwiftSyntax.ActorDeclSyntax : SwiftSyntaxBuilder.HasTrailingMemberDeclBlock {
}
extension SwiftSyntax.ClassDeclSyntax : SwiftSyntaxBuilder.HasTrailingMemberDeclBlock {
}
extension SwiftSyntax.EnumDeclSyntax : SwiftSyntaxBuilder.HasTrailingMemberDeclBlock {
}
extension SwiftSyntax.ExtensionDeclSyntax : SwiftSyntaxBuilder.HasTrailingMemberDeclBlock {
}
extension SwiftSyntax.ProtocolDeclSyntax : SwiftSyntaxBuilder.HasTrailingMemberDeclBlock {
}
extension SwiftSyntax.StructDeclSyntax : SwiftSyntaxBuilder.HasTrailingMemberDeclBlock {
}
extension SwiftSyntax.IfExprSyntax {
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, @SwiftSyntaxBuilder.CodeBlockItemListBuilder else elseBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax? = { nil }) throws
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, elseIf: SwiftSyntax.IfExprSyntax) throws
}
extension SwiftSyntax.SwitchCaseSyntax {
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.CodeBlockItemListBuilder statementsBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax) rethrows
}
extension SwiftSyntax.SwitchExprSyntax {
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.SwitchCaseListBuilder casesBuilder: () throws -> SwiftSyntax.SwitchCaseListSyntax = { SwitchCaseListSyntax([]) }) throws
}
extension SwiftSyntax.VariableDeclSyntax {
  public init(_ header: SwiftSyntaxBuilder.SyntaxNodeString, @SwiftSyntaxBuilder.CodeBlockItemListBuilder accessor: () throws -> SwiftSyntax.CodeBlockItemListSyntax) throws
}
extension SwiftParser.SyntaxParseable {
  public typealias StringInterpolation = SwiftSyntaxBuilder.SyntaxStringInterpolation
  public init(stringInterpolation: SwiftSyntaxBuilder.SyntaxStringInterpolation)
}
extension SwiftSyntax.SyntaxProtocol {
  public init(validating node: Self) throws
}
extension SwiftSyntax.Trivia {
  public init(validating trivia: SwiftSyntax.Trivia) throws
}
extension SwiftSyntax.AccessorDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifier: SwiftSyntax.DeclModifierSyntax? = nil, unexpectedBetweenModifierAndAccessorSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, accessorSpecifier: SwiftSyntax.TokenSyntax, unexpectedBetweenAccessorSpecifierAndParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameters: SwiftSyntax.AccessorParametersSyntax? = nil, unexpectedBetweenParametersAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, effectSpecifiers: SwiftSyntax.AccessorEffectSpecifiersSyntax? = nil, unexpectedBetweenEffectSpecifiersAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax?, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ActorDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndActorKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, actorKeyword: SwiftSyntax.TokenSyntax = .keyword(.actor), unexpectedBetweenActorKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ArrayExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquare: SwiftSyntax.TokenSyntax = .leftSquareToken(), unexpectedBetweenLeftSquareAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenElementsAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquare: SwiftSyntax.TokenSyntax = .rightSquareToken(), unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.ArrayElementListBuilder elementsBuilder: () throws -> SwiftSyntax.ArrayElementListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.CatchClauseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeCatchKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, catchKeyword: SwiftSyntax.TokenSyntax = .keyword(.catch), unexpectedBetweenCatchKeywordAndCatchItems: SwiftSyntax.UnexpectedNodesSyntax? = nil, catchItems: SwiftSyntax.CatchItemListSyntax = [], unexpectedBetweenCatchItemsAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ClassDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndClassKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, classKeyword: SwiftSyntax.TokenSyntax = .keyword(.class), unexpectedBetweenClassKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ClosureCaptureClauseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquare: SwiftSyntax.TokenSyntax = .leftSquareToken(), unexpectedBetweenLeftSquareAndItems: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenItemsAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquare: SwiftSyntax.TokenSyntax = .rightSquareToken(), unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.ClosureCaptureListBuilder itemsBuilder: () throws -> SwiftSyntax.ClosureCaptureListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ClosureExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), unexpectedBetweenLeftBraceAndSignature: SwiftSyntax.UnexpectedNodesSyntax? = nil, signature: SwiftSyntax.ClosureSignatureSyntax? = nil, unexpectedBetweenSignatureAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenStatementsAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder statementsBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.CodeBlockSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), unexpectedBetweenLeftBraceAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenStatementsAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder statementsBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.DeferStmtSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeDeferKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, deferKeyword: SwiftSyntax.TokenSyntax = .keyword(.defer), unexpectedBetweenDeferKeywordAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.DeinitializerDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndDeinitKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, deinitKeyword: SwiftSyntax.TokenSyntax = .keyword(.deinit), unexpectedBetweenDeinitKeywordAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, effectSpecifiers: SwiftSyntax.DeinitializerEffectSpecifiersSyntax? = nil, unexpectedBetweenEffectSpecifiersAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax?, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.DoStmtSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeDoKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, doKeyword: SwiftSyntax.TokenSyntax = .keyword(.do), unexpectedBetweenDoKeywordAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenBodyAndCatchClauses: SwiftSyntax.UnexpectedNodesSyntax? = nil, catchClauses: SwiftSyntax.CatchClauseListSyntax = [], unexpectedAfterCatchClauses: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.EnumCaseDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndCaseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, caseKeyword: SwiftSyntax.TokenSyntax = .keyword(.case), unexpectedBetweenCaseKeywordAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.EnumCaseElementListBuilder elementsBuilder: () throws -> SwiftSyntax.EnumCaseElementListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.EnumDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndEnumKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, enumKeyword: SwiftSyntax.TokenSyntax = .keyword(.enum), unexpectedBetweenEnumKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ExpressionSegmentSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeBackslash: SwiftSyntax.UnexpectedNodesSyntax? = nil, backslash: SwiftSyntax.TokenSyntax = .backslashToken(), unexpectedBetweenBackslashAndPounds: SwiftSyntax.UnexpectedNodesSyntax? = nil, pounds: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenPoundsAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), unexpectedBetweenLeftParenAndExpressions: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenExpressionsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder expressionsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ExtensionDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndExtensionKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, extensionKeyword: SwiftSyntax.TokenSyntax = .keyword(.extension), unexpectedBetweenExtensionKeywordAndExtendedType: SwiftSyntax.UnexpectedNodesSyntax? = nil, extendedType: any SwiftSyntax.TypeSyntaxProtocol, unexpectedBetweenExtendedTypeAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ForStmtSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeForKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, forKeyword: SwiftSyntax.TokenSyntax = .keyword(.for), unexpectedBetweenForKeywordAndTryKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, tryKeyword: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenTryKeywordAndAwaitKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, awaitKeyword: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenAwaitKeywordAndCaseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, caseKeyword: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenCaseKeywordAndPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, pattern: any SwiftSyntax.PatternSyntaxProtocol, unexpectedBetweenPatternAndTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? = nil, typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? = nil, unexpectedBetweenTypeAnnotationAndInKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, inKeyword: SwiftSyntax.TokenSyntax = .keyword(.in), unexpectedBetweenInKeywordAndSequence: SwiftSyntax.UnexpectedNodesSyntax? = nil, sequence: any SwiftSyntax.ExprSyntaxProtocol, unexpectedBetweenSequenceAndWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, whereClause: SwiftSyntax.WhereClauseSyntax? = nil, unexpectedBetweenWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.FunctionCallExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeCalledExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, calledExpression: any SwiftSyntax.ExprSyntaxProtocol, unexpectedBetweenCalledExpressionAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.FunctionDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndFuncKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, funcKeyword: SwiftSyntax.TokenSyntax = .keyword(.func), unexpectedBetweenFuncKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndSignature: SwiftSyntax.UnexpectedNodesSyntax? = nil, signature: SwiftSyntax.FunctionSignatureSyntax, unexpectedBetweenSignatureAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax?, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.FunctionParameterClauseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), unexpectedBetweenLeftParenAndParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenParametersAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.FunctionParameterListBuilder parametersBuilder: () throws -> SwiftSyntax.FunctionParameterListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.GenericArgumentClauseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftAngle: SwiftSyntax.TokenSyntax = .leftAngleToken(), unexpectedBetweenLeftAngleAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentsAndRightAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightAngle: SwiftSyntax.TokenSyntax = .rightAngleToken(), unexpectedAfterRightAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.GenericArgumentListBuilder argumentsBuilder: () throws -> SwiftSyntax.GenericArgumentListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.GenericParameterClauseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftAngle: SwiftSyntax.TokenSyntax = .leftAngleToken(), unexpectedBetweenLeftAngleAndParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenParametersAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndRightAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightAngle: SwiftSyntax.TokenSyntax = .rightAngleToken(), unexpectedAfterRightAngle: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.GenericParameterListBuilder parametersBuilder: () throws -> SwiftSyntax.GenericParameterListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.GenericWhereClauseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeWhereKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, whereKeyword: SwiftSyntax.TokenSyntax = .keyword(.where), unexpectedBetweenWhereKeywordAndRequirements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterRequirements: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.GenericRequirementListBuilder requirementsBuilder: () throws -> SwiftSyntax.GenericRequirementListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.GuardStmtSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeGuardKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, guardKeyword: SwiftSyntax.TokenSyntax = .keyword(.guard), unexpectedBetweenGuardKeywordAndConditions: SwiftSyntax.UnexpectedNodesSyntax? = nil, conditions: SwiftSyntax.ConditionElementListSyntax, unexpectedBetweenConditionsAndElseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, elseKeyword: SwiftSyntax.TokenSyntax = .keyword(.else), unexpectedBetweenElseKeywordAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.IfExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeIfKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, ifKeyword: SwiftSyntax.TokenSyntax = .keyword(.if), unexpectedBetweenIfKeywordAndConditions: SwiftSyntax.UnexpectedNodesSyntax? = nil, conditions: SwiftSyntax.ConditionElementListSyntax, unexpectedBetweenConditionsAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenBodyAndElseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, elseKeyword: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenElseKeywordAndElseBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, elseBody: SwiftSyntax.IfExprSyntax.ElseBody? = nil, unexpectedAfterElseBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.InheritanceClauseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), unexpectedBetweenColonAndInheritedTypes: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterInheritedTypes: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.InheritedTypeListBuilder inheritedTypesBuilder: () throws -> SwiftSyntax.InheritedTypeListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.InitializerDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndInitKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, initKeyword: SwiftSyntax.TokenSyntax = .keyword(.`init`), unexpectedBetweenInitKeywordAndOptionalMark: SwiftSyntax.UnexpectedNodesSyntax? = nil, optionalMark: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenOptionalMarkAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndSignature: SwiftSyntax.UnexpectedNodesSyntax? = nil, signature: SwiftSyntax.FunctionSignatureSyntax, unexpectedBetweenSignatureAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax?, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.KeyPathSubscriptComponentSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquare: SwiftSyntax.TokenSyntax = .leftSquareToken(), unexpectedBetweenLeftSquareAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentsAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquare: SwiftSyntax.TokenSyntax = .rightSquareToken(), unexpectedAfterRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.MacroExpansionDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndPound: SwiftSyntax.UnexpectedNodesSyntax? = nil, pound: SwiftSyntax.TokenSyntax = .poundToken(), unexpectedBetweenPoundAndMacroName: SwiftSyntax.UnexpectedNodesSyntax? = nil, macroName: SwiftSyntax.TokenSyntax, unexpectedBetweenMacroNameAndGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? = nil, unexpectedBetweenGenericArgumentClauseAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.MacroExpansionExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforePound: SwiftSyntax.UnexpectedNodesSyntax? = nil, pound: SwiftSyntax.TokenSyntax = .poundToken(), unexpectedBetweenPoundAndMacroName: SwiftSyntax.UnexpectedNodesSyntax? = nil, macroName: SwiftSyntax.TokenSyntax, unexpectedBetweenMacroNameAndGenericArgumentClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericArgumentClause: SwiftSyntax.GenericArgumentClauseSyntax? = nil, unexpectedBetweenGenericArgumentClauseAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenLeftParenAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.MemberBlockSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), unexpectedBetweenLeftBraceAndMembers: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenMembersAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder membersBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ProtocolDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndProtocolKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, protocolKeyword: SwiftSyntax.TokenSyntax = .keyword(.protocol), unexpectedBetweenProtocolKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, unexpectedBetweenNameAndPrimaryAssociatedTypeClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, primaryAssociatedTypeClause: SwiftSyntax.PrimaryAssociatedTypeClauseSyntax? = nil, unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.RepeatStmtSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeRepeatKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, repeatKeyword: SwiftSyntax.TokenSyntax = .keyword(.repeat), unexpectedBetweenRepeatKeywordAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenBodyAndWhileKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, whileKeyword: SwiftSyntax.TokenSyntax = .keyword(.while), unexpectedBetweenWhileKeywordAndCondition: SwiftSyntax.UnexpectedNodesSyntax? = nil, condition: any SwiftSyntax.ExprSyntaxProtocol, unexpectedAfterCondition: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SequenceExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.ExprListBuilder elementsBuilder: () throws -> SwiftSyntax.ExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SourceFileSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeShebang: SwiftSyntax.UnexpectedNodesSyntax? = nil, shebang: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenShebangAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenStatementsAndEndOfFileToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, endOfFileToken: SwiftSyntax.TokenSyntax = .endOfFileToken(), unexpectedAfterEndOfFileToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder statementsBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.StructDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndStructKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, structKeyword: SwiftSyntax.TokenSyntax = .keyword(.struct), unexpectedBetweenStructKeywordAndName: SwiftSyntax.UnexpectedNodesSyntax? = nil, name: SwiftSyntax.TokenSyntax, unexpectedBetweenNameAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SubscriptCallExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeCalledExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, calledExpression: any SwiftSyntax.ExprSyntaxProtocol, unexpectedBetweenCalledExpressionAndLeftSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquare: SwiftSyntax.TokenSyntax = .leftSquareToken(), unexpectedBetweenLeftSquareAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentsAndRightSquare: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquare: SwiftSyntax.TokenSyntax = .rightSquareToken(), unexpectedBetweenRightSquareAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SwitchCaseLabelSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeCaseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, caseKeyword: SwiftSyntax.TokenSyntax = .keyword(.case), unexpectedBetweenCaseKeywordAndCaseItems: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenCaseItemsAndColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), unexpectedAfterColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.SwitchCaseItemListBuilder caseItemsBuilder: () throws -> SwiftSyntax.SwitchCaseItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SwitchCaseSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttribute: SwiftSyntax.UnexpectedNodesSyntax? = nil, attribute: SwiftSyntax.AttributeSyntax? = nil, unexpectedBetweenAttributeAndLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.SwitchCaseSyntax.Label, unexpectedBetweenLabelAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder statementsBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SwitchExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeSwitchKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, switchKeyword: SwiftSyntax.TokenSyntax = .keyword(.switch), unexpectedBetweenSwitchKeywordAndSubject: SwiftSyntax.UnexpectedNodesSyntax? = nil, subject: any SwiftSyntax.ExprSyntaxProtocol, unexpectedBetweenSubjectAndLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), unexpectedBetweenLeftBraceAndCases: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenCasesAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.SwitchCaseListBuilder casesBuilder: () throws -> SwiftSyntax.SwitchCaseListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.TupleExprSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), unexpectedBetweenLeftParenAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenElementsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder elementsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.TuplePatternSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), unexpectedBetweenLeftParenAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenElementsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.TuplePatternElementListBuilder elementsBuilder: () throws -> SwiftSyntax.TuplePatternElementListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.VariableDeclSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndBindingSpecifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, bindingSpecifier: SwiftSyntax.TokenSyntax, unexpectedBetweenBindingSpecifierAndBindings: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBindings: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.PatternBindingListBuilder bindingsBuilder: () throws -> SwiftSyntax.PatternBindingListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.WhileStmtSyntax {
  public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeWhileKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, whileKeyword: SwiftSyntax.TokenSyntax = .keyword(.while), unexpectedBetweenWhileKeywordAndConditions: SwiftSyntax.UnexpectedNodesSyntax? = nil, conditions: SwiftSyntax.ConditionElementListSyntax, unexpectedBetweenConditionsAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.AccessorDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with accessorSpecifier, parameters argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifier: SwiftSyntax.DeclModifierSyntax? = nil, unexpectedBetweenModifierAndAccessorKind: SwiftSyntax.UnexpectedNodesSyntax? = nil, accessorKind: SwiftSyntax.TokenSyntax, unexpectedBetweenAccessorKindAndParameter: SwiftSyntax.UnexpectedNodesSyntax? = nil, parameter: SwiftSyntax.AccessorParametersSyntax? = nil, unexpectedBetweenParameterAndEffectSpecifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, effectSpecifiers: SwiftSyntax.AccessorEffectSpecifiersSyntax? = nil, unexpectedBetweenEffectSpecifiersAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax?, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ActorDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with name argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndActorKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, actorKeyword: SwiftSyntax.TokenSyntax = .keyword(.actor), unexpectedBetweenActorKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ArrayExprSyntax {
  @available(*, deprecated, message: "Use an initializer with leftSquare, rightSquare argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftSquareBracket: SwiftSyntax.TokenSyntax = .leftSquareToken(), unexpectedBetweenLeftSquareBracketAndElements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenElementsAndRightSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightSquareBracket: SwiftSyntax.TokenSyntax = .rightSquareToken(), unexpectedAfterRightSquareBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.ArrayElementListBuilder elementsBuilder: () throws -> SwiftSyntax.ArrayElementListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ClassDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with name argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndClassKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, classKeyword: SwiftSyntax.TokenSyntax = .keyword(.class), unexpectedBetweenClassKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.EnumDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with name, genericParameterClause argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndEnumKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, enumKeyword: SwiftSyntax.TokenSyntax = .keyword(.enum), unexpectedBetweenEnumKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, unexpectedBetweenIdentifierAndGenericParameters: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameters: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParametersAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ExpressionSegmentSyntax {
  @available(*, deprecated, message: "Use an initializer with pounds argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeBackslash: SwiftSyntax.UnexpectedNodesSyntax? = nil, backslash: SwiftSyntax.TokenSyntax = .backslashToken(), unexpectedBetweenBackslashAndDelimiter: SwiftSyntax.UnexpectedNodesSyntax? = nil, delimiter: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenDelimiterAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), unexpectedBetweenLeftParenAndExpressions: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenExpressionsAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder expressionsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ForStmtSyntax {
  @available(*, deprecated, message: "Use an initializer with sequence argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeForKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, forKeyword: SwiftSyntax.TokenSyntax = .keyword(.for), unexpectedBetweenForKeywordAndTryKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, tryKeyword: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenTryKeywordAndAwaitKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, awaitKeyword: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenAwaitKeywordAndCaseKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, caseKeyword: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenCaseKeywordAndPattern: SwiftSyntax.UnexpectedNodesSyntax? = nil, pattern: any SwiftSyntax.PatternSyntaxProtocol, unexpectedBetweenPatternAndTypeAnnotation: SwiftSyntax.UnexpectedNodesSyntax? = nil, typeAnnotation: SwiftSyntax.TypeAnnotationSyntax? = nil, unexpectedBetweenTypeAnnotationAndInKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, inKeyword: SwiftSyntax.TokenSyntax = .keyword(.in), unexpectedBetweenInKeywordAndSequenceExpr: SwiftSyntax.UnexpectedNodesSyntax? = nil, sequenceExpr: any SwiftSyntax.ExprSyntaxProtocol, unexpectedBetweenSequenceExprAndWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, whereClause: SwiftSyntax.WhereClauseSyntax? = nil, unexpectedBetweenWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.FunctionCallExprSyntax {
  @available(*, deprecated, message: "Use an initializer with arguments argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeCalledExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, calledExpression: any SwiftSyntax.ExprSyntaxProtocol, unexpectedBetweenCalledExpressionAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenLeftParenAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentListBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.FunctionDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with name argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndFuncKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, funcKeyword: SwiftSyntax.TokenSyntax = .keyword(.func), unexpectedBetweenFuncKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndSignature: SwiftSyntax.UnexpectedNodesSyntax? = nil, signature: SwiftSyntax.FunctionSignatureSyntax, unexpectedBetweenSignatureAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBody: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder bodyBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax?, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.FunctionParameterClauseSyntax {
  @available(*, deprecated, message: "Use an initializer with parameters argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), unexpectedBetweenLeftParenAndParameterList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenParameterListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.FunctionParameterListBuilder parameterListBuilder: () throws -> SwiftSyntax.FunctionParameterListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.GenericArgumentClauseSyntax {
  @available(*, deprecated, message: "Use an initializer with leftAngle, rightAngle argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftAngleBracket: SwiftSyntax.TokenSyntax = .leftAngleToken(), unexpectedBetweenLeftAngleBracketAndArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentsAndRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightAngleBracket: SwiftSyntax.TokenSyntax = .rightAngleToken(), unexpectedAfterRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.GenericArgumentListBuilder argumentsBuilder: () throws -> SwiftSyntax.GenericArgumentListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.GenericParameterClauseSyntax {
  @available(*, deprecated, message: "Use an initializer with leftAngle, parameters, rightAngle argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftAngleBracket: SwiftSyntax.TokenSyntax = .leftAngleToken(), unexpectedBetweenLeftAngleBracketAndGenericParameterList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenGenericParameterListAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightAngleBracket: SwiftSyntax.TokenSyntax = .rightAngleToken(), unexpectedAfterRightAngleBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.GenericParameterListBuilder genericParameterListBuilder: () throws -> SwiftSyntax.GenericParameterListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.GenericWhereClauseSyntax {
  @available(*, deprecated, message: "Use an initializer with requirements argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeWhereKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, whereKeyword: SwiftSyntax.TokenSyntax = .keyword(.where), unexpectedBetweenWhereKeywordAndRequirementList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterRequirementList: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.GenericRequirementListBuilder requirementListBuilder: () throws -> SwiftSyntax.GenericRequirementListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.InheritanceClauseSyntax {
  @available(*, deprecated, message: "Use an initializer with inheritedTypes argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeColon: SwiftSyntax.UnexpectedNodesSyntax? = nil, colon: SwiftSyntax.TokenSyntax = .colonToken(), unexpectedBetweenColonAndInheritedTypeCollection: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterInheritedTypeCollection: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.InheritedTypeListBuilder inheritedTypeCollectionBuilder: () throws -> SwiftSyntax.InheritedTypeListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.KeyPathSubscriptComponentSyntax {
  @available(*, deprecated, message: "Use an initializer with leftSquare, arguments, rightSquare argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBracket: SwiftSyntax.TokenSyntax = .leftSquareToken(), unexpectedBetweenLeftBracketAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentListAndRightBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBracket: SwiftSyntax.TokenSyntax = .rightSquareToken(), unexpectedAfterRightBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentListBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.MacroExpansionDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with pound, macroName, genericArgumentClause, arguments argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndPoundToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, poundToken: SwiftSyntax.TokenSyntax = .poundToken(), unexpectedBetweenPoundTokenAndMacro: SwiftSyntax.UnexpectedNodesSyntax? = nil, macro: SwiftSyntax.TokenSyntax, unexpectedBetweenMacroAndGenericArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericArguments: SwiftSyntax.GenericArgumentClauseSyntax? = nil, unexpectedBetweenGenericArgumentsAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenLeftParenAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentListBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.MacroExpansionExprSyntax {
  @available(*, deprecated, message: "Use an initializer with pound, macroName, genericArgumentClause, arguments argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforePoundToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, poundToken: SwiftSyntax.TokenSyntax = .poundToken(), unexpectedBetweenPoundTokenAndMacro: SwiftSyntax.UnexpectedNodesSyntax? = nil, macro: SwiftSyntax.TokenSyntax, unexpectedBetweenMacroAndGenericArguments: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericArguments: SwiftSyntax.GenericArgumentClauseSyntax? = nil, unexpectedBetweenGenericArgumentsAndLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenLeftParenAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenRightParenAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentListBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.ProtocolDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with name argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndProtocolKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, protocolKeyword: SwiftSyntax.TokenSyntax = .keyword(.protocol), unexpectedBetweenProtocolKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, unexpectedBetweenIdentifierAndPrimaryAssociatedTypeClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, primaryAssociatedTypeClause: SwiftSyntax.PrimaryAssociatedTypeClauseSyntax? = nil, unexpectedBetweenPrimaryAssociatedTypeClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SourceFileSyntax {
  @available(*, deprecated, message: "Use an initializer with endOfFileToken argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeShebang: SwiftSyntax.UnexpectedNodesSyntax? = nil, shebang: SwiftSyntax.TokenSyntax? = nil, unexpectedBetweenShebangAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenStatementsAndEofToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, eofToken: SwiftSyntax.TokenSyntax = .endOfFileToken(), unexpectedAfterEofToken: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder statementsBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.StructDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with name argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndStructKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, structKeyword: SwiftSyntax.TokenSyntax = .keyword(.struct), unexpectedBetweenStructKeywordAndIdentifier: SwiftSyntax.UnexpectedNodesSyntax? = nil, identifier: SwiftSyntax.TokenSyntax, unexpectedBetweenIdentifierAndGenericParameterClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericParameterClause: SwiftSyntax.GenericParameterClauseSyntax? = nil, unexpectedBetweenGenericParameterClauseAndInheritanceClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, inheritanceClause: SwiftSyntax.InheritanceClauseSyntax? = nil, unexpectedBetweenInheritanceClauseAndGenericWhereClause: SwiftSyntax.UnexpectedNodesSyntax? = nil, genericWhereClause: SwiftSyntax.GenericWhereClauseSyntax? = nil, unexpectedBetweenGenericWhereClauseAndMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterMemberBlock: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.MemberBlockItemListBuilder memberBlockBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SubscriptCallExprSyntax {
  @available(*, deprecated, message: "Use an initializer with leftSquare, arguments, rightSquare argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeCalledExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, calledExpression: any SwiftSyntax.ExprSyntaxProtocol, unexpectedBetweenCalledExpressionAndLeftBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBracket: SwiftSyntax.TokenSyntax = .leftSquareToken(), unexpectedBetweenLeftBracketAndArgumentList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenArgumentListAndRightBracket: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBracket: SwiftSyntax.TokenSyntax = .rightSquareToken(), unexpectedBetweenRightBracketAndTrailingClosure: SwiftSyntax.UnexpectedNodesSyntax? = nil, trailingClosure: SwiftSyntax.ClosureExprSyntax? = nil, unexpectedBetweenTrailingClosureAndAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, additionalTrailingClosures: SwiftSyntax.MultipleTrailingClosureElementListSyntax = [], unexpectedAfterAdditionalTrailingClosures: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder argumentListBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SwitchCaseSyntax {
  @available(*, deprecated, message: "Use an initializer with attribute argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeUnknownAttr: SwiftSyntax.UnexpectedNodesSyntax? = nil, unknownAttr: SwiftSyntax.AttributeSyntax? = nil, unexpectedBetweenUnknownAttrAndLabel: SwiftSyntax.UnexpectedNodesSyntax? = nil, label: SwiftSyntax.SwitchCaseSyntax.Label, unexpectedBetweenLabelAndStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterStatements: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.CodeBlockItemListBuilder statementsBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.SwitchExprSyntax {
  @available(*, deprecated, message: "Use an initializer with subject argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeSwitchKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, switchKeyword: SwiftSyntax.TokenSyntax = .keyword(.switch), unexpectedBetweenSwitchKeywordAndExpression: SwiftSyntax.UnexpectedNodesSyntax? = nil, expression: any SwiftSyntax.ExprSyntaxProtocol, unexpectedBetweenExpressionAndLeftBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftBrace: SwiftSyntax.TokenSyntax = .leftBraceToken(), unexpectedBetweenLeftBraceAndCases: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenCasesAndRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightBrace: SwiftSyntax.TokenSyntax = .rightBraceToken(), unexpectedAfterRightBrace: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.SwitchCaseListBuilder casesBuilder: () throws -> SwiftSyntax.SwitchCaseListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.TupleExprSyntax {
  @available(*, deprecated, message: "Use an initializer with elements argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeLeftParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, leftParen: SwiftSyntax.TokenSyntax = .leftParenToken(), unexpectedBetweenLeftParenAndElementList: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedBetweenElementListAndRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, rightParen: SwiftSyntax.TokenSyntax = .rightParenToken(), unexpectedAfterRightParen: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.LabeledExprListBuilder elementListBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
extension SwiftSyntax.VariableDeclSyntax {
  @available(*, deprecated, message: "Use an initializer with bindingSpecifier argument(s).")
  @_disfavoredOverload public init(leadingTrivia: SwiftSyntax.Trivia? = nil, unexpectedBeforeAttributes: SwiftSyntax.UnexpectedNodesSyntax? = nil, attributes: SwiftSyntax.AttributeListSyntax = [], unexpectedBetweenAttributesAndModifiers: SwiftSyntax.UnexpectedNodesSyntax? = nil, modifiers: SwiftSyntax.DeclModifierListSyntax = [], unexpectedBetweenModifiersAndBindingKeyword: SwiftSyntax.UnexpectedNodesSyntax? = nil, bindingKeyword: SwiftSyntax.TokenSyntax, unexpectedBetweenBindingKeywordAndBindings: SwiftSyntax.UnexpectedNodesSyntax? = nil, unexpectedAfterBindings: SwiftSyntax.UnexpectedNodesSyntax? = nil, @SwiftSyntaxBuilder.PatternBindingListBuilder bindingsBuilder: () throws -> SwiftSyntax.PatternBindingListSyntax, trailingTrivia: SwiftSyntax.Trivia? = nil) rethrows
}
@_functionBuilder public struct AccessorDeclListBuilder {
  public typealias Expression = SwiftSyntax.AccessorDeclSyntax
  public typealias Component = [SwiftSyntaxBuilder.AccessorDeclListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.AccessorDeclListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.AccessorDeclListBuilder.Component...) -> SwiftSyntaxBuilder.AccessorDeclListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.AccessorDeclListBuilder.Expression) -> SwiftSyntaxBuilder.AccessorDeclListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.AccessorDeclListBuilder.FinalResult) -> SwiftSyntaxBuilder.AccessorDeclListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.AccessorDeclListBuilder.Component?) -> SwiftSyntaxBuilder.AccessorDeclListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.AccessorDeclListBuilder.Component) -> SwiftSyntaxBuilder.AccessorDeclListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.AccessorDeclListBuilder.Component) -> SwiftSyntaxBuilder.AccessorDeclListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.AccessorDeclListBuilder.Component]) -> SwiftSyntaxBuilder.AccessorDeclListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.AccessorDeclListBuilder.Component) -> SwiftSyntaxBuilder.AccessorDeclListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.AccessorDeclListBuilder.Component) -> SwiftSyntaxBuilder.AccessorDeclListBuilder.FinalResult
}
extension SwiftSyntax.AccessorDeclListSyntax {
  public init(@SwiftSyntaxBuilder.AccessorDeclListBuilder itemsBuilder: () throws -> SwiftSyntax.AccessorDeclListSyntax) rethrows
}
@_functionBuilder public struct ArrayElementListBuilder {
  public typealias Expression = SwiftSyntax.ArrayElementSyntax
  public typealias Component = [SwiftSyntaxBuilder.ArrayElementListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.ArrayElementListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.ArrayElementListBuilder.Component...) -> SwiftSyntaxBuilder.ArrayElementListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.ArrayElementListBuilder.Expression) -> SwiftSyntaxBuilder.ArrayElementListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.ArrayElementListBuilder.FinalResult) -> SwiftSyntaxBuilder.ArrayElementListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.ArrayElementListBuilder.Component?) -> SwiftSyntaxBuilder.ArrayElementListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.ArrayElementListBuilder.Component) -> SwiftSyntaxBuilder.ArrayElementListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.ArrayElementListBuilder.Component) -> SwiftSyntaxBuilder.ArrayElementListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.ArrayElementListBuilder.Component]) -> SwiftSyntaxBuilder.ArrayElementListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.ArrayElementListBuilder.Component) -> SwiftSyntaxBuilder.ArrayElementListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.ArrayElementListBuilder.Component) -> SwiftSyntaxBuilder.ArrayElementListBuilder.FinalResult
}
extension SwiftSyntax.ArrayElementListSyntax {
  public init(@SwiftSyntaxBuilder.ArrayElementListBuilder itemsBuilder: () throws -> SwiftSyntax.ArrayElementListSyntax) rethrows
}
@_functionBuilder public struct AttributeListBuilder {
  public typealias Expression = SwiftSyntax.AttributeListSyntax.Element
  public typealias Component = [SwiftSyntaxBuilder.AttributeListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.AttributeListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.AttributeListBuilder.Component...) -> SwiftSyntaxBuilder.AttributeListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.AttributeListBuilder.Expression) -> SwiftSyntaxBuilder.AttributeListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.AttributeSyntax) -> SwiftSyntaxBuilder.AttributeListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.IfConfigDeclSyntax) -> SwiftSyntaxBuilder.AttributeListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.AttributeListBuilder.FinalResult) -> SwiftSyntaxBuilder.AttributeListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.AttributeListBuilder.Component?) -> SwiftSyntaxBuilder.AttributeListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.AttributeListBuilder.Component) -> SwiftSyntaxBuilder.AttributeListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.AttributeListBuilder.Component) -> SwiftSyntaxBuilder.AttributeListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.AttributeListBuilder.Component]) -> SwiftSyntaxBuilder.AttributeListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.AttributeListBuilder.Component) -> SwiftSyntaxBuilder.AttributeListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.AttributeListBuilder.Component) -> SwiftSyntaxBuilder.AttributeListBuilder.FinalResult
}
extension SwiftSyntax.AttributeListSyntax {
  public init(@SwiftSyntaxBuilder.AttributeListBuilder itemsBuilder: () throws -> SwiftSyntax.AttributeListSyntax) rethrows
}
@_functionBuilder public struct AvailabilityArgumentListBuilder {
  public typealias Expression = SwiftSyntax.AvailabilityArgumentSyntax
  public typealias Component = [SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.AvailabilityArgumentListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.Component...) -> SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.Expression) -> SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.FinalResult) -> SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.Component?) -> SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.Component) -> SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.Component) -> SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.Component]) -> SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.Component) -> SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.Component) -> SwiftSyntaxBuilder.AvailabilityArgumentListBuilder.FinalResult
}
extension SwiftSyntax.AvailabilityArgumentListSyntax {
  public init(@SwiftSyntaxBuilder.AvailabilityArgumentListBuilder itemsBuilder: () throws -> SwiftSyntax.AvailabilityArgumentListSyntax) rethrows
}
@_functionBuilder public struct CatchClauseListBuilder {
  public typealias Expression = SwiftSyntax.CatchClauseSyntax
  public typealias Component = [SwiftSyntaxBuilder.CatchClauseListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.CatchClauseListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.CatchClauseListBuilder.Component...) -> SwiftSyntaxBuilder.CatchClauseListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.CatchClauseListBuilder.Expression) -> SwiftSyntaxBuilder.CatchClauseListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.CatchClauseListBuilder.FinalResult) -> SwiftSyntaxBuilder.CatchClauseListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.CatchClauseListBuilder.Component?) -> SwiftSyntaxBuilder.CatchClauseListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.CatchClauseListBuilder.Component) -> SwiftSyntaxBuilder.CatchClauseListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.CatchClauseListBuilder.Component) -> SwiftSyntaxBuilder.CatchClauseListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.CatchClauseListBuilder.Component]) -> SwiftSyntaxBuilder.CatchClauseListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.CatchClauseListBuilder.Component) -> SwiftSyntaxBuilder.CatchClauseListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.CatchClauseListBuilder.Component) -> SwiftSyntaxBuilder.CatchClauseListBuilder.FinalResult
}
extension SwiftSyntax.CatchClauseListSyntax {
  public init(@SwiftSyntaxBuilder.CatchClauseListBuilder itemsBuilder: () throws -> SwiftSyntax.CatchClauseListSyntax) rethrows
}
@_functionBuilder public struct CatchItemListBuilder {
  public typealias Expression = SwiftSyntax.CatchItemSyntax
  public typealias Component = [SwiftSyntaxBuilder.CatchItemListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.CatchItemListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.CatchItemListBuilder.Component...) -> SwiftSyntaxBuilder.CatchItemListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.CatchItemListBuilder.Expression) -> SwiftSyntaxBuilder.CatchItemListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.CatchItemListBuilder.FinalResult) -> SwiftSyntaxBuilder.CatchItemListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.CatchItemListBuilder.Component?) -> SwiftSyntaxBuilder.CatchItemListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.CatchItemListBuilder.Component) -> SwiftSyntaxBuilder.CatchItemListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.CatchItemListBuilder.Component) -> SwiftSyntaxBuilder.CatchItemListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.CatchItemListBuilder.Component]) -> SwiftSyntaxBuilder.CatchItemListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.CatchItemListBuilder.Component) -> SwiftSyntaxBuilder.CatchItemListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.CatchItemListBuilder.Component) -> SwiftSyntaxBuilder.CatchItemListBuilder.FinalResult
}
extension SwiftSyntax.CatchItemListSyntax {
  public init(@SwiftSyntaxBuilder.CatchItemListBuilder itemsBuilder: () throws -> SwiftSyntax.CatchItemListSyntax) rethrows
}
@_functionBuilder public struct ClosureCaptureListBuilder {
  public typealias Expression = SwiftSyntax.ClosureCaptureSyntax
  public typealias Component = [SwiftSyntaxBuilder.ClosureCaptureListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.ClosureCaptureListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.ClosureCaptureListBuilder.Component...) -> SwiftSyntaxBuilder.ClosureCaptureListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.ClosureCaptureListBuilder.Expression) -> SwiftSyntaxBuilder.ClosureCaptureListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.ClosureCaptureListBuilder.FinalResult) -> SwiftSyntaxBuilder.ClosureCaptureListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.ClosureCaptureListBuilder.Component?) -> SwiftSyntaxBuilder.ClosureCaptureListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.ClosureCaptureListBuilder.Component) -> SwiftSyntaxBuilder.ClosureCaptureListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.ClosureCaptureListBuilder.Component) -> SwiftSyntaxBuilder.ClosureCaptureListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.ClosureCaptureListBuilder.Component]) -> SwiftSyntaxBuilder.ClosureCaptureListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.ClosureCaptureListBuilder.Component) -> SwiftSyntaxBuilder.ClosureCaptureListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.ClosureCaptureListBuilder.Component) -> SwiftSyntaxBuilder.ClosureCaptureListBuilder.FinalResult
}
extension SwiftSyntax.ClosureCaptureListSyntax {
  public init(@SwiftSyntaxBuilder.ClosureCaptureListBuilder itemsBuilder: () throws -> SwiftSyntax.ClosureCaptureListSyntax) rethrows
}
@_functionBuilder public struct ClosureParameterListBuilder {
  public typealias Expression = SwiftSyntax.ClosureParameterSyntax
  public typealias Component = [SwiftSyntaxBuilder.ClosureParameterListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.ClosureParameterListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.ClosureParameterListBuilder.Component...) -> SwiftSyntaxBuilder.ClosureParameterListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.ClosureParameterListBuilder.Expression) -> SwiftSyntaxBuilder.ClosureParameterListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.ClosureParameterListBuilder.FinalResult) -> SwiftSyntaxBuilder.ClosureParameterListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.ClosureParameterListBuilder.Component?) -> SwiftSyntaxBuilder.ClosureParameterListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.ClosureParameterListBuilder.Component) -> SwiftSyntaxBuilder.ClosureParameterListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.ClosureParameterListBuilder.Component) -> SwiftSyntaxBuilder.ClosureParameterListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.ClosureParameterListBuilder.Component]) -> SwiftSyntaxBuilder.ClosureParameterListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.ClosureParameterListBuilder.Component) -> SwiftSyntaxBuilder.ClosureParameterListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.ClosureParameterListBuilder.Component) -> SwiftSyntaxBuilder.ClosureParameterListBuilder.FinalResult
}
extension SwiftSyntax.ClosureParameterListSyntax {
  public init(@SwiftSyntaxBuilder.ClosureParameterListBuilder itemsBuilder: () throws -> SwiftSyntax.ClosureParameterListSyntax) rethrows
}
@_functionBuilder public struct ClosureShorthandParameterListBuilder {
  public typealias Expression = SwiftSyntax.ClosureShorthandParameterSyntax
  public typealias Component = [SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.ClosureShorthandParameterListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.Component...) -> SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.Expression) -> SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.FinalResult) -> SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.Component?) -> SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.Component) -> SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.Component) -> SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.Component]) -> SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.Component) -> SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.Component) -> SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder.FinalResult
}
extension SwiftSyntax.ClosureShorthandParameterListSyntax {
  public init(@SwiftSyntaxBuilder.ClosureShorthandParameterListBuilder itemsBuilder: () throws -> SwiftSyntax.ClosureShorthandParameterListSyntax) rethrows
}
@_functionBuilder public struct CodeBlockItemListBuilder {
  public typealias Expression = SwiftSyntax.CodeBlockItemSyntax
  public typealias Component = [SwiftSyntaxBuilder.CodeBlockItemListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.CodeBlockItemListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component...) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.CodeBlockItemListBuilder.Expression) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.CodeBlockItemListBuilder.FinalResult) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component?) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component]) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.CodeBlockItemListBuilder.Component) -> SwiftSyntaxBuilder.CodeBlockItemListBuilder.FinalResult
}
extension SwiftSyntax.CodeBlockItemListSyntax {
  public init(@SwiftSyntaxBuilder.CodeBlockItemListBuilder itemsBuilder: () throws -> SwiftSyntax.CodeBlockItemListSyntax) rethrows
}
@_functionBuilder public struct CompositionTypeElementListBuilder {
  public typealias Expression = SwiftSyntax.CompositionTypeElementSyntax
  public typealias Component = [SwiftSyntaxBuilder.CompositionTypeElementListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.CompositionTypeElementListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.CompositionTypeElementListBuilder.Component...) -> SwiftSyntaxBuilder.CompositionTypeElementListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.CompositionTypeElementListBuilder.Expression) -> SwiftSyntaxBuilder.CompositionTypeElementListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.CompositionTypeElementListBuilder.FinalResult) -> SwiftSyntaxBuilder.CompositionTypeElementListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.CompositionTypeElementListBuilder.Component?) -> SwiftSyntaxBuilder.CompositionTypeElementListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.CompositionTypeElementListBuilder.Component) -> SwiftSyntaxBuilder.CompositionTypeElementListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.CompositionTypeElementListBuilder.Component) -> SwiftSyntaxBuilder.CompositionTypeElementListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.CompositionTypeElementListBuilder.Component]) -> SwiftSyntaxBuilder.CompositionTypeElementListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.CompositionTypeElementListBuilder.Component) -> SwiftSyntaxBuilder.CompositionTypeElementListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.CompositionTypeElementListBuilder.Component) -> SwiftSyntaxBuilder.CompositionTypeElementListBuilder.FinalResult
}
extension SwiftSyntax.CompositionTypeElementListSyntax {
  public init(@SwiftSyntaxBuilder.CompositionTypeElementListBuilder itemsBuilder: () throws -> SwiftSyntax.CompositionTypeElementListSyntax) rethrows
}
@_functionBuilder public struct ConditionElementListBuilder {
  public typealias Expression = SwiftSyntax.ConditionElementSyntax
  public typealias Component = [SwiftSyntaxBuilder.ConditionElementListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.ConditionElementListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.ConditionElementListBuilder.Component...) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.ConditionElementListBuilder.Expression) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.ConditionElementListBuilder.FinalResult) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.ConditionElementListBuilder.Component?) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.ConditionElementListBuilder.Component) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.ConditionElementListBuilder.Component) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.ConditionElementListBuilder.Component]) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.ConditionElementListBuilder.Component) -> SwiftSyntaxBuilder.ConditionElementListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.ConditionElementListBuilder.Component) -> SwiftSyntaxBuilder.ConditionElementListBuilder.FinalResult
}
extension SwiftSyntax.ConditionElementListSyntax {
  public init(@SwiftSyntaxBuilder.ConditionElementListBuilder itemsBuilder: () throws -> SwiftSyntax.ConditionElementListSyntax) rethrows
}
@_functionBuilder public struct DeclModifierListBuilder {
  public typealias Expression = SwiftSyntax.DeclModifierSyntax
  public typealias Component = [SwiftSyntaxBuilder.DeclModifierListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.DeclModifierListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.DeclModifierListBuilder.Component...) -> SwiftSyntaxBuilder.DeclModifierListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.DeclModifierListBuilder.Expression) -> SwiftSyntaxBuilder.DeclModifierListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.DeclModifierListBuilder.FinalResult) -> SwiftSyntaxBuilder.DeclModifierListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.DeclModifierListBuilder.Component?) -> SwiftSyntaxBuilder.DeclModifierListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.DeclModifierListBuilder.Component) -> SwiftSyntaxBuilder.DeclModifierListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.DeclModifierListBuilder.Component) -> SwiftSyntaxBuilder.DeclModifierListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.DeclModifierListBuilder.Component]) -> SwiftSyntaxBuilder.DeclModifierListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.DeclModifierListBuilder.Component) -> SwiftSyntaxBuilder.DeclModifierListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.DeclModifierListBuilder.Component) -> SwiftSyntaxBuilder.DeclModifierListBuilder.FinalResult
}
extension SwiftSyntax.DeclModifierListSyntax {
  public init(@SwiftSyntaxBuilder.DeclModifierListBuilder itemsBuilder: () throws -> SwiftSyntax.DeclModifierListSyntax) rethrows
}
@_functionBuilder public struct DeclNameArgumentListBuilder {
  public typealias Expression = SwiftSyntax.DeclNameArgumentSyntax
  public typealias Component = [SwiftSyntaxBuilder.DeclNameArgumentListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.DeclNameArgumentListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.DeclNameArgumentListBuilder.Component...) -> SwiftSyntaxBuilder.DeclNameArgumentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.DeclNameArgumentListBuilder.Expression) -> SwiftSyntaxBuilder.DeclNameArgumentListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.DeclNameArgumentListBuilder.FinalResult) -> SwiftSyntaxBuilder.DeclNameArgumentListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.DeclNameArgumentListBuilder.Component?) -> SwiftSyntaxBuilder.DeclNameArgumentListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.DeclNameArgumentListBuilder.Component) -> SwiftSyntaxBuilder.DeclNameArgumentListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.DeclNameArgumentListBuilder.Component) -> SwiftSyntaxBuilder.DeclNameArgumentListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.DeclNameArgumentListBuilder.Component]) -> SwiftSyntaxBuilder.DeclNameArgumentListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.DeclNameArgumentListBuilder.Component) -> SwiftSyntaxBuilder.DeclNameArgumentListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.DeclNameArgumentListBuilder.Component) -> SwiftSyntaxBuilder.DeclNameArgumentListBuilder.FinalResult
}
extension SwiftSyntax.DeclNameArgumentListSyntax {
  public init(@SwiftSyntaxBuilder.DeclNameArgumentListBuilder itemsBuilder: () throws -> SwiftSyntax.DeclNameArgumentListSyntax) rethrows
}
@_functionBuilder public struct DesignatedTypeListBuilder {
  public typealias Expression = SwiftSyntax.DesignatedTypeSyntax
  public typealias Component = [SwiftSyntaxBuilder.DesignatedTypeListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.DesignatedTypeListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.DesignatedTypeListBuilder.Component...) -> SwiftSyntaxBuilder.DesignatedTypeListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.DesignatedTypeListBuilder.Expression) -> SwiftSyntaxBuilder.DesignatedTypeListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.DesignatedTypeListBuilder.FinalResult) -> SwiftSyntaxBuilder.DesignatedTypeListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.DesignatedTypeListBuilder.Component?) -> SwiftSyntaxBuilder.DesignatedTypeListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.DesignatedTypeListBuilder.Component) -> SwiftSyntaxBuilder.DesignatedTypeListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.DesignatedTypeListBuilder.Component) -> SwiftSyntaxBuilder.DesignatedTypeListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.DesignatedTypeListBuilder.Component]) -> SwiftSyntaxBuilder.DesignatedTypeListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.DesignatedTypeListBuilder.Component) -> SwiftSyntaxBuilder.DesignatedTypeListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.DesignatedTypeListBuilder.Component) -> SwiftSyntaxBuilder.DesignatedTypeListBuilder.FinalResult
}
extension SwiftSyntax.DesignatedTypeListSyntax {
  public init(@SwiftSyntaxBuilder.DesignatedTypeListBuilder itemsBuilder: () throws -> SwiftSyntax.DesignatedTypeListSyntax) rethrows
}
@_functionBuilder public struct DictionaryElementListBuilder {
  public typealias Expression = SwiftSyntax.DictionaryElementSyntax
  public typealias Component = [SwiftSyntaxBuilder.DictionaryElementListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.DictionaryElementListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.DictionaryElementListBuilder.Component...) -> SwiftSyntaxBuilder.DictionaryElementListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.DictionaryElementListBuilder.Expression) -> SwiftSyntaxBuilder.DictionaryElementListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.DictionaryElementListBuilder.FinalResult) -> SwiftSyntaxBuilder.DictionaryElementListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.DictionaryElementListBuilder.Component?) -> SwiftSyntaxBuilder.DictionaryElementListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.DictionaryElementListBuilder.Component) -> SwiftSyntaxBuilder.DictionaryElementListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.DictionaryElementListBuilder.Component) -> SwiftSyntaxBuilder.DictionaryElementListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.DictionaryElementListBuilder.Component]) -> SwiftSyntaxBuilder.DictionaryElementListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.DictionaryElementListBuilder.Component) -> SwiftSyntaxBuilder.DictionaryElementListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.DictionaryElementListBuilder.Component) -> SwiftSyntaxBuilder.DictionaryElementListBuilder.FinalResult
}
extension SwiftSyntax.DictionaryElementListSyntax {
  public init(@SwiftSyntaxBuilder.DictionaryElementListBuilder itemsBuilder: () throws -> SwiftSyntax.DictionaryElementListSyntax) rethrows
}
@_functionBuilder public struct DifferentiabilityArgumentListBuilder {
  public typealias Expression = SwiftSyntax.DifferentiabilityArgumentSyntax
  public typealias Component = [SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.DifferentiabilityArgumentListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.Component...) -> SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.Expression) -> SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.FinalResult) -> SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.Component?) -> SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.Component) -> SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.Component) -> SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.Component]) -> SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.Component) -> SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.Component) -> SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder.FinalResult
}
extension SwiftSyntax.DifferentiabilityArgumentListSyntax {
  public init(@SwiftSyntaxBuilder.DifferentiabilityArgumentListBuilder itemsBuilder: () throws -> SwiftSyntax.DifferentiabilityArgumentListSyntax) rethrows
}
@_functionBuilder public struct DocumentationAttributeArgumentListBuilder {
  public typealias Expression = SwiftSyntax.DocumentationAttributeArgumentSyntax
  public typealias Component = [SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.DocumentationAttributeArgumentListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.Component...) -> SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.Expression) -> SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.FinalResult) -> SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.Component?) -> SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.Component) -> SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.Component) -> SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.Component]) -> SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.Component) -> SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.Component) -> SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder.FinalResult
}
extension SwiftSyntax.DocumentationAttributeArgumentListSyntax {
  public init(@SwiftSyntaxBuilder.DocumentationAttributeArgumentListBuilder itemsBuilder: () throws -> SwiftSyntax.DocumentationAttributeArgumentListSyntax) rethrows
}
@_functionBuilder public struct EffectsAttributeArgumentListBuilder {
  public typealias Expression = SwiftSyntax.TokenSyntax
  public typealias Component = [SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.EffectsAttributeArgumentListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.Component...) -> SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.Expression) -> SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.FinalResult) -> SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.Component?) -> SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.Component) -> SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.Component) -> SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.Component]) -> SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.Component) -> SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.Component) -> SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder.FinalResult
}
extension SwiftSyntax.EffectsAttributeArgumentListSyntax {
  public init(@SwiftSyntaxBuilder.EffectsAttributeArgumentListBuilder itemsBuilder: () throws -> SwiftSyntax.EffectsAttributeArgumentListSyntax) rethrows
}
@_functionBuilder public struct EnumCaseElementListBuilder {
  public typealias Expression = SwiftSyntax.EnumCaseElementSyntax
  public typealias Component = [SwiftSyntaxBuilder.EnumCaseElementListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.EnumCaseElementListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.EnumCaseElementListBuilder.Component...) -> SwiftSyntaxBuilder.EnumCaseElementListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.EnumCaseElementListBuilder.Expression) -> SwiftSyntaxBuilder.EnumCaseElementListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.EnumCaseElementListBuilder.FinalResult) -> SwiftSyntaxBuilder.EnumCaseElementListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.EnumCaseElementListBuilder.Component?) -> SwiftSyntaxBuilder.EnumCaseElementListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.EnumCaseElementListBuilder.Component) -> SwiftSyntaxBuilder.EnumCaseElementListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.EnumCaseElementListBuilder.Component) -> SwiftSyntaxBuilder.EnumCaseElementListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.EnumCaseElementListBuilder.Component]) -> SwiftSyntaxBuilder.EnumCaseElementListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.EnumCaseElementListBuilder.Component) -> SwiftSyntaxBuilder.EnumCaseElementListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.EnumCaseElementListBuilder.Component) -> SwiftSyntaxBuilder.EnumCaseElementListBuilder.FinalResult
}
extension SwiftSyntax.EnumCaseElementListSyntax {
  public init(@SwiftSyntaxBuilder.EnumCaseElementListBuilder itemsBuilder: () throws -> SwiftSyntax.EnumCaseElementListSyntax) rethrows
}
@_functionBuilder public struct EnumCaseParameterListBuilder {
  public typealias Expression = SwiftSyntax.EnumCaseParameterSyntax
  public typealias Component = [SwiftSyntaxBuilder.EnumCaseParameterListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.EnumCaseParameterListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.EnumCaseParameterListBuilder.Component...) -> SwiftSyntaxBuilder.EnumCaseParameterListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.EnumCaseParameterListBuilder.Expression) -> SwiftSyntaxBuilder.EnumCaseParameterListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.EnumCaseParameterListBuilder.FinalResult) -> SwiftSyntaxBuilder.EnumCaseParameterListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.EnumCaseParameterListBuilder.Component?) -> SwiftSyntaxBuilder.EnumCaseParameterListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.EnumCaseParameterListBuilder.Component) -> SwiftSyntaxBuilder.EnumCaseParameterListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.EnumCaseParameterListBuilder.Component) -> SwiftSyntaxBuilder.EnumCaseParameterListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.EnumCaseParameterListBuilder.Component]) -> SwiftSyntaxBuilder.EnumCaseParameterListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.EnumCaseParameterListBuilder.Component) -> SwiftSyntaxBuilder.EnumCaseParameterListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.EnumCaseParameterListBuilder.Component) -> SwiftSyntaxBuilder.EnumCaseParameterListBuilder.FinalResult
}
extension SwiftSyntax.EnumCaseParameterListSyntax {
  public init(@SwiftSyntaxBuilder.EnumCaseParameterListBuilder itemsBuilder: () throws -> SwiftSyntax.EnumCaseParameterListSyntax) rethrows
}
@_functionBuilder public struct ExprListBuilder {
  public typealias Expression = SwiftSyntax.ExprSyntaxProtocol
  public typealias Component = [any SwiftSyntax.ExprSyntaxProtocol]
  public typealias FinalResult = SwiftSyntax.ExprListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.ExprListBuilder.Component...) -> SwiftSyntaxBuilder.ExprListBuilder.Component
  public static func buildExpression(_ expression: any SwiftSyntax.ExprSyntaxProtocol) -> SwiftSyntaxBuilder.ExprListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.ExprListBuilder.FinalResult) -> SwiftSyntaxBuilder.ExprListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.ExprListBuilder.Component?) -> SwiftSyntaxBuilder.ExprListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.ExprListBuilder.Component) -> SwiftSyntaxBuilder.ExprListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.ExprListBuilder.Component) -> SwiftSyntaxBuilder.ExprListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.ExprListBuilder.Component]) -> SwiftSyntaxBuilder.ExprListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.ExprListBuilder.Component) -> SwiftSyntaxBuilder.ExprListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.ExprListBuilder.Component) -> SwiftSyntaxBuilder.ExprListBuilder.FinalResult
}
extension SwiftSyntax.ExprListSyntax {
  public init(@SwiftSyntaxBuilder.ExprListBuilder itemsBuilder: () throws -> SwiftSyntax.ExprListSyntax) rethrows
}
@_functionBuilder public struct FunctionParameterListBuilder {
  public typealias Expression = SwiftSyntax.FunctionParameterSyntax
  public typealias Component = [SwiftSyntaxBuilder.FunctionParameterListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.FunctionParameterListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.FunctionParameterListBuilder.Component...) -> SwiftSyntaxBuilder.FunctionParameterListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.FunctionParameterListBuilder.Expression) -> SwiftSyntaxBuilder.FunctionParameterListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.FunctionParameterListBuilder.FinalResult) -> SwiftSyntaxBuilder.FunctionParameterListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.FunctionParameterListBuilder.Component?) -> SwiftSyntaxBuilder.FunctionParameterListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.FunctionParameterListBuilder.Component) -> SwiftSyntaxBuilder.FunctionParameterListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.FunctionParameterListBuilder.Component) -> SwiftSyntaxBuilder.FunctionParameterListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.FunctionParameterListBuilder.Component]) -> SwiftSyntaxBuilder.FunctionParameterListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.FunctionParameterListBuilder.Component) -> SwiftSyntaxBuilder.FunctionParameterListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.FunctionParameterListBuilder.Component) -> SwiftSyntaxBuilder.FunctionParameterListBuilder.FinalResult
}
extension SwiftSyntax.FunctionParameterListSyntax {
  public init(@SwiftSyntaxBuilder.FunctionParameterListBuilder itemsBuilder: () throws -> SwiftSyntax.FunctionParameterListSyntax) rethrows
}
@_functionBuilder public struct GenericArgumentListBuilder {
  public typealias Expression = SwiftSyntax.GenericArgumentSyntax
  public typealias Component = [SwiftSyntaxBuilder.GenericArgumentListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.GenericArgumentListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.GenericArgumentListBuilder.Component...) -> SwiftSyntaxBuilder.GenericArgumentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.GenericArgumentListBuilder.Expression) -> SwiftSyntaxBuilder.GenericArgumentListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.GenericArgumentListBuilder.FinalResult) -> SwiftSyntaxBuilder.GenericArgumentListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.GenericArgumentListBuilder.Component?) -> SwiftSyntaxBuilder.GenericArgumentListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.GenericArgumentListBuilder.Component) -> SwiftSyntaxBuilder.GenericArgumentListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.GenericArgumentListBuilder.Component) -> SwiftSyntaxBuilder.GenericArgumentListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.GenericArgumentListBuilder.Component]) -> SwiftSyntaxBuilder.GenericArgumentListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.GenericArgumentListBuilder.Component) -> SwiftSyntaxBuilder.GenericArgumentListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.GenericArgumentListBuilder.Component) -> SwiftSyntaxBuilder.GenericArgumentListBuilder.FinalResult
}
extension SwiftSyntax.GenericArgumentListSyntax {
  public init(@SwiftSyntaxBuilder.GenericArgumentListBuilder itemsBuilder: () throws -> SwiftSyntax.GenericArgumentListSyntax) rethrows
}
@_functionBuilder public struct GenericParameterListBuilder {
  public typealias Expression = SwiftSyntax.GenericParameterSyntax
  public typealias Component = [SwiftSyntaxBuilder.GenericParameterListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.GenericParameterListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.GenericParameterListBuilder.Component...) -> SwiftSyntaxBuilder.GenericParameterListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.GenericParameterListBuilder.Expression) -> SwiftSyntaxBuilder.GenericParameterListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.GenericParameterListBuilder.FinalResult) -> SwiftSyntaxBuilder.GenericParameterListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.GenericParameterListBuilder.Component?) -> SwiftSyntaxBuilder.GenericParameterListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.GenericParameterListBuilder.Component) -> SwiftSyntaxBuilder.GenericParameterListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.GenericParameterListBuilder.Component) -> SwiftSyntaxBuilder.GenericParameterListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.GenericParameterListBuilder.Component]) -> SwiftSyntaxBuilder.GenericParameterListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.GenericParameterListBuilder.Component) -> SwiftSyntaxBuilder.GenericParameterListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.GenericParameterListBuilder.Component) -> SwiftSyntaxBuilder.GenericParameterListBuilder.FinalResult
}
extension SwiftSyntax.GenericParameterListSyntax {
  public init(@SwiftSyntaxBuilder.GenericParameterListBuilder itemsBuilder: () throws -> SwiftSyntax.GenericParameterListSyntax) rethrows
}
@_functionBuilder public struct GenericRequirementListBuilder {
  public typealias Expression = SwiftSyntax.GenericRequirementSyntax
  public typealias Component = [SwiftSyntaxBuilder.GenericRequirementListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.GenericRequirementListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.GenericRequirementListBuilder.Component...) -> SwiftSyntaxBuilder.GenericRequirementListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.GenericRequirementListBuilder.Expression) -> SwiftSyntaxBuilder.GenericRequirementListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.GenericRequirementListBuilder.FinalResult) -> SwiftSyntaxBuilder.GenericRequirementListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.GenericRequirementListBuilder.Component?) -> SwiftSyntaxBuilder.GenericRequirementListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.GenericRequirementListBuilder.Component) -> SwiftSyntaxBuilder.GenericRequirementListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.GenericRequirementListBuilder.Component) -> SwiftSyntaxBuilder.GenericRequirementListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.GenericRequirementListBuilder.Component]) -> SwiftSyntaxBuilder.GenericRequirementListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.GenericRequirementListBuilder.Component) -> SwiftSyntaxBuilder.GenericRequirementListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.GenericRequirementListBuilder.Component) -> SwiftSyntaxBuilder.GenericRequirementListBuilder.FinalResult
}
extension SwiftSyntax.GenericRequirementListSyntax {
  public init(@SwiftSyntaxBuilder.GenericRequirementListBuilder itemsBuilder: () throws -> SwiftSyntax.GenericRequirementListSyntax) rethrows
}
@_functionBuilder public struct IfConfigClauseListBuilder {
  public typealias Expression = SwiftSyntax.IfConfigClauseSyntax
  public typealias Component = [SwiftSyntaxBuilder.IfConfigClauseListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.IfConfigClauseListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.IfConfigClauseListBuilder.Component...) -> SwiftSyntaxBuilder.IfConfigClauseListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.IfConfigClauseListBuilder.Expression) -> SwiftSyntaxBuilder.IfConfigClauseListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.IfConfigClauseListBuilder.FinalResult) -> SwiftSyntaxBuilder.IfConfigClauseListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.IfConfigClauseListBuilder.Component?) -> SwiftSyntaxBuilder.IfConfigClauseListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.IfConfigClauseListBuilder.Component) -> SwiftSyntaxBuilder.IfConfigClauseListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.IfConfigClauseListBuilder.Component) -> SwiftSyntaxBuilder.IfConfigClauseListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.IfConfigClauseListBuilder.Component]) -> SwiftSyntaxBuilder.IfConfigClauseListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.IfConfigClauseListBuilder.Component) -> SwiftSyntaxBuilder.IfConfigClauseListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.IfConfigClauseListBuilder.Component) -> SwiftSyntaxBuilder.IfConfigClauseListBuilder.FinalResult
}
extension SwiftSyntax.IfConfigClauseListSyntax {
  public init(@SwiftSyntaxBuilder.IfConfigClauseListBuilder itemsBuilder: () throws -> SwiftSyntax.IfConfigClauseListSyntax) rethrows
}
@_functionBuilder public struct ImportPathComponentListBuilder {
  public typealias Expression = SwiftSyntax.ImportPathComponentSyntax
  public typealias Component = [SwiftSyntaxBuilder.ImportPathComponentListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.ImportPathComponentListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.ImportPathComponentListBuilder.Component...) -> SwiftSyntaxBuilder.ImportPathComponentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.ImportPathComponentListBuilder.Expression) -> SwiftSyntaxBuilder.ImportPathComponentListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.ImportPathComponentListBuilder.FinalResult) -> SwiftSyntaxBuilder.ImportPathComponentListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.ImportPathComponentListBuilder.Component?) -> SwiftSyntaxBuilder.ImportPathComponentListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.ImportPathComponentListBuilder.Component) -> SwiftSyntaxBuilder.ImportPathComponentListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.ImportPathComponentListBuilder.Component) -> SwiftSyntaxBuilder.ImportPathComponentListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.ImportPathComponentListBuilder.Component]) -> SwiftSyntaxBuilder.ImportPathComponentListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.ImportPathComponentListBuilder.Component) -> SwiftSyntaxBuilder.ImportPathComponentListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.ImportPathComponentListBuilder.Component) -> SwiftSyntaxBuilder.ImportPathComponentListBuilder.FinalResult
}
extension SwiftSyntax.ImportPathComponentListSyntax {
  public init(@SwiftSyntaxBuilder.ImportPathComponentListBuilder itemsBuilder: () throws -> SwiftSyntax.ImportPathComponentListSyntax) rethrows
}
@_functionBuilder public struct InheritedTypeListBuilder {
  public typealias Expression = SwiftSyntax.InheritedTypeSyntax
  public typealias Component = [SwiftSyntaxBuilder.InheritedTypeListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.InheritedTypeListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.InheritedTypeListBuilder.Component...) -> SwiftSyntaxBuilder.InheritedTypeListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.InheritedTypeListBuilder.Expression) -> SwiftSyntaxBuilder.InheritedTypeListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.InheritedTypeListBuilder.FinalResult) -> SwiftSyntaxBuilder.InheritedTypeListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.InheritedTypeListBuilder.Component?) -> SwiftSyntaxBuilder.InheritedTypeListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.InheritedTypeListBuilder.Component) -> SwiftSyntaxBuilder.InheritedTypeListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.InheritedTypeListBuilder.Component) -> SwiftSyntaxBuilder.InheritedTypeListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.InheritedTypeListBuilder.Component]) -> SwiftSyntaxBuilder.InheritedTypeListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.InheritedTypeListBuilder.Component) -> SwiftSyntaxBuilder.InheritedTypeListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.InheritedTypeListBuilder.Component) -> SwiftSyntaxBuilder.InheritedTypeListBuilder.FinalResult
}
extension SwiftSyntax.InheritedTypeListSyntax {
  public init(@SwiftSyntaxBuilder.InheritedTypeListBuilder itemsBuilder: () throws -> SwiftSyntax.InheritedTypeListSyntax) rethrows
}
@_functionBuilder public struct KeyPathComponentListBuilder {
  public typealias Expression = SwiftSyntax.KeyPathComponentSyntax
  public typealias Component = [SwiftSyntaxBuilder.KeyPathComponentListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.KeyPathComponentListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.KeyPathComponentListBuilder.Component...) -> SwiftSyntaxBuilder.KeyPathComponentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.KeyPathComponentListBuilder.Expression) -> SwiftSyntaxBuilder.KeyPathComponentListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.KeyPathComponentListBuilder.FinalResult) -> SwiftSyntaxBuilder.KeyPathComponentListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.KeyPathComponentListBuilder.Component?) -> SwiftSyntaxBuilder.KeyPathComponentListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.KeyPathComponentListBuilder.Component) -> SwiftSyntaxBuilder.KeyPathComponentListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.KeyPathComponentListBuilder.Component) -> SwiftSyntaxBuilder.KeyPathComponentListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.KeyPathComponentListBuilder.Component]) -> SwiftSyntaxBuilder.KeyPathComponentListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.KeyPathComponentListBuilder.Component) -> SwiftSyntaxBuilder.KeyPathComponentListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.KeyPathComponentListBuilder.Component) -> SwiftSyntaxBuilder.KeyPathComponentListBuilder.FinalResult
}
extension SwiftSyntax.KeyPathComponentListSyntax {
  public init(@SwiftSyntaxBuilder.KeyPathComponentListBuilder itemsBuilder: () throws -> SwiftSyntax.KeyPathComponentListSyntax) rethrows
}
@_functionBuilder public struct LabeledExprListBuilder {
  public typealias Expression = SwiftSyntax.LabeledExprSyntax
  public typealias Component = [SwiftSyntaxBuilder.LabeledExprListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.LabeledExprListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.LabeledExprListBuilder.Component...) -> SwiftSyntaxBuilder.LabeledExprListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.LabeledExprListBuilder.Expression) -> SwiftSyntaxBuilder.LabeledExprListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.LabeledExprListBuilder.FinalResult) -> SwiftSyntaxBuilder.LabeledExprListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.LabeledExprListBuilder.Component?) -> SwiftSyntaxBuilder.LabeledExprListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.LabeledExprListBuilder.Component) -> SwiftSyntaxBuilder.LabeledExprListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.LabeledExprListBuilder.Component) -> SwiftSyntaxBuilder.LabeledExprListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.LabeledExprListBuilder.Component]) -> SwiftSyntaxBuilder.LabeledExprListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.LabeledExprListBuilder.Component) -> SwiftSyntaxBuilder.LabeledExprListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.LabeledExprListBuilder.Component) -> SwiftSyntaxBuilder.LabeledExprListBuilder.FinalResult
}
extension SwiftSyntax.LabeledExprListSyntax {
  public init(@SwiftSyntaxBuilder.LabeledExprListBuilder itemsBuilder: () throws -> SwiftSyntax.LabeledExprListSyntax) rethrows
}
@_functionBuilder public struct MemberBlockItemListBuilder {
  public typealias Expression = SwiftSyntax.MemberBlockItemSyntax
  public typealias Component = [SwiftSyntaxBuilder.MemberBlockItemListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.MemberBlockItemListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component...) -> SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.MemberBlockItemListBuilder.Expression) -> SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.MemberBlockItemListBuilder.FinalResult) -> SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component?) -> SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component) -> SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component) -> SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component]) -> SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component) -> SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.MemberBlockItemListBuilder.Component) -> SwiftSyntaxBuilder.MemberBlockItemListBuilder.FinalResult
}
extension SwiftSyntax.MemberBlockItemListSyntax {
  public init(@SwiftSyntaxBuilder.MemberBlockItemListBuilder itemsBuilder: () throws -> SwiftSyntax.MemberBlockItemListSyntax) rethrows
}
@_functionBuilder public struct MultipleTrailingClosureElementListBuilder {
  public typealias Expression = SwiftSyntax.MultipleTrailingClosureElementSyntax
  public typealias Component = [SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.MultipleTrailingClosureElementListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.Component...) -> SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.Expression) -> SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.FinalResult) -> SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.Component?) -> SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.Component) -> SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.Component) -> SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.Component]) -> SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.Component) -> SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.Component) -> SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder.FinalResult
}
extension SwiftSyntax.MultipleTrailingClosureElementListSyntax {
  public init(@SwiftSyntaxBuilder.MultipleTrailingClosureElementListBuilder itemsBuilder: () throws -> SwiftSyntax.MultipleTrailingClosureElementListSyntax) rethrows
}
@_functionBuilder public struct ObjCSelectorPieceListBuilder {
  public typealias Expression = SwiftSyntax.ObjCSelectorPieceSyntax
  public typealias Component = [SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.ObjCSelectorPieceListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.Component...) -> SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.Expression) -> SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.FinalResult) -> SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.Component?) -> SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.Component) -> SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.Component) -> SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.Component]) -> SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.Component) -> SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.Component) -> SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder.FinalResult
}
extension SwiftSyntax.ObjCSelectorPieceListSyntax {
  public init(@SwiftSyntaxBuilder.ObjCSelectorPieceListBuilder itemsBuilder: () throws -> SwiftSyntax.ObjCSelectorPieceListSyntax) rethrows
}
@_functionBuilder public struct PatternBindingListBuilder {
  public typealias Expression = SwiftSyntax.PatternBindingSyntax
  public typealias Component = [SwiftSyntaxBuilder.PatternBindingListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.PatternBindingListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.PatternBindingListBuilder.Component...) -> SwiftSyntaxBuilder.PatternBindingListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.PatternBindingListBuilder.Expression) -> SwiftSyntaxBuilder.PatternBindingListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.PatternBindingListBuilder.FinalResult) -> SwiftSyntaxBuilder.PatternBindingListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.PatternBindingListBuilder.Component?) -> SwiftSyntaxBuilder.PatternBindingListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.PatternBindingListBuilder.Component) -> SwiftSyntaxBuilder.PatternBindingListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.PatternBindingListBuilder.Component) -> SwiftSyntaxBuilder.PatternBindingListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.PatternBindingListBuilder.Component]) -> SwiftSyntaxBuilder.PatternBindingListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.PatternBindingListBuilder.Component) -> SwiftSyntaxBuilder.PatternBindingListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.PatternBindingListBuilder.Component) -> SwiftSyntaxBuilder.PatternBindingListBuilder.FinalResult
}
extension SwiftSyntax.PatternBindingListSyntax {
  public init(@SwiftSyntaxBuilder.PatternBindingListBuilder itemsBuilder: () throws -> SwiftSyntax.PatternBindingListSyntax) rethrows
}
@_functionBuilder public struct PlatformVersionItemListBuilder {
  public typealias Expression = SwiftSyntax.PlatformVersionItemSyntax
  public typealias Component = [SwiftSyntaxBuilder.PlatformVersionItemListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.PlatformVersionItemListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.PlatformVersionItemListBuilder.Component...) -> SwiftSyntaxBuilder.PlatformVersionItemListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.PlatformVersionItemListBuilder.Expression) -> SwiftSyntaxBuilder.PlatformVersionItemListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.PlatformVersionItemListBuilder.FinalResult) -> SwiftSyntaxBuilder.PlatformVersionItemListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.PlatformVersionItemListBuilder.Component?) -> SwiftSyntaxBuilder.PlatformVersionItemListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.PlatformVersionItemListBuilder.Component) -> SwiftSyntaxBuilder.PlatformVersionItemListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.PlatformVersionItemListBuilder.Component) -> SwiftSyntaxBuilder.PlatformVersionItemListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.PlatformVersionItemListBuilder.Component]) -> SwiftSyntaxBuilder.PlatformVersionItemListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.PlatformVersionItemListBuilder.Component) -> SwiftSyntaxBuilder.PlatformVersionItemListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.PlatformVersionItemListBuilder.Component) -> SwiftSyntaxBuilder.PlatformVersionItemListBuilder.FinalResult
}
extension SwiftSyntax.PlatformVersionItemListSyntax {
  public init(@SwiftSyntaxBuilder.PlatformVersionItemListBuilder itemsBuilder: () throws -> SwiftSyntax.PlatformVersionItemListSyntax) rethrows
}
@_functionBuilder public struct PrecedenceGroupAttributeListBuilder {
  public typealias Expression = SwiftSyntax.PrecedenceGroupAttributeListSyntax.Element
  public typealias Component = [SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.PrecedenceGroupAttributeListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component...) -> SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Expression) -> SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.PrecedenceGroupRelationSyntax) -> SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.PrecedenceGroupAssignmentSyntax) -> SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.PrecedenceGroupAssociativitySyntax) -> SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.FinalResult) -> SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component?) -> SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component) -> SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component) -> SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component]) -> SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component) -> SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.Component) -> SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder.FinalResult
}
extension SwiftSyntax.PrecedenceGroupAttributeListSyntax {
  public init(@SwiftSyntaxBuilder.PrecedenceGroupAttributeListBuilder itemsBuilder: () throws -> SwiftSyntax.PrecedenceGroupAttributeListSyntax) rethrows
}
@_functionBuilder public struct PrecedenceGroupNameListBuilder {
  public typealias Expression = SwiftSyntax.PrecedenceGroupNameSyntax
  public typealias Component = [SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.PrecedenceGroupNameListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.Component...) -> SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.Expression) -> SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.FinalResult) -> SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.Component?) -> SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.Component) -> SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.Component) -> SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.Component]) -> SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.Component) -> SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.Component) -> SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder.FinalResult
}
extension SwiftSyntax.PrecedenceGroupNameListSyntax {
  public init(@SwiftSyntaxBuilder.PrecedenceGroupNameListBuilder itemsBuilder: () throws -> SwiftSyntax.PrecedenceGroupNameListSyntax) rethrows
}
@_functionBuilder public struct PrimaryAssociatedTypeListBuilder {
  public typealias Expression = SwiftSyntax.PrimaryAssociatedTypeSyntax
  public typealias Component = [SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.PrimaryAssociatedTypeListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.Component...) -> SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.Expression) -> SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.FinalResult) -> SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.Component?) -> SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.Component) -> SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.Component) -> SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.Component]) -> SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.Component) -> SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.Component) -> SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder.FinalResult
}
extension SwiftSyntax.PrimaryAssociatedTypeListSyntax {
  public init(@SwiftSyntaxBuilder.PrimaryAssociatedTypeListBuilder itemsBuilder: () throws -> SwiftSyntax.PrimaryAssociatedTypeListSyntax) rethrows
}
@_functionBuilder public struct SimpleStringLiteralSegmentListBuilder {
  public typealias Expression = SwiftSyntax.StringSegmentSyntax
  public typealias Component = [SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.SimpleStringLiteralSegmentListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.Component...) -> SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.Expression) -> SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.FinalResult) -> SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.Component?) -> SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.Component) -> SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.Component) -> SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.Component]) -> SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.Component) -> SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.Component) -> SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder.FinalResult
}
extension SwiftSyntax.SimpleStringLiteralSegmentListSyntax {
  public init(@SwiftSyntaxBuilder.SimpleStringLiteralSegmentListBuilder itemsBuilder: () throws -> SwiftSyntax.SimpleStringLiteralSegmentListSyntax) rethrows
}
@_functionBuilder public struct SpecializeAttributeArgumentListBuilder {
  public typealias Expression = SwiftSyntax.SpecializeAttributeArgumentListSyntax.Element
  public typealias Component = [SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.SpecializeAttributeArgumentListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component...) -> SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Expression) -> SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.LabeledSpecializeArgumentSyntax) -> SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.SpecializeAvailabilityArgumentSyntax) -> SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.SpecializeTargetFunctionArgumentSyntax) -> SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.GenericWhereClauseSyntax) -> SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.FinalResult) -> SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component?) -> SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component) -> SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component) -> SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component]) -> SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component) -> SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.Component) -> SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder.FinalResult
}
extension SwiftSyntax.SpecializeAttributeArgumentListSyntax {
  public init(@SwiftSyntaxBuilder.SpecializeAttributeArgumentListBuilder itemsBuilder: () throws -> SwiftSyntax.SpecializeAttributeArgumentListSyntax) rethrows
}
@_functionBuilder public struct StringLiteralSegmentListBuilder {
  public typealias Expression = SwiftSyntax.StringLiteralSegmentListSyntax.Element
  public typealias Component = [SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.StringLiteralSegmentListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component...) -> SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Expression) -> SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.StringSegmentSyntax) -> SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.ExpressionSegmentSyntax) -> SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.FinalResult) -> SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component?) -> SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component) -> SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component) -> SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component]) -> SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component) -> SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.Component) -> SwiftSyntaxBuilder.StringLiteralSegmentListBuilder.FinalResult
}
extension SwiftSyntax.StringLiteralSegmentListSyntax {
  public init(@SwiftSyntaxBuilder.StringLiteralSegmentListBuilder itemsBuilder: () throws -> SwiftSyntax.StringLiteralSegmentListSyntax) rethrows
}
@_functionBuilder public struct SwitchCaseItemListBuilder {
  public typealias Expression = SwiftSyntax.SwitchCaseItemSyntax
  public typealias Component = [SwiftSyntaxBuilder.SwitchCaseItemListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.SwitchCaseItemListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.SwitchCaseItemListBuilder.Component...) -> SwiftSyntaxBuilder.SwitchCaseItemListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.SwitchCaseItemListBuilder.Expression) -> SwiftSyntaxBuilder.SwitchCaseItemListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.SwitchCaseItemListBuilder.FinalResult) -> SwiftSyntaxBuilder.SwitchCaseItemListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.SwitchCaseItemListBuilder.Component?) -> SwiftSyntaxBuilder.SwitchCaseItemListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.SwitchCaseItemListBuilder.Component) -> SwiftSyntaxBuilder.SwitchCaseItemListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.SwitchCaseItemListBuilder.Component) -> SwiftSyntaxBuilder.SwitchCaseItemListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.SwitchCaseItemListBuilder.Component]) -> SwiftSyntaxBuilder.SwitchCaseItemListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.SwitchCaseItemListBuilder.Component) -> SwiftSyntaxBuilder.SwitchCaseItemListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.SwitchCaseItemListBuilder.Component) -> SwiftSyntaxBuilder.SwitchCaseItemListBuilder.FinalResult
}
extension SwiftSyntax.SwitchCaseItemListSyntax {
  public init(@SwiftSyntaxBuilder.SwitchCaseItemListBuilder itemsBuilder: () throws -> SwiftSyntax.SwitchCaseItemListSyntax) rethrows
}
@_functionBuilder public struct SwitchCaseListBuilder {
  public typealias Expression = SwiftSyntax.SwitchCaseListSyntax.Element
  public typealias Component = [SwiftSyntaxBuilder.SwitchCaseListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.SwitchCaseListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.SwitchCaseListBuilder.Component...) -> SwiftSyntaxBuilder.SwitchCaseListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.SwitchCaseListBuilder.Expression) -> SwiftSyntaxBuilder.SwitchCaseListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.SwitchCaseSyntax) -> SwiftSyntaxBuilder.SwitchCaseListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntax.IfConfigDeclSyntax) -> SwiftSyntaxBuilder.SwitchCaseListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.SwitchCaseListBuilder.FinalResult) -> SwiftSyntaxBuilder.SwitchCaseListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.SwitchCaseListBuilder.Component?) -> SwiftSyntaxBuilder.SwitchCaseListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.SwitchCaseListBuilder.Component) -> SwiftSyntaxBuilder.SwitchCaseListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.SwitchCaseListBuilder.Component) -> SwiftSyntaxBuilder.SwitchCaseListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.SwitchCaseListBuilder.Component]) -> SwiftSyntaxBuilder.SwitchCaseListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.SwitchCaseListBuilder.Component) -> SwiftSyntaxBuilder.SwitchCaseListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.SwitchCaseListBuilder.Component) -> SwiftSyntaxBuilder.SwitchCaseListBuilder.FinalResult
}
extension SwiftSyntax.SwitchCaseListSyntax {
  public init(@SwiftSyntaxBuilder.SwitchCaseListBuilder itemsBuilder: () throws -> SwiftSyntax.SwitchCaseListSyntax) rethrows
}
@_functionBuilder public struct TuplePatternElementListBuilder {
  public typealias Expression = SwiftSyntax.TuplePatternElementSyntax
  public typealias Component = [SwiftSyntaxBuilder.TuplePatternElementListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.TuplePatternElementListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.TuplePatternElementListBuilder.Component...) -> SwiftSyntaxBuilder.TuplePatternElementListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.TuplePatternElementListBuilder.Expression) -> SwiftSyntaxBuilder.TuplePatternElementListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.TuplePatternElementListBuilder.FinalResult) -> SwiftSyntaxBuilder.TuplePatternElementListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.TuplePatternElementListBuilder.Component?) -> SwiftSyntaxBuilder.TuplePatternElementListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.TuplePatternElementListBuilder.Component) -> SwiftSyntaxBuilder.TuplePatternElementListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.TuplePatternElementListBuilder.Component) -> SwiftSyntaxBuilder.TuplePatternElementListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.TuplePatternElementListBuilder.Component]) -> SwiftSyntaxBuilder.TuplePatternElementListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.TuplePatternElementListBuilder.Component) -> SwiftSyntaxBuilder.TuplePatternElementListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.TuplePatternElementListBuilder.Component) -> SwiftSyntaxBuilder.TuplePatternElementListBuilder.FinalResult
}
extension SwiftSyntax.TuplePatternElementListSyntax {
  public init(@SwiftSyntaxBuilder.TuplePatternElementListBuilder itemsBuilder: () throws -> SwiftSyntax.TuplePatternElementListSyntax) rethrows
}
@_functionBuilder public struct TupleTypeElementListBuilder {
  public typealias Expression = SwiftSyntax.TupleTypeElementSyntax
  public typealias Component = [SwiftSyntaxBuilder.TupleTypeElementListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.TupleTypeElementListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.TupleTypeElementListBuilder.Component...) -> SwiftSyntaxBuilder.TupleTypeElementListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.TupleTypeElementListBuilder.Expression) -> SwiftSyntaxBuilder.TupleTypeElementListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.TupleTypeElementListBuilder.FinalResult) -> SwiftSyntaxBuilder.TupleTypeElementListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.TupleTypeElementListBuilder.Component?) -> SwiftSyntaxBuilder.TupleTypeElementListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.TupleTypeElementListBuilder.Component) -> SwiftSyntaxBuilder.TupleTypeElementListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.TupleTypeElementListBuilder.Component) -> SwiftSyntaxBuilder.TupleTypeElementListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.TupleTypeElementListBuilder.Component]) -> SwiftSyntaxBuilder.TupleTypeElementListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.TupleTypeElementListBuilder.Component) -> SwiftSyntaxBuilder.TupleTypeElementListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.TupleTypeElementListBuilder.Component) -> SwiftSyntaxBuilder.TupleTypeElementListBuilder.FinalResult
}
extension SwiftSyntax.TupleTypeElementListSyntax {
  public init(@SwiftSyntaxBuilder.TupleTypeElementListBuilder itemsBuilder: () throws -> SwiftSyntax.TupleTypeElementListSyntax) rethrows
}
@_functionBuilder public struct UnexpectedNodesBuilder {
  public typealias Expression = SwiftSyntax.SyntaxProtocol
  public typealias Component = [any SwiftSyntax.SyntaxProtocol]
  public typealias FinalResult = SwiftSyntax.UnexpectedNodesSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.UnexpectedNodesBuilder.Component...) -> SwiftSyntaxBuilder.UnexpectedNodesBuilder.Component
  public static func buildExpression(_ expression: any SwiftSyntax.SyntaxProtocol) -> SwiftSyntaxBuilder.UnexpectedNodesBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.UnexpectedNodesBuilder.FinalResult) -> SwiftSyntaxBuilder.UnexpectedNodesBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.UnexpectedNodesBuilder.Component?) -> SwiftSyntaxBuilder.UnexpectedNodesBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.UnexpectedNodesBuilder.Component) -> SwiftSyntaxBuilder.UnexpectedNodesBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.UnexpectedNodesBuilder.Component) -> SwiftSyntaxBuilder.UnexpectedNodesBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.UnexpectedNodesBuilder.Component]) -> SwiftSyntaxBuilder.UnexpectedNodesBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.UnexpectedNodesBuilder.Component) -> SwiftSyntaxBuilder.UnexpectedNodesBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.UnexpectedNodesBuilder.Component) -> SwiftSyntaxBuilder.UnexpectedNodesBuilder.FinalResult
}
extension SwiftSyntax.UnexpectedNodesSyntax {
  public init(@SwiftSyntaxBuilder.UnexpectedNodesBuilder itemsBuilder: () throws -> SwiftSyntax.UnexpectedNodesSyntax) rethrows
}
@_functionBuilder public struct VersionComponentListBuilder {
  public typealias Expression = SwiftSyntax.VersionComponentSyntax
  public typealias Component = [SwiftSyntaxBuilder.VersionComponentListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.VersionComponentListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.VersionComponentListBuilder.Component...) -> SwiftSyntaxBuilder.VersionComponentListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.VersionComponentListBuilder.Expression) -> SwiftSyntaxBuilder.VersionComponentListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.VersionComponentListBuilder.FinalResult) -> SwiftSyntaxBuilder.VersionComponentListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.VersionComponentListBuilder.Component?) -> SwiftSyntaxBuilder.VersionComponentListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.VersionComponentListBuilder.Component) -> SwiftSyntaxBuilder.VersionComponentListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.VersionComponentListBuilder.Component) -> SwiftSyntaxBuilder.VersionComponentListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.VersionComponentListBuilder.Component]) -> SwiftSyntaxBuilder.VersionComponentListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.VersionComponentListBuilder.Component) -> SwiftSyntaxBuilder.VersionComponentListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.VersionComponentListBuilder.Component) -> SwiftSyntaxBuilder.VersionComponentListBuilder.FinalResult
}
extension SwiftSyntax.VersionComponentListSyntax {
  public init(@SwiftSyntaxBuilder.VersionComponentListBuilder itemsBuilder: () throws -> SwiftSyntax.VersionComponentListSyntax) rethrows
}
@_functionBuilder public struct YieldedExpressionListBuilder {
  public typealias Expression = SwiftSyntax.YieldedExpressionSyntax
  public typealias Component = [SwiftSyntaxBuilder.YieldedExpressionListBuilder.Expression]
  public typealias FinalResult = SwiftSyntax.YieldedExpressionListSyntax
  public static func buildBlock(_ components: SwiftSyntaxBuilder.YieldedExpressionListBuilder.Component...) -> SwiftSyntaxBuilder.YieldedExpressionListBuilder.Component
  public static func buildExpression(_ expression: SwiftSyntaxBuilder.YieldedExpressionListBuilder.Expression) -> SwiftSyntaxBuilder.YieldedExpressionListBuilder.Component
  @_disfavoredOverload public static func buildExpression(_ expression: SwiftSyntaxBuilder.YieldedExpressionListBuilder.FinalResult) -> SwiftSyntaxBuilder.YieldedExpressionListBuilder.Component
  public static func buildOptional(_ component: SwiftSyntaxBuilder.YieldedExpressionListBuilder.Component?) -> SwiftSyntaxBuilder.YieldedExpressionListBuilder.Component
  public static func buildEither(first component: SwiftSyntaxBuilder.YieldedExpressionListBuilder.Component) -> SwiftSyntaxBuilder.YieldedExpressionListBuilder.Component
  public static func buildEither(second component: SwiftSyntaxBuilder.YieldedExpressionListBuilder.Component) -> SwiftSyntaxBuilder.YieldedExpressionListBuilder.Component
  public static func buildArray(_ components: [SwiftSyntaxBuilder.YieldedExpressionListBuilder.Component]) -> SwiftSyntaxBuilder.YieldedExpressionListBuilder.Component
  public static func buildLimitedAvailability(_ component: SwiftSyntaxBuilder.YieldedExpressionListBuilder.Component) -> SwiftSyntaxBuilder.YieldedExpressionListBuilder.Component
  public static func buildFinalResult(_ component: SwiftSyntaxBuilder.YieldedExpressionListBuilder.Component) -> SwiftSyntaxBuilder.YieldedExpressionListBuilder.FinalResult
}
extension SwiftSyntax.YieldedExpressionListSyntax {
  public init(@SwiftSyntaxBuilder.YieldedExpressionListBuilder itemsBuilder: () throws -> SwiftSyntax.YieldedExpressionListSyntax) rethrows
}
extension SwiftSyntax.AccessorBlockSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.AccessorDeclSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.AttributeSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.CatchClauseSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.ClosureParameterSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.CodeBlockItemSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.DeclSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.EnumCaseParameterSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.ExprSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.FunctionParameterSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.GenericParameterClauseSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.MemberBlockSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.PatternSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.SourceFileSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.StmtSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.SwitchCaseSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.TypeSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.AccessorDeclListSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.AttributeListSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.CodeBlockItemListSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
extension SwiftSyntax.MemberBlockItemListSyntax : SwiftSyntaxBuilder.SyntaxExpressibleByStringInterpolation {
  public typealias ExtendedGraphemeClusterLiteralType = Swift.String
  public typealias StringLiteralType = Swift.String
  public typealias UnicodeScalarLiteralType = Swift.String
}
